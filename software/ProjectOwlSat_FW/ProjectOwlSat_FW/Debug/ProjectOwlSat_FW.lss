
ProjectOwlSat_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002854  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000024c  20000068  000028bc  00020068  2**2
                  ALLOC
  3 .stack        00002004  200002b4  00002b08  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c6ca  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e57  00000000  00000000  0004c7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006071  00000000  00000000  0005060a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f8  00000000  00000000  0005667b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c50  00000000  00000000  00056c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000655b  00000000  00000000  000578c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d3ac  00000000  00000000  0005de1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000940e0  00000000  00000000  0006b1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012dc  00000000  00000000  000ff2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 22 00 20 cd 1b 00 00 c9 1b 00 00 c9 1b 00 00     .". ............
	...
      2c:	c9 1b 00 00 00 00 00 00 00 00 00 00 c9 1b 00 00     ................
      3c:	c9 1b 00 00 c9 1b 00 00 c9 1b 00 00 c9 1b 00 00     ................
      4c:	c9 1b 00 00 e1 13 00 00 c9 1b 00 00 c9 1b 00 00     ................
      5c:	cd 08 00 00 c9 1b 00 00 81 13 00 00 91 13 00 00     ................
      6c:	a1 13 00 00 b1 13 00 00 c1 13 00 00 d1 13 00 00     ................
      7c:	c9 1b 00 00 c9 1b 00 00 c9 1b 00 00 c9 1b 00 00     ................
      8c:	c9 1b 00 00 c9 1b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	c9 1b 00 00 c9 1b 00 00 c9 1b 00 00 c9 1b 00 00     ................
      ac:	c9 1b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002854 	.word	0x00002854

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002854 	.word	0x00002854
     10c:	00002854 	.word	0x00002854
     110:	00000000 	.word	0x00000000

00000114 <_system_extint_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     114:	2140      	movs	r1, #64	; 0x40
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     116:	b500      	push	{lr}
     118:	4a15      	ldr	r2, [pc, #84]	; (170 <_system_extint_init+0x5c>)
     11a:	b083      	sub	sp, #12
     11c:	6993      	ldr	r3, [r2, #24]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     11e:	2005      	movs	r0, #5
     120:	430b      	orrs	r3, r1
     122:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     124:	2300      	movs	r3, #0
     126:	a901      	add	r1, sp, #4
     128:	700b      	strb	r3, [r1, #0]
     12a:	4b12      	ldr	r3, [pc, #72]	; (174 <_system_extint_init+0x60>)
     12c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     12e:	4b12      	ldr	r3, [pc, #72]	; (178 <_system_extint_init+0x64>)
     130:	2005      	movs	r0, #5
     132:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     134:	2101      	movs	r1, #1
     136:	4a11      	ldr	r2, [pc, #68]	; (17c <_system_extint_init+0x68>)
     138:	7813      	ldrb	r3, [r2, #0]
     13a:	430b      	orrs	r3, r1
     13c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     13e:	7853      	ldrb	r3, [r2, #1]
     140:	b25b      	sxtb	r3, r3
     142:	2b00      	cmp	r3, #0
     144:	dbfb      	blt.n	13e <_system_extint_init+0x2a>
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <_system_extint_init+0x6c>)

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     148:	2200      	movs	r2, #0
     14a:	0019      	movs	r1, r3
     14c:	3140      	adds	r1, #64	; 0x40
     14e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     150:	4299      	cmp	r1, r3
     152:	d1fc      	bne.n	14e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     154:	2210      	movs	r2, #16
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     156:	2102      	movs	r1, #2
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <_system_extint_init+0x70>)
     15a:	601a      	str	r2, [r3, #0]
     15c:	4a07      	ldr	r2, [pc, #28]	; (17c <_system_extint_init+0x68>)
     15e:	7813      	ldrb	r3, [r2, #0]
     160:	430b      	orrs	r3, r1
     162:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     164:	7853      	ldrb	r3, [r2, #1]
     166:	b25b      	sxtb	r3, r3
     168:	2b00      	cmp	r3, #0
     16a:	dbfb      	blt.n	164 <_system_extint_init+0x50>
}
     16c:	b003      	add	sp, #12
     16e:	bd00      	pop	{pc}
     170:	40000400 	.word	0x40000400
     174:	00001a69 	.word	0x00001a69
     178:	000019e1 	.word	0x000019e1
     17c:	40001800 	.word	0x40001800
     180:	200000ec 	.word	0x200000ec
     184:	e000e100 	.word	0xe000e100

00000188 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     188:	b5f0      	push	{r4, r5, r6, r7, lr}
     18a:	464e      	mov	r6, r9
     18c:	4645      	mov	r5, r8
     18e:	46de      	mov	lr, fp
     190:	4657      	mov	r7, sl
     192:	b5e0      	push	{r5, r6, r7, lr}
     194:	0005      	movs	r5, r0
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     196:	4bbc      	ldr	r3, [pc, #752]	; (488 <usart_init+0x300>)
{
     198:	000c      	movs	r4, r1
     19a:	b091      	sub	sp, #68	; 0x44
	module->hw = hw;
     19c:	6029      	str	r1, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     19e:	0008      	movs	r0, r1
{
     1a0:	4690      	mov	r8, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1a2:	4699      	mov	r9, r3
     1a4:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     1a6:	2301      	movs	r3, #1
     1a8:	6822      	ldr	r2, [r4, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1aa:	0006      	movs	r6, r0
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     1ac:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     1ae:	4213      	tst	r3, r2
     1b0:	d006      	beq.n	1c0 <usart_init+0x38>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     1b2:	b011      	add	sp, #68	; 0x44
     1b4:	bc3c      	pop	{r2, r3, r4, r5}
     1b6:	4690      	mov	r8, r2
     1b8:	4699      	mov	r9, r3
     1ba:	46a2      	mov	sl, r4
     1bc:	46ab      	mov	fp, r5
     1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     1c0:	2702      	movs	r7, #2
     1c2:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     1c4:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     1c6:	4017      	ands	r7, r2
     1c8:	d1f3      	bne.n	1b2 <usart_init+0x2a>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1ca:	1cb0      	adds	r0, r6, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1cc:	4083      	lsls	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1ce:	4aaf      	ldr	r2, [pc, #700]	; (48c <usart_init+0x304>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1d0:	3614      	adds	r6, #20
     1d2:	6a11      	ldr	r1, [r2, #32]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1d4:	b2f6      	uxtb	r6, r6
     1d6:	430b      	orrs	r3, r1
     1d8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     1da:	232d      	movs	r3, #45	; 0x2d
     1dc:	469a      	mov	sl, r3
     1de:	4643      	mov	r3, r8
     1e0:	4652      	mov	r2, sl
     1e2:	5c9b      	ldrb	r3, [r3, r2]
     1e4:	a90a      	add	r1, sp, #40	; 0x28
     1e6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1e8:	0030      	movs	r0, r6
     1ea:	4ba9      	ldr	r3, [pc, #676]	; (490 <usart_init+0x308>)
     1ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1ee:	0030      	movs	r0, r6
     1f0:	4ba8      	ldr	r3, [pc, #672]	; (494 <usart_init+0x30c>)
     1f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1f4:	4652      	mov	r2, sl
     1f6:	4643      	mov	r3, r8
     1f8:	2100      	movs	r1, #0
     1fa:	5c98      	ldrb	r0, [r3, r2]
     1fc:	4ba6      	ldr	r3, [pc, #664]	; (498 <usart_init+0x310>)
     1fe:	4798      	blx	r3
	module->character_size = config->character_size;
     200:	4643      	mov	r3, r8
     202:	7adb      	ldrb	r3, [r3, #11]
	module->receiver_enabled = config->receiver_enable;
     204:	4642      	mov	r2, r8
	module->character_size = config->character_size;
     206:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     208:	2324      	movs	r3, #36	; 0x24
     20a:	5cd3      	ldrb	r3, [r2, r3]
	uint16_t baud  = 0;
     20c:	ae0c      	add	r6, sp, #48	; 0x30
	module->receiver_enabled = config->receiver_enable;
     20e:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     210:	2325      	movs	r3, #37	; 0x25
     212:	5cd3      	ldrb	r3, [r2, r3]
     214:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     216:	7ed3      	ldrb	r3, [r2, #27]
     218:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     21a:	7f13      	ldrb	r3, [r2, #28]
     21c:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     21e:	682b      	ldr	r3, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     220:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     222:	469a      	mov	sl, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     224:	47c8      	blx	r9
	switch (config->sample_rate) {
     226:	4643      	mov	r3, r8
	uint16_t baud  = 0;
     228:	8037      	strh	r7, [r6, #0]
	switch (config->sample_rate) {
     22a:	8a1a      	ldrh	r2, [r3, #16]
     22c:	2380      	movs	r3, #128	; 0x80
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     22e:	3014      	adds	r0, #20
	switch (config->sample_rate) {
     230:	9202      	str	r2, [sp, #8]
     232:	01db      	lsls	r3, r3, #7
     234:	429a      	cmp	r2, r3
     236:	d100      	bne.n	23a <usart_init+0xb2>
     238:	e0b5      	b.n	3a6 <usart_init+0x21e>
     23a:	d800      	bhi.n	23e <usart_init+0xb6>
     23c:	e0ed      	b.n	41a <usart_init+0x292>
     23e:	23c0      	movs	r3, #192	; 0xc0
     240:	9a02      	ldr	r2, [sp, #8]
     242:	01db      	lsls	r3, r3, #7
     244:	429a      	cmp	r2, r3
     246:	d100      	bne.n	24a <usart_init+0xc2>
     248:	e0f5      	b.n	436 <usart_init+0x2ae>
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	021b      	lsls	r3, r3, #8
     24e:	429a      	cmp	r2, r3
     250:	d000      	beq.n	254 <usart_init+0xcc>
     252:	e0eb      	b.n	42c <usart_init+0x2a4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     254:	2303      	movs	r3, #3
     256:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     258:	2300      	movs	r3, #0
     25a:	9308      	str	r3, [sp, #32]
	ctrla = (uint32_t)config->data_order |
     25c:	4643      	mov	r3, r8
     25e:	681b      	ldr	r3, [r3, #0]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     260:	4642      	mov	r2, r8
	ctrla = (uint32_t)config->data_order |
     262:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     264:	4643      	mov	r3, r8
     266:	68db      	ldr	r3, [r3, #12]
     268:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     26a:	4643      	mov	r3, r8
     26c:	695b      	ldr	r3, [r3, #20]
     26e:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     270:	4643      	mov	r3, r8
     272:	7e1b      	ldrb	r3, [r3, #24]
     274:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     276:	2326      	movs	r3, #38	; 0x26
     278:	5cd3      	ldrb	r3, [r2, r3]
     27a:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
     27c:	6853      	ldr	r3, [r2, #4]
     27e:	469b      	mov	fp, r3
	switch (transfer_mode)
     280:	2b00      	cmp	r3, #0
     282:	d100      	bne.n	286 <usart_init+0xfe>
     284:	e0b5      	b.n	3f2 <usart_init+0x26a>
     286:	2380      	movs	r3, #128	; 0x80
     288:	055b      	lsls	r3, r3, #21
     28a:	459b      	cmp	fp, r3
     28c:	d000      	beq.n	290 <usart_init+0x108>
     28e:	e0ae      	b.n	3ee <usart_init+0x266>
			if (!config->use_external_clock) {
     290:	2327      	movs	r3, #39	; 0x27
     292:	5cd2      	ldrb	r2, [r2, r3]
     294:	2300      	movs	r3, #0
     296:	2a00      	cmp	r2, #0
     298:	d100      	bne.n	29c <usart_init+0x114>
     29a:	e0e8      	b.n	46e <usart_init+0x2e6>
	if(config->encoding_format_enable) {
     29c:	4642      	mov	r2, r8
     29e:	7e52      	ldrb	r2, [r2, #25]
     2a0:	2a00      	cmp	r2, #0
     2a2:	d003      	beq.n	2ac <usart_init+0x124>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     2a4:	4642      	mov	r2, r8
     2a6:	4651      	mov	r1, sl
     2a8:	7e92      	ldrb	r2, [r2, #26]
     2aa:	738a      	strb	r2, [r1, #14]
	usart_hw->BAUD.reg = baud;
     2ac:	4652      	mov	r2, sl
     2ae:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     2b0:	9a04      	ldr	r2, [sp, #16]
     2b2:	9b03      	ldr	r3, [sp, #12]
     2b4:	9f02      	ldr	r7, [sp, #8]
     2b6:	4313      	orrs	r3, r2
     2b8:	9a05      	ldr	r2, [sp, #20]
     2ba:	4313      	orrs	r3, r2
     2bc:	465a      	mov	r2, fp
     2be:	4313      	orrs	r3, r2
     2c0:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     2c2:	9b06      	ldr	r3, [sp, #24]
	if (config->use_external_clock == false) {
     2c4:	4642      	mov	r2, r8
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     2c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     2c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     2ca:	9b07      	ldr	r3, [sp, #28]
     2cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     2ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     2d0:	2327      	movs	r3, #39	; 0x27
     2d2:	5cd3      	ldrb	r3, [r2, r3]
     2d4:	2b00      	cmp	r3, #0
     2d6:	d101      	bne.n	2dc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     2d8:	3304      	adds	r3, #4
     2da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     2dc:	4643      	mov	r3, r8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     2de:	4642      	mov	r2, r8
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     2e0:	7e5b      	ldrb	r3, [r3, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     2e2:	7f12      	ldrb	r2, [r2, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     2e4:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     2e6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     2e8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     2ea:	4642      	mov	r2, r8
     2ec:	7f52      	ldrb	r2, [r2, #29]
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     2ee:	4641      	mov	r1, r8
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     2f0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     2f2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     2f4:	2224      	movs	r2, #36	; 0x24
     2f6:	5c8a      	ldrb	r2, [r1, r2]
     2f8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     2fa:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     2fc:	2225      	movs	r2, #37	; 0x25
     2fe:	5c8a      	ldrb	r2, [r1, r2]
	ctrlb |= (uint32_t)config->character_size;
     300:	7a89      	ldrb	r1, [r1, #10]
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     302:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     304:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     306:	4642      	mov	r2, r8
     308:	7ad2      	ldrb	r2, [r2, #11]
     30a:	4311      	orrs	r1, r2
     30c:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     30e:	4643      	mov	r3, r8
     310:	891b      	ldrh	r3, [r3, #8]
     312:	2bff      	cmp	r3, #255	; 0xff
     314:	d100      	bne.n	318 <usart_init+0x190>
     316:	e093      	b.n	440 <usart_init+0x2b8>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     318:	2280      	movs	r2, #128	; 0x80
     31a:	0452      	lsls	r2, r2, #17
     31c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     31e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     320:	232c      	movs	r3, #44	; 0x2c
     322:	4642      	mov	r2, r8
     324:	5cd3      	ldrb	r3, [r2, r3]
     326:	2b00      	cmp	r3, #0
     328:	d103      	bne.n	332 <usart_init+0x1aa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     32a:	4b5c      	ldr	r3, [pc, #368]	; (49c <usart_init+0x314>)
     32c:	789b      	ldrb	r3, [r3, #2]
     32e:	079b      	lsls	r3, r3, #30
     330:	d501      	bpl.n	336 <usart_init+0x1ae>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     332:	2380      	movs	r3, #128	; 0x80
     334:	431f      	orrs	r7, r3
     336:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     338:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     33a:	2b00      	cmp	r3, #0
     33c:	d1fc      	bne.n	338 <usart_init+0x1b0>
	usart_hw->CTRLB.reg = ctrlb;
     33e:	4653      	mov	r3, sl
     340:	6059      	str	r1, [r3, #4]
     342:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     344:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     346:	2b00      	cmp	r3, #0
     348:	d1fc      	bne.n	344 <usart_init+0x1bc>
	usart_hw->CTRLA.reg = ctrla;
     34a:	4652      	mov	r2, sl
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     34c:	a908      	add	r1, sp, #32
     34e:	6017      	str	r7, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     350:	734b      	strb	r3, [r1, #13]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     352:	73cb      	strb	r3, [r1, #15]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     354:	738b      	strb	r3, [r1, #14]
			config->pinmux_pad0, config->pinmux_pad1,
     356:	4643      	mov	r3, r8
     358:	6b18      	ldr	r0, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	config->mux_position = SYSTEM_PINMUX_GPIO;
     35c:	2280      	movs	r2, #128	; 0x80
     35e:	6073      	str	r3, [r6, #4]
     360:	4643      	mov	r3, r8
     362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     364:	2700      	movs	r7, #0
     366:	60b3      	str	r3, [r6, #8]
     368:	4643      	mov	r3, r8
     36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     36c:	730a      	strb	r2, [r1, #12]
     36e:	60f3      	str	r3, [r6, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
     370:	4b4b      	ldr	r3, [pc, #300]	; (4a0 <usart_init+0x318>)
	uint32_t pad_pinmuxes[] = {
     372:	900c      	str	r0, [sp, #48]	; 0x30
			current_pinmux = _sercom_get_default_pad(hw, pad);
     374:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     376:	4b4b      	ldr	r3, [pc, #300]	; (4a4 <usart_init+0x31c>)
     378:	b2f9      	uxtb	r1, r7
     37a:	469a      	mov	sl, r3
		if (current_pinmux == PINMUX_DEFAULT) {
     37c:	2800      	cmp	r0, #0
     37e:	d00f      	beq.n	3a0 <usart_init+0x218>
		if (current_pinmux != PINMUX_UNUSED) {
     380:	1c43      	adds	r3, r0, #1
     382:	d005      	beq.n	390 <usart_init+0x208>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     384:	ab08      	add	r3, sp, #32
     386:	7318      	strb	r0, [r3, #12]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     388:	0c00      	lsrs	r0, r0, #16
     38a:	b2c0      	uxtb	r0, r0
     38c:	a90b      	add	r1, sp, #44	; 0x2c
     38e:	47d0      	blx	sl
     390:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     392:	2f04      	cmp	r7, #4
     394:	d00c      	beq.n	3b0 <usart_init+0x228>
     396:	00bb      	lsls	r3, r7, #2
     398:	58f0      	ldr	r0, [r6, r3]
     39a:	b2f9      	uxtb	r1, r7
		if (current_pinmux == PINMUX_DEFAULT) {
     39c:	2800      	cmp	r0, #0
     39e:	d1ef      	bne.n	380 <usart_init+0x1f8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     3a0:	0020      	movs	r0, r4
     3a2:	47d8      	blx	fp
     3a4:	e7ec      	b.n	380 <usart_init+0x1f8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     3a6:	2308      	movs	r3, #8
     3a8:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     3aa:	2300      	movs	r3, #0
     3ac:	9308      	str	r3, [sp, #32]
     3ae:	e755      	b.n	25c <usart_init+0xd4>
		module->callback[i]            = NULL;
     3b0:	2300      	movs	r3, #0
	module->remaining_tx_buffer_length = 0x0000;
     3b2:	2200      	movs	r2, #0
     3b4:	85eb      	strh	r3, [r5, #46]	; 0x2e
		module->callback[i]            = NULL;
     3b6:	60eb      	str	r3, [r5, #12]
     3b8:	612b      	str	r3, [r5, #16]
     3ba:	616b      	str	r3, [r5, #20]
     3bc:	61ab      	str	r3, [r5, #24]
     3be:	61eb      	str	r3, [r5, #28]
     3c0:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     3c2:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     3c4:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
     3c6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     3c8:	3330      	adds	r3, #48	; 0x30
     3ca:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     3cc:	3301      	adds	r3, #1
     3ce:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     3d0:	3301      	adds	r3, #1
     3d2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     3d4:	3301      	adds	r3, #1
     3d6:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     3d8:	6828      	ldr	r0, [r5, #0]
     3da:	47c8      	blx	r9
     3dc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     3de:	4b32      	ldr	r3, [pc, #200]	; (4a8 <usart_init+0x320>)
     3e0:	4932      	ldr	r1, [pc, #200]	; (4ac <usart_init+0x324>)
     3e2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     3e4:	4b32      	ldr	r3, [pc, #200]	; (4b0 <usart_init+0x328>)
     3e6:	00a4      	lsls	r4, r4, #2
     3e8:	50e5      	str	r5, [r4, r3]
	return status_code;
     3ea:	2000      	movs	r0, #0
     3ec:	e6e1      	b.n	1b2 <usart_init+0x2a>
	switch (transfer_mode)
     3ee:	2300      	movs	r3, #0
     3f0:	e754      	b.n	29c <usart_init+0x114>
			if (config->use_external_clock) {
     3f2:	2327      	movs	r3, #39	; 0x27
     3f4:	4642      	mov	r2, r8
     3f6:	5cd3      	ldrb	r3, [r2, r3]
     3f8:	2b00      	cmp	r3, #0
     3fa:	d02a      	beq.n	452 <usart_init+0x2ca>
				status_code =
     3fc:	4641      	mov	r1, r8
     3fe:	4640      	mov	r0, r8
     400:	9b09      	ldr	r3, [sp, #36]	; 0x24
     402:	0032      	movs	r2, r6
     404:	9300      	str	r3, [sp, #0]
     406:	6a89      	ldr	r1, [r1, #40]	; 0x28
     408:	9b08      	ldr	r3, [sp, #32]
     40a:	6a00      	ldr	r0, [r0, #32]
     40c:	4f29      	ldr	r7, [pc, #164]	; (4b4 <usart_init+0x32c>)
     40e:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     410:	2800      	cmp	r0, #0
     412:	d000      	beq.n	416 <usart_init+0x28e>
     414:	e6cd      	b.n	1b2 <usart_init+0x2a>
     416:	8833      	ldrh	r3, [r6, #0]
     418:	e740      	b.n	29c <usart_init+0x114>
	switch (config->sample_rate) {
     41a:	2380      	movs	r3, #128	; 0x80
     41c:	019b      	lsls	r3, r3, #6
     41e:	429a      	cmp	r2, r3
     420:	d104      	bne.n	42c <usart_init+0x2a4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     422:	2310      	movs	r3, #16
     424:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     426:	3b0f      	subs	r3, #15
     428:	9308      	str	r3, [sp, #32]
     42a:	e717      	b.n	25c <usart_init+0xd4>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     42c:	2310      	movs	r3, #16
     42e:	9309      	str	r3, [sp, #36]	; 0x24
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     430:	2300      	movs	r3, #0
     432:	9308      	str	r3, [sp, #32]
     434:	e712      	b.n	25c <usart_init+0xd4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     436:	2308      	movs	r3, #8
     438:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     43a:	3b07      	subs	r3, #7
     43c:	9308      	str	r3, [sp, #32]
     43e:	e70d      	b.n	25c <usart_init+0xd4>
		if(config->lin_slave_enable) {
     440:	4643      	mov	r3, r8
     442:	7edb      	ldrb	r3, [r3, #27]
     444:	2b00      	cmp	r3, #0
     446:	d100      	bne.n	44a <usart_init+0x2c2>
     448:	e76a      	b.n	320 <usart_init+0x198>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     44a:	2380      	movs	r3, #128	; 0x80
     44c:	04db      	lsls	r3, r3, #19
     44e:	431f      	orrs	r7, r3
     450:	e766      	b.n	320 <usart_init+0x198>
						_sercom_get_async_baud_val(config->baudrate,
     452:	6a13      	ldr	r3, [r2, #32]
     454:	b2c0      	uxtb	r0, r0
     456:	001f      	movs	r7, r3
     458:	4b17      	ldr	r3, [pc, #92]	; (4b8 <usart_init+0x330>)
     45a:	4798      	blx	r3
				status_code =
     45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
						_sercom_get_async_baud_val(config->baudrate,
     45e:	0001      	movs	r1, r0
				status_code =
     460:	9300      	str	r3, [sp, #0]
     462:	0032      	movs	r2, r6
     464:	9b08      	ldr	r3, [sp, #32]
     466:	0038      	movs	r0, r7
     468:	4f12      	ldr	r7, [pc, #72]	; (4b4 <usart_init+0x32c>)
     46a:	47b8      	blx	r7
     46c:	e7d0      	b.n	410 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     46e:	4643      	mov	r3, r8
     470:	6a1b      	ldr	r3, [r3, #32]
     472:	b2c0      	uxtb	r0, r0
     474:	001f      	movs	r7, r3
     476:	4b10      	ldr	r3, [pc, #64]	; (4b8 <usart_init+0x330>)
     478:	4798      	blx	r3
     47a:	0032      	movs	r2, r6
     47c:	0001      	movs	r1, r0
     47e:	4b0f      	ldr	r3, [pc, #60]	; (4bc <usart_init+0x334>)
     480:	0038      	movs	r0, r7
     482:	4798      	blx	r3
     484:	e7c4      	b.n	410 <usart_init+0x288>
     486:	46c0      	nop			; (mov r8, r8)
     488:	000012d9 	.word	0x000012d9
     48c:	40000400 	.word	0x40000400
     490:	00001a69 	.word	0x00001a69
     494:	000019e1 	.word	0x000019e1
     498:	00001131 	.word	0x00001131
     49c:	41002000 	.word	0x41002000
     4a0:	00001179 	.word	0x00001179
     4a4:	00001b69 	.word	0x00001b69
     4a8:	0000130d 	.word	0x0000130d
     4ac:	000005f1 	.word	0x000005f1
     4b0:	20000294 	.word	0x20000294
     4b4:	00000f71 	.word	0x00000f71
     4b8:	00001a85 	.word	0x00001a85
     4bc:	00000f49 	.word	0x00000f49

000004c0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c2:	46d6      	mov	lr, sl
     4c4:	464f      	mov	r7, r9
     4c6:	4646      	mov	r6, r8
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     4c8:	2317      	movs	r3, #23
{
     4ca:	b5c0      	push	{r6, r7, lr}
	if (length == 0) {
     4cc:	2a00      	cmp	r2, #0
     4ce:	d105      	bne.n	4dc <usart_write_buffer_wait+0x1c>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     4d0:	0018      	movs	r0, r3
     4d2:	bc1c      	pop	{r2, r3, r4}
     4d4:	4690      	mov	r8, r2
     4d6:	4699      	mov	r9, r3
     4d8:	46a2      	mov	sl, r4
     4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     4dc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     4de:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     4e0:	2c00      	cmp	r4, #0
     4e2:	d0f5      	beq.n	4d0 <usart_write_buffer_wait+0x10>
	while (length--) {
     4e4:	3a01      	subs	r2, #1
     4e6:	b293      	uxth	r3, r2
     4e8:	469a      	mov	sl, r3
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     4ea:	2302      	movs	r3, #2
     4ec:	469c      	mov	ip, r3
	while (length--) {
     4ee:	4b21      	ldr	r3, [pc, #132]	; (574 <usart_write_buffer_wait+0xb4>)
	uint16_t tx_pos = 0;
     4f0:	2700      	movs	r7, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     4f2:	2501      	movs	r5, #1
	while (length--) {
     4f4:	4698      	mov	r8, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     4f6:	6804      	ldr	r4, [r0, #0]
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     4f8:	7e23      	ldrb	r3, [r4, #24]
     4fa:	421d      	tst	r5, r3
     4fc:	d107      	bne.n	50e <usart_write_buffer_wait+0x4e>
     4fe:	4b1d      	ldr	r3, [pc, #116]	; (574 <usart_write_buffer_wait+0xb4>)
     500:	e002      	b.n	508 <usart_write_buffer_wait+0x48>
     502:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     504:	2b00      	cmp	r3, #0
     506:	d033      	beq.n	570 <usart_write_buffer_wait+0xb0>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     508:	7e22      	ldrb	r2, [r4, #24]
     50a:	4215      	tst	r5, r2
     50c:	d0f9      	beq.n	502 <usart_write_buffer_wait+0x42>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     50e:	7946      	ldrb	r6, [r0, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
     510:	1c7b      	adds	r3, r7, #1
     512:	b29b      	uxth	r3, r3
     514:	5dca      	ldrb	r2, [r1, r7]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     516:	2e01      	cmp	r6, #1
     518:	d023      	beq.n	562 <usart_write_buffer_wait+0xa2>
		uint16_t data_to_send = tx_data[tx_pos++];
     51a:	b292      	uxth	r2, r2
     51c:	4691      	mov	r9, r2
     51e:	001f      	movs	r7, r3
	if (!(module->transmitter_enabled)) {
     520:	79c3      	ldrb	r3, [r0, #7]
     522:	2b00      	cmp	r3, #0
     524:	d009      	beq.n	53a <usart_write_buffer_wait+0x7a>
	if (module->remaining_tx_buffer_length > 0) {
     526:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
     528:	2b00      	cmp	r3, #0
     52a:	d106      	bne.n	53a <usart_write_buffer_wait+0x7a>
	usart_hw->DATA.reg = tx_data;
     52c:	464b      	mov	r3, r9
	SercomUsart *const usart_hw = &(module->hw->USART);
     52e:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     530:	8513      	strh	r3, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     532:	4666      	mov	r6, ip
     534:	7e13      	ldrb	r3, [r2, #24]
     536:	421e      	tst	r6, r3
     538:	d0fb      	beq.n	532 <usart_write_buffer_wait+0x72>
	while (length--) {
     53a:	4656      	mov	r6, sl
     53c:	3e01      	subs	r6, #1
     53e:	b2b3      	uxth	r3, r6
     540:	469a      	mov	sl, r3
     542:	4543      	cmp	r3, r8
     544:	d1d8      	bne.n	4f8 <usart_write_buffer_wait+0x38>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     546:	7e23      	ldrb	r3, [r4, #24]
     548:	079b      	lsls	r3, r3, #30
     54a:	d408      	bmi.n	55e <usart_write_buffer_wait+0x9e>
     54c:	4656      	mov	r6, sl
     54e:	2102      	movs	r1, #2
     550:	e002      	b.n	558 <usart_write_buffer_wait+0x98>
     552:	3e01      	subs	r6, #1
		} else if (i == USART_TIMEOUT) {
     554:	2e00      	cmp	r6, #0
     556:	d00b      	beq.n	570 <usart_write_buffer_wait+0xb0>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     558:	7e22      	ldrb	r2, [r4, #24]
     55a:	4211      	tst	r1, r2
     55c:	d0f9      	beq.n	552 <usart_write_buffer_wait+0x92>
	return STATUS_OK;
     55e:	2300      	movs	r3, #0
     560:	e7b6      	b.n	4d0 <usart_write_buffer_wait+0x10>
			data_to_send |= (tx_data[tx_pos++] << 8);
     562:	5ccb      	ldrb	r3, [r1, r3]
     564:	3702      	adds	r7, #2
     566:	021b      	lsls	r3, r3, #8
     568:	4313      	orrs	r3, r2
     56a:	b2bf      	uxth	r7, r7
     56c:	4699      	mov	r9, r3
     56e:	e7d7      	b.n	520 <usart_write_buffer_wait+0x60>
				return STATUS_ERR_TIMEOUT;
     570:	2312      	movs	r3, #18
     572:	e7ad      	b.n	4d0 <usart_write_buffer_wait+0x10>
     574:	0000ffff 	.word	0x0000ffff

00000578 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     57a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     57c:	4b10      	ldr	r3, [pc, #64]	; (5c0 <_usart_read_buffer+0x48>)
     57e:	000e      	movs	r6, r1
     580:	0017      	movs	r7, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     582:	6805      	ldr	r5, [r0, #0]
     584:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     586:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     588:	2b00      	cmp	r3, #0
     58a:	d003      	beq.n	594 <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <_usart_read_buffer+0x4c>)
     58e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     590:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     594:	4b0b      	ldr	r3, [pc, #44]	; (5c4 <_usart_read_buffer+0x4c>)
	module->remaining_rx_buffer_length = length;
     596:	85a7      	strh	r7, [r4, #44]	; 0x2c
     598:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
     59a:	2332      	movs	r3, #50	; 0x32
     59c:	2205      	movs	r2, #5
	module->rx_buffer_ptr              = rx_data;
     59e:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     5a0:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     5a2:	3b2e      	subs	r3, #46	; 0x2e
     5a4:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
     5a6:	7a23      	ldrb	r3, [r4, #8]
     5a8:	2b00      	cmp	r3, #0
     5aa:	d106      	bne.n	5ba <_usart_read_buffer+0x42>
	if(module->start_frame_detection_enabled) {
     5ac:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     5ae:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     5b0:	2b00      	cmp	r3, #0
     5b2:	d0ee      	beq.n	592 <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     5b4:	2308      	movs	r3, #8
     5b6:	75ab      	strb	r3, [r5, #22]
     5b8:	e7eb      	b.n	592 <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     5ba:	2320      	movs	r3, #32
     5bc:	75ab      	strb	r3, [r5, #22]
     5be:	e7f5      	b.n	5ac <_usart_read_buffer+0x34>
     5c0:	00001421 	.word	0x00001421
     5c4:	0000145d 	.word	0x0000145d

000005c8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     5c8:	1c93      	adds	r3, r2, #2
     5ca:	009b      	lsls	r3, r3, #2
     5cc:	18c3      	adds	r3, r0, r3
     5ce:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     5d0:	2301      	movs	r3, #1
     5d2:	4093      	lsls	r3, r2
     5d4:	2130      	movs	r1, #48	; 0x30
     5d6:	001a      	movs	r2, r3
     5d8:	5c43      	ldrb	r3, [r0, r1]
     5da:	4313      	orrs	r3, r2
     5dc:	5443      	strb	r3, [r0, r1]
}
     5de:	4770      	bx	lr

000005e0 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     5e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
     5e2:	2201      	movs	r2, #1
     5e4:	4b01      	ldr	r3, [pc, #4]	; (5ec <usart_read_job+0xc>)
     5e6:	4798      	blx	r3
}
     5e8:	bd10      	pop	{r4, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00000579 	.word	0x00000579

000005f0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     5f2:	4b62      	ldr	r3, [pc, #392]	; (77c <_usart_interrupt_handler+0x18c>)
     5f4:	0080      	lsls	r0, r0, #2
     5f6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     5f8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     5fa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     5fc:	2b00      	cmp	r3, #0
     5fe:	d1fc      	bne.n	5fa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     600:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     602:	7da6      	ldrb	r6, [r4, #22]
	callback_status = module->callback_reg_mask &
     604:	2231      	movs	r2, #49	; 0x31
     606:	401e      	ands	r6, r3
     608:	2330      	movs	r3, #48	; 0x30
     60a:	5caf      	ldrb	r7, [r5, r2]
     60c:	5ceb      	ldrb	r3, [r5, r3]
     60e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     610:	2301      	movs	r3, #1
     612:	4233      	tst	r3, r6
     614:	d019      	beq.n	64a <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
     616:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
     618:	2a00      	cmp	r2, #0
     61a:	d04d      	beq.n	6b8 <_usart_interrupt_handler+0xc8>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     61c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     61e:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     620:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
     622:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     624:	7969      	ldrb	r1, [r5, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     626:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     628:	2901      	cmp	r1, #1
     62a:	d100      	bne.n	62e <_usart_interrupt_handler+0x3e>
     62c:	e075      	b.n	71a <_usart_interrupt_handler+0x12a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     62e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     630:	05db      	lsls	r3, r3, #23
     632:	0ddb      	lsrs	r3, r3, #23
     634:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     636:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     638:	3b01      	subs	r3, #1
     63a:	b29b      	uxth	r3, r3
     63c:	85eb      	strh	r3, [r5, #46]	; 0x2e
     63e:	2b00      	cmp	r3, #0
     640:	d103      	bne.n	64a <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     642:	3301      	adds	r3, #1
     644:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     646:	3301      	adds	r3, #1
     648:	75a3      	strb	r3, [r4, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     64a:	2302      	movs	r3, #2
     64c:	4233      	tst	r3, r6
     64e:	d005      	beq.n	65c <_usart_interrupt_handler+0x6c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
     650:	2200      	movs	r2, #0
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     652:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     654:	3331      	adds	r3, #49	; 0x31
     656:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     658:	07fb      	lsls	r3, r7, #31
     65a:	d43b      	bmi.n	6d4 <_usart_interrupt_handler+0xe4>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     65c:	2304      	movs	r3, #4
     65e:	4233      	tst	r3, r6
     660:	d012      	beq.n	688 <_usart_interrupt_handler+0x98>

		if (module->remaining_rx_buffer_length) {
     662:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
     664:	2a00      	cmp	r2, #0
     666:	d025      	beq.n	6b4 <_usart_interrupt_handler+0xc4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     668:	8b63      	ldrh	r3, [r4, #26]
     66a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     66c:	071a      	lsls	r2, r3, #28
     66e:	d535      	bpl.n	6dc <_usart_interrupt_handler+0xec>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     670:	2237      	movs	r2, #55	; 0x37
     672:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     674:	d035      	beq.n	6e2 <_usart_interrupt_handler+0xf2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     676:	2202      	movs	r2, #2
     678:	421a      	tst	r2, r3
     67a:	d054      	beq.n	726 <_usart_interrupt_handler+0x136>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     67c:	211a      	movs	r1, #26
     67e:	2332      	movs	r3, #50	; 0x32
     680:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     682:	8362      	strh	r2, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     684:	077b      	lsls	r3, r7, #29
     686:	d459      	bmi.n	73c <_usart_interrupt_handler+0x14c>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     688:	2310      	movs	r3, #16
     68a:	4233      	tst	r3, r6
     68c:	d003      	beq.n	696 <_usart_interrupt_handler+0xa6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     68e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     690:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     692:	423b      	tst	r3, r7
     694:	d116      	bne.n	6c4 <_usart_interrupt_handler+0xd4>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     696:	2320      	movs	r3, #32
     698:	4233      	tst	r3, r6
     69a:	d003      	beq.n	6a4 <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     69c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     69e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     6a0:	073b      	lsls	r3, r7, #28
     6a2:	d413      	bmi.n	6cc <_usart_interrupt_handler+0xdc>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     6a4:	2308      	movs	r3, #8
     6a6:	4233      	tst	r3, r6
     6a8:	d003      	beq.n	6b2 <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     6aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     6ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     6ae:	06bb      	lsls	r3, r7, #26
     6b0:	d404      	bmi.n	6bc <_usart_interrupt_handler+0xcc>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     6b4:	7523      	strb	r3, [r4, #20]
     6b6:	e7e7      	b.n	688 <_usart_interrupt_handler+0x98>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     6b8:	7523      	strb	r3, [r4, #20]
     6ba:	e7c6      	b.n	64a <_usart_interrupt_handler+0x5a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     6bc:	6a2b      	ldr	r3, [r5, #32]
     6be:	0028      	movs	r0, r5
     6c0:	4798      	blx	r3
}
     6c2:	e7f6      	b.n	6b2 <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     6c4:	0028      	movs	r0, r5
     6c6:	69eb      	ldr	r3, [r5, #28]
     6c8:	4798      	blx	r3
     6ca:	e7e4      	b.n	696 <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     6cc:	0028      	movs	r0, r5
     6ce:	69ab      	ldr	r3, [r5, #24]
     6d0:	4798      	blx	r3
     6d2:	e7e7      	b.n	6a4 <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     6d4:	0028      	movs	r0, r5
     6d6:	68eb      	ldr	r3, [r5, #12]
     6d8:	4798      	blx	r3
     6da:	e7bf      	b.n	65c <_usart_interrupt_handler+0x6c>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     6dc:	223f      	movs	r2, #63	; 0x3f
     6de:	4013      	ands	r3, r2
			if (error_code) {
     6e0:	d1c9      	bne.n	676 <_usart_interrupt_handler+0x86>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     6e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     6e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     6e6:	05db      	lsls	r3, r3, #23
     6e8:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
     6ea:	b2da      	uxtb	r2, r3
     6ec:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
     6ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     6f0:	1c51      	adds	r1, r2, #1
     6f2:	6269      	str	r1, [r5, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     6f4:	7969      	ldrb	r1, [r5, #5]
     6f6:	2901      	cmp	r1, #1
     6f8:	d029      	beq.n	74e <_usart_interrupt_handler+0x15e>
				if(--(module->remaining_rx_buffer_length) == 0) {
     6fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     6fc:	3b01      	subs	r3, #1
     6fe:	b29b      	uxth	r3, r3
     700:	85ab      	strh	r3, [r5, #44]	; 0x2c
     702:	2b00      	cmp	r3, #0
     704:	d1c0      	bne.n	688 <_usart_interrupt_handler+0x98>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     706:	2204      	movs	r2, #4
     708:	7522      	strb	r2, [r4, #20]
					module->rx_status = STATUS_OK;
     70a:	322e      	adds	r2, #46	; 0x2e
     70c:	54ab      	strb	r3, [r5, r2]
					if (callback_status
     70e:	07bb      	lsls	r3, r7, #30
     710:	d5ba      	bpl.n	688 <_usart_interrupt_handler+0x98>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     712:	0028      	movs	r0, r5
     714:	692b      	ldr	r3, [r5, #16]
     716:	4798      	blx	r3
     718:	e7b6      	b.n	688 <_usart_interrupt_handler+0x98>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     71a:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
     71c:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     71e:	0209      	lsls	r1, r1, #8
     720:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     722:	62aa      	str	r2, [r5, #40]	; 0x28
     724:	e784      	b.n	630 <_usart_interrupt_handler+0x40>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     726:	2204      	movs	r2, #4
     728:	421a      	tst	r2, r3
     72a:	d10b      	bne.n	744 <_usart_interrupt_handler+0x154>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     72c:	2201      	movs	r2, #1
     72e:	421a      	tst	r2, r3
     730:	d013      	beq.n	75a <_usart_interrupt_handler+0x16a>
					module->rx_status = STATUS_ERR_BAD_DATA;
     732:	2113      	movs	r1, #19
     734:	2332      	movs	r3, #50	; 0x32
     736:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     738:	8362      	strh	r2, [r4, #26]
     73a:	e7a3      	b.n	684 <_usart_interrupt_handler+0x94>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     73c:	0028      	movs	r0, r5
     73e:	696b      	ldr	r3, [r5, #20]
     740:	4798      	blx	r3
     742:	e7a1      	b.n	688 <_usart_interrupt_handler+0x98>
					module->rx_status = STATUS_ERR_OVERFLOW;
     744:	211e      	movs	r1, #30
     746:	2332      	movs	r3, #50	; 0x32
     748:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     74a:	8362      	strh	r2, [r4, #26]
     74c:	e79a      	b.n	684 <_usart_interrupt_handler+0x94>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     74e:	0a1b      	lsrs	r3, r3, #8
     750:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     754:	3301      	adds	r3, #1
     756:	626b      	str	r3, [r5, #36]	; 0x24
     758:	e7cf      	b.n	6fa <_usart_interrupt_handler+0x10a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     75a:	2210      	movs	r2, #16
     75c:	421a      	tst	r2, r3
     75e:	d004      	beq.n	76a <_usart_interrupt_handler+0x17a>
					module->rx_status = STATUS_ERR_PROTOCOL;
     760:	2142      	movs	r1, #66	; 0x42
     762:	2332      	movs	r3, #50	; 0x32
     764:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     766:	8362      	strh	r2, [r4, #26]
     768:	e78c      	b.n	684 <_usart_interrupt_handler+0x94>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     76a:	2220      	movs	r2, #32
     76c:	421a      	tst	r2, r3
     76e:	d100      	bne.n	772 <_usart_interrupt_handler+0x182>
     770:	e788      	b.n	684 <_usart_interrupt_handler+0x94>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     772:	2141      	movs	r1, #65	; 0x41
     774:	2332      	movs	r3, #50	; 0x32
     776:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     778:	8362      	strh	r2, [r4, #26]
     77a:	e783      	b.n	684 <_usart_interrupt_handler+0x94>
     77c:	20000294 	.word	0x20000294

00000780 <os_usart_init>:

static void os_debug_init(void);
static void os_gps_init(void);

void os_usart_init(void)
{
     780:	b570      	push	{r4, r5, r6, lr}
     782:	b090      	sub	sp, #64	; 0x40
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     784:	4669      	mov	r1, sp
     786:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     788:	2380      	movs	r3, #128	; 0x80
	config->parity           = USART_PARITY_NONE;
     78a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     78c:	2501      	movs	r5, #1
     78e:	2224      	movs	r2, #36	; 0x24
	config->data_order       = USART_DATAORDER_LSB;
     790:	05db      	lsls	r3, r3, #23
     792:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     794:	2300      	movs	r3, #0
	config->receiver_enable  = true;
     796:	548d      	strb	r5, [r1, r2]
	config->transmitter_enable = true;
     798:	3201      	adds	r2, #1
     79a:	548d      	strb	r5, [r1, r2]
	config->clock_polarity_inverted = false;
     79c:	3201      	adds	r2, #1
     79e:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
     7a0:	3201      	adds	r2, #1
     7a2:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     7a4:	3205      	adds	r2, #5
     7a6:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
     7a8:	3201      	adds	r2, #1
     7aa:	548b      	strb	r3, [r1, r2]
	config->stopbits         = USART_STOPBITS_1;
     7ac:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     7ae:	72cb      	strb	r3, [r1, #11]
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     7b0:	820b      	strh	r3, [r1, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     7b2:	9301      	str	r3, [sp, #4]
	config->ext_clock_freq   = 0;
     7b4:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     7b6:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     7b8:	2313      	movs	r3, #19
     7ba:	768b      	strb	r3, [r1, #26]
	usart_get_config_defaults(&debug_conf);
	debug_conf.baudrate =		DEBUG_USART_MODULE;
	debug_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	debug_conf.parity =			USART_PARITY_NONE;
	debug_conf.stopbits =		USART_STOPBITS_1;
	debug_conf.pinmux_pad0 =	DEBUG_USART_PINMUX_PAD0;
     7bc:	4b18      	ldr	r3, [pc, #96]	; (820 <os_usart_init+0xa0>)
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     7be:	2200      	movs	r2, #0
     7c0:	930c      	str	r3, [sp, #48]	; 0x30
	debug_conf.pinmux_pad1 =	DEBUG_USART_PINMUX_PAD0;
     7c2:	930d      	str	r3, [sp, #52]	; 0x34
	debug_conf.pinmux_pad2 =	DEBUG_USART_PINMUX_PAD0;
     7c4:	930e      	str	r3, [sp, #56]	; 0x38
	debug_conf.pinmux_pad3 =	DEBUG_USART_PINMUX_PAD0;
     7c6:	930f      	str	r3, [sp, #60]	; 0x3c
	debug_conf.mux_setting =	DEBUG_USART_MUX_SETTING;
     7c8:	2380      	movs	r3, #128	; 0x80
		
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
     7ca:	4c16      	ldr	r4, [pc, #88]	; (824 <os_usart_init+0xa4>)
	config->lin_slave_enable      = false;
     7cc:	76ca      	strb	r2, [r1, #27]
	config->immediate_buffer_overflow_notification  = false;
     7ce:	760a      	strb	r2, [r1, #24]
	config->start_frame_detection_enable            = false;
     7d0:	770a      	strb	r2, [r1, #28]
	config->encoding_format_enable                  = false;
     7d2:	764a      	strb	r2, [r1, #25]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     7d4:	774a      	strb	r2, [r1, #29]
	debug_conf.mux_setting =	DEBUG_USART_MUX_SETTING;
     7d6:	035b      	lsls	r3, r3, #13
	debug_conf.baudrate =		DEBUG_USART_MODULE;
     7d8:	4913      	ldr	r1, [pc, #76]	; (828 <os_usart_init+0xa8>)
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
     7da:	466a      	mov	r2, sp
	debug_conf.mux_setting =	DEBUG_USART_MUX_SETTING;
     7dc:	9303      	str	r3, [sp, #12]
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
     7de:	0020      	movs	r0, r4
     7e0:	4b12      	ldr	r3, [pc, #72]	; (82c <os_usart_init+0xac>)
	debug_conf.baudrate =		DEBUG_USART_MODULE;
     7e2:	9108      	str	r1, [sp, #32]
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
     7e4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7e6:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7e8:	4b11      	ldr	r3, [pc, #68]	; (830 <os_usart_init+0xb0>)
     7ea:	0030      	movs	r0, r6
     7ec:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7ee:	231f      	movs	r3, #31
     7f0:	4018      	ands	r0, r3
     7f2:	4085      	lsls	r5, r0
     7f4:	4b0f      	ldr	r3, [pc, #60]	; (834 <os_usart_init+0xb4>)
     7f6:	601d      	str	r5, [r3, #0]
     7f8:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     7fa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7fc:	2b00      	cmp	r3, #0
     7fe:	d1fc      	bne.n	7fa <os_usart_init+0x7a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     800:	2202      	movs	r2, #2
     802:	6833      	ldr	r3, [r6, #0]
	usart_enable(&debug_mod);
		
	usart_register_callback(&debug_mod, debug_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
     804:	490c      	ldr	r1, [pc, #48]	; (838 <os_usart_init+0xb8>)
     806:	4313      	orrs	r3, r2
     808:	6033      	str	r3, [r6, #0]
     80a:	3a01      	subs	r2, #1
     80c:	0020      	movs	r0, r4
     80e:	4b0b      	ldr	r3, [pc, #44]	; (83c <os_usart_init+0xbc>)
     810:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     812:	2231      	movs	r2, #49	; 0x31
     814:	2102      	movs	r1, #2
     816:	5ca3      	ldrb	r3, [r4, r2]
     818:	430b      	orrs	r3, r1
     81a:	54a3      	strb	r3, [r4, r2]
}
     81c:	b010      	add	sp, #64	; 0x40
     81e:	bd70      	pop	{r4, r5, r6, pc}
     820:	00160002 	.word	0x00160002
     824:	2000012c 	.word	0x2000012c
     828:	42001400 	.word	0x42001400
     82c:	00000189 	.word	0x00000189
     830:	00001351 	.word	0x00001351
     834:	e000e100 	.word	0xe000e100
     838:	0000089d 	.word	0x0000089d
     83c:	000005c9 	.word	0x000005c9

00000840 <os_print>:
	usart_register_callback(&gps_mod, gps_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&gps_mod, USART_CALLBACK_BUFFER_RECEIVED);
	
}
void os_print(struct usart_module* mod, const char* str, ...)
{
     840:	b40e      	push	{r1, r2, r3}
	volatile uint8_t pprint_buffer[OS_PRINT_MAX_SIZE + 1];
	memset(pprint_buffer, '\0', OS_PRINT_MAX_SIZE + 1);
     842:	2202      	movs	r2, #2
{
     844:	b530      	push	{r4, r5, lr}
     846:	b0c2      	sub	sp, #264	; 0x108
     848:	ac45      	add	r4, sp, #276	; 0x114
     84a:	cc20      	ldmia	r4!, {r5}
	memset(pprint_buffer, '\0', OS_PRINT_MAX_SIZE + 1);
     84c:	32ff      	adds	r2, #255	; 0xff
     84e:	2100      	movs	r1, #0
     850:	4b0d      	ldr	r3, [pc, #52]	; (888 <os_print+0x48>)
     852:	a801      	add	r0, sp, #4
     854:	4798      	blx	r3
	va_list args;
	va_start(args, str);
	vsprintf(pprint_buffer, str, args);
     856:	0022      	movs	r2, r4
     858:	0029      	movs	r1, r5
     85a:	4b0c      	ldr	r3, [pc, #48]	; (88c <os_print+0x4c>)
	va_start(args, str);
     85c:	9400      	str	r4, [sp, #0]
	vsprintf(pprint_buffer, str, args);
     85e:	a801      	add	r0, sp, #4
     860:	4798      	blx	r3
	va_end(args);
	uint16_t strsize = (uint16_t)strlen(pprint_buffer);
     862:	4b0b      	ldr	r3, [pc, #44]	; (890 <os_print+0x50>)
     864:	a801      	add	r0, sp, #4
     866:	4798      	blx	r3
	if(strsize > OS_PRINT_MAX_SIZE)
     868:	2380      	movs	r3, #128	; 0x80
	uint16_t strsize = (uint16_t)strlen(pprint_buffer);
     86a:	b282      	uxth	r2, r0
	if(strsize > OS_PRINT_MAX_SIZE)
     86c:	005b      	lsls	r3, r3, #1
     86e:	429a      	cmp	r2, r3
     870:	d904      	bls.n	87c <os_print+0x3c>
	{
		// return error
		return;
	}
	usart_write_buffer_wait(&debug_mod, pprint_buffer, strsize);
}
     872:	b042      	add	sp, #264	; 0x108
     874:	bc30      	pop	{r4, r5}
     876:	bc08      	pop	{r3}
     878:	b003      	add	sp, #12
     87a:	4718      	bx	r3
	usart_write_buffer_wait(&debug_mod, pprint_buffer, strsize);
     87c:	a901      	add	r1, sp, #4
     87e:	4b05      	ldr	r3, [pc, #20]	; (894 <os_print+0x54>)
     880:	4805      	ldr	r0, [pc, #20]	; (898 <os_print+0x58>)
     882:	4798      	blx	r3
     884:	e7f5      	b.n	872 <os_print+0x32>
     886:	46c0      	nop			; (mov r8, r8)
     888:	00001eef 	.word	0x00001eef
     88c:	00001f3d 	.word	0x00001f3d
     890:	00001eff 	.word	0x00001eff
     894:	000004c1 	.word	0x000004c1
     898:	2000012c 	.word	0x2000012c

0000089c <debug_rx_cb>:
{
	usart_read_job(&debug_mod, &debug_rx_val);
}

void debug_rx_cb(struct usart_module* const mod)
{
     89c:	b570      	push	{r4, r5, r6, lr}
	os_print(&debug_mod, "%c", debug_rx_val);
     89e:	4d06      	ldr	r5, [pc, #24]	; (8b8 <debug_rx_cb+0x1c>)
     8a0:	4c06      	ldr	r4, [pc, #24]	; (8bc <debug_rx_cb+0x20>)
     8a2:	782a      	ldrb	r2, [r5, #0]
     8a4:	0020      	movs	r0, r4
     8a6:	b2d2      	uxtb	r2, r2
     8a8:	4905      	ldr	r1, [pc, #20]	; (8c0 <debug_rx_cb+0x24>)
     8aa:	4b06      	ldr	r3, [pc, #24]	; (8c4 <debug_rx_cb+0x28>)
     8ac:	4798      	blx	r3
	usart_read_job(&debug_mod, &debug_rx_val);
     8ae:	0029      	movs	r1, r5
     8b0:	0020      	movs	r0, r4
     8b2:	4b05      	ldr	r3, [pc, #20]	; (8c8 <debug_rx_cb+0x2c>)
     8b4:	4798      	blx	r3
}
     8b6:	bd70      	pop	{r4, r5, r6, pc}
     8b8:	20000084 	.word	0x20000084
     8bc:	2000012c 	.word	0x2000012c
     8c0:	00002740 	.word	0x00002740
     8c4:	00000841 	.word	0x00000841
     8c8:	000005e1 	.word	0x000005e1

000008cc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
     8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ce:	4657      	mov	r7, sl
     8d0:	4645      	mov	r5, r8
     8d2:	46de      	mov	lr, fp
     8d4:	464e      	mov	r6, r9
     8d6:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     8d8:	4ccd      	ldr	r4, [pc, #820]	; (c10 <USB_Handler+0x344>)
{
     8da:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     8dc:	6827      	ldr	r7, [r4, #0]
     8de:	683d      	ldr	r5, [r7, #0]
     8e0:	782b      	ldrb	r3, [r5, #0]
     8e2:	09db      	lsrs	r3, r3, #7
     8e4:	d000      	beq.n	8e8 <USB_Handler+0x1c>
     8e6:	e06c      	b.n	9c2 <USB_Handler+0xf6>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     8e8:	8c2e      	ldrh	r6, [r5, #32]
     8ea:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
     8ec:	2e00      	cmp	r6, #0
     8ee:	d135      	bne.n	95c <USB_Handler+0x90>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     8f0:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
     8f2:	22aa      	movs	r2, #170	; 0xaa
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     8f4:	b29b      	uxth	r3, r3
     8f6:	4698      	mov	r8, r3
				_usb_instances->device_enabled_callback_mask &
     8f8:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
     8fa:	0052      	lsls	r2, r2, #1
				_usb_instances->device_enabled_callback_mask &
     8fc:	005b      	lsls	r3, r3, #1
		flags_run = flags &
     8fe:	5afb      	ldrh	r3, [r7, r3]
     900:	5abe      	ldrh	r6, [r7, r2]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     902:	3a54      	subs	r2, #84	; 0x54
		flags_run = flags &
     904:	401e      	ands	r6, r3
     906:	4643      	mov	r3, r8
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     908:	4692      	mov	sl, r2
     90a:	4ac2      	ldr	r2, [pc, #776]	; (c14 <USB_Handler+0x348>)
		flags_run = flags &
     90c:	401e      	ands	r6, r3
     90e:	4691      	mov	r9, r2
     910:	0032      	movs	r2, r6
     912:	2304      	movs	r3, #4
     914:	4646      	mov	r6, r8
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     916:	2500      	movs	r5, #0
     918:	4fbf      	ldr	r7, [pc, #764]	; (c18 <USB_Handler+0x34c>)
     91a:	4690      	mov	r8, r2
     91c:	e001      	b.n	922 <USB_Handler+0x56>
     91e:	006b      	lsls	r3, r5, #1
     920:	5bdb      	ldrh	r3, [r3, r7]
			if (flags & _usb_device_irq_bits[i]) {
     922:	4233      	tst	r3, r6
     924:	d002      	beq.n	92c <USB_Handler+0x60>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     926:	6822      	ldr	r2, [r4, #0]
     928:	6812      	ldr	r2, [r2, #0]
     92a:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
     92c:	4642      	mov	r2, r8
     92e:	4213      	tst	r3, r2
     930:	d00a      	beq.n	948 <USB_Handler+0x7c>
     932:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     934:	2d06      	cmp	r5, #6
     936:	d100      	bne.n	93a <USB_Handler+0x6e>
     938:	e2f2      	b.n	f20 <USB_Handler+0x654>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     93a:	002b      	movs	r3, r5
     93c:	6822      	ldr	r2, [r4, #0]
     93e:	332e      	adds	r3, #46	; 0x2e
     940:	009b      	lsls	r3, r3, #2
     942:	589b      	ldr	r3, [r3, r2]
     944:	0010      	movs	r0, r2
     946:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     948:	3501      	adds	r5, #1
     94a:	2d07      	cmp	r5, #7
     94c:	d1e7      	bne.n	91e <USB_Handler+0x52>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
     94e:	b003      	add	sp, #12
     950:	bc3c      	pop	{r2, r3, r4, r5}
     952:	4690      	mov	r8, r2
     954:	4699      	mov	r9, r3
     956:	46a2      	mov	sl, r4
     958:	46ab      	mov	fp, r5
     95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
     95c:	2201      	movs	r2, #1
     95e:	003c      	movs	r4, r7
     960:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     962:	325f      	adds	r2, #95	; 0x5f
     964:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     966:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
     968:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     96a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     96c:	46b9      	mov	r9, r7
     96e:	46a8      	mov	r8, r5
     970:	3459      	adds	r4, #89	; 0x59
     972:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
     974:	0032      	movs	r2, r6
     976:	4661      	mov	r1, ip
     978:	411a      	asrs	r2, r3
     97a:	b2dd      	uxtb	r5, r3
     97c:	4211      	tst	r1, r2
     97e:	d01b      	beq.n	9b8 <USB_Handler+0xec>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     980:	001f      	movs	r7, r3
     982:	3708      	adds	r7, #8
     984:	017a      	lsls	r2, r7, #5
     986:	4442      	add	r2, r8
     988:	1dd1      	adds	r1, r2, #7
     98a:	79d2      	ldrb	r2, [r2, #7]
     98c:	9100      	str	r1, [sp, #0]
     98e:	7a21      	ldrb	r1, [r4, #8]
     990:	7820      	ldrb	r0, [r4, #0]
     992:	b2d2      	uxtb	r2, r2
     994:	4011      	ands	r1, r2
     996:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     998:	4658      	mov	r0, fp
     99a:	4210      	tst	r0, r2
     99c:	d000      	beq.n	9a0 <USB_Handler+0xd4>
     99e:	e1c0      	b.n	d22 <USB_Handler+0x456>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     9a0:	4650      	mov	r0, sl
     9a2:	4210      	tst	r0, r2
     9a4:	d000      	beq.n	9a8 <USB_Handler+0xdc>
     9a6:	e1dc      	b.n	d62 <USB_Handler+0x496>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     9a8:	2003      	movs	r0, #3
     9aa:	4210      	tst	r0, r2
     9ac:	d000      	beq.n	9b0 <USB_Handler+0xe4>
     9ae:	e1f1      	b.n	d94 <USB_Handler+0x4c8>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     9b0:	200c      	movs	r0, #12
     9b2:	4210      	tst	r0, r2
     9b4:	d000      	beq.n	9b8 <USB_Handler+0xec>
     9b6:	e211      	b.n	ddc <USB_Handler+0x510>
     9b8:	3301      	adds	r3, #1
     9ba:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     9bc:	2b08      	cmp	r3, #8
     9be:	d1d9      	bne.n	974 <USB_Handler+0xa8>
     9c0:	e7c5      	b.n	94e <USB_Handler+0x82>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     9c2:	8c2b      	ldrh	r3, [r5, #32]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d000      	beq.n	9ca <USB_Handler+0xfe>
     9c8:	e084      	b.n	ad4 <USB_Handler+0x208>
		if (flags & USB_HOST_INTFLAG_HSOF) {
     9ca:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     9cc:	8bae      	ldrh	r6, [r5, #28]
     9ce:	b2b6      	uxth	r6, r6
		if (flags & USB_HOST_INTFLAG_HSOF) {
     9d0:	4233      	tst	r3, r6
     9d2:	d01f      	beq.n	a14 <USB_Handler+0x148>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     9d4:	83ab      	strh	r3, [r5, #28]
     9d6:	4b91      	ldr	r3, [pc, #580]	; (c1c <USB_Handler+0x350>)
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
     9d8:	2210      	movs	r2, #16
     9da:	681b      	ldr	r3, [r3, #0]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
     9dc:	2501      	movs	r5, #1
     9de:	469c      	mov	ip, r3
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
     9e0:	4690      	mov	r8, r2
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
     9e2:	2301      	movs	r3, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
     9e4:	4660      	mov	r0, ip
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
     9e6:	002a      	movs	r2, r5
     9e8:	409a      	lsls	r2, r3
     9ea:	4210      	tst	r0, r2
     9ec:	d00a      	beq.n	a04 <USB_Handler+0x138>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
     9ee:	0019      	movs	r1, r3
     9f0:	683a      	ldr	r2, [r7, #0]
     9f2:	3108      	adds	r1, #8
     9f4:	0149      	lsls	r1, r1, #5
     9f6:	4694      	mov	ip, r2
     9f8:	5c8a      	ldrb	r2, [r1, r2]
     9fa:	0692      	lsls	r2, r2, #26
     9fc:	0f52      	lsrs	r2, r2, #29
     9fe:	2a03      	cmp	r2, #3
     a00:	d100      	bne.n	a04 <USB_Handler+0x138>
     a02:	e0f9      	b.n	bf8 <USB_Handler+0x32c>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
     a04:	3301      	adds	r3, #1
     a06:	2b08      	cmp	r3, #8
     a08:	d1ed      	bne.n	9e6 <USB_Handler+0x11a>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     a0a:	339d      	adds	r3, #157	; 0x9d
     a0c:	5cfb      	ldrb	r3, [r7, r3]
     a0e:	07db      	lsls	r3, r3, #31
     a10:	d500      	bpl.n	a14 <USB_Handler+0x148>
     a12:	e147      	b.n	ca4 <USB_Handler+0x3d8>
		if (flags & USB_HOST_INTFLAG_RST) {
     a14:	2308      	movs	r3, #8
     a16:	4233      	tst	r3, r6
     a18:	d00a      	beq.n	a30 <USB_Handler+0x164>
			host_pipe_job_busy_status = 0;
     a1a:	2100      	movs	r1, #0
     a1c:	4a7f      	ldr	r2, [pc, #508]	; (c1c <USB_Handler+0x350>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     a1e:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
     a20:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     a22:	6802      	ldr	r2, [r0, #0]
     a24:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     a26:	339d      	adds	r3, #157	; 0x9d
     a28:	5cc3      	ldrb	r3, [r0, r3]
     a2a:	079b      	lsls	r3, r3, #30
     a2c:	d500      	bpl.n	a30 <USB_Handler+0x164>
     a2e:	e136      	b.n	c9e <USB_Handler+0x3d2>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     a30:	2340      	movs	r3, #64	; 0x40
     a32:	4233      	tst	r3, r6
     a34:	d007      	beq.n	a46 <USB_Handler+0x17a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     a36:	6820      	ldr	r0, [r4, #0]
     a38:	6802      	ldr	r2, [r0, #0]
     a3a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     a3c:	3365      	adds	r3, #101	; 0x65
     a3e:	5cc3      	ldrb	r3, [r0, r3]
     a40:	06db      	lsls	r3, r3, #27
     a42:	d500      	bpl.n	a46 <USB_Handler+0x17a>
     a44:	e128      	b.n	c98 <USB_Handler+0x3cc>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     a46:	2320      	movs	r3, #32
     a48:	4233      	tst	r3, r6
     a4a:	d007      	beq.n	a5c <USB_Handler+0x190>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     a4c:	6820      	ldr	r0, [r4, #0]
     a4e:	6802      	ldr	r2, [r0, #0]
     a50:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     a52:	3385      	adds	r3, #133	; 0x85
     a54:	5cc3      	ldrb	r3, [r0, r3]
     a56:	071b      	lsls	r3, r3, #28
     a58:	d500      	bpl.n	a5c <USB_Handler+0x190>
     a5a:	e11a      	b.n	c92 <USB_Handler+0x3c6>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     a5c:	2310      	movs	r3, #16
     a5e:	4233      	tst	r3, r6
     a60:	d007      	beq.n	a72 <USB_Handler+0x1a6>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     a62:	6820      	ldr	r0, [r4, #0]
     a64:	6802      	ldr	r2, [r0, #0]
     a66:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     a68:	3395      	adds	r3, #149	; 0x95
     a6a:	5cc3      	ldrb	r3, [r0, r3]
     a6c:	075b      	lsls	r3, r3, #29
     a6e:	d500      	bpl.n	a72 <USB_Handler+0x1a6>
     a70:	e10c      	b.n	c8c <USB_Handler+0x3c0>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     a72:	2380      	movs	r3, #128	; 0x80
     a74:	4233      	tst	r3, r6
     a76:	d00a      	beq.n	a8e <USB_Handler+0x1c2>
			host_pipe_job_busy_status = 0;
     a78:	2100      	movs	r1, #0
     a7a:	4a68      	ldr	r2, [pc, #416]	; (c1c <USB_Handler+0x350>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     a7c:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
     a7e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     a80:	6802      	ldr	r2, [r0, #0]
     a82:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     a84:	3325      	adds	r3, #37	; 0x25
     a86:	5cc3      	ldrb	r3, [r0, r3]
     a88:	069b      	lsls	r3, r3, #26
     a8a:	d500      	bpl.n	a8e <USB_Handler+0x1c2>
     a8c:	e0fb      	b.n	c86 <USB_Handler+0x3ba>
		if (flags & USB_HOST_INTFLAG_DCONN) {
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	005b      	lsls	r3, r3, #1
     a92:	421e      	tst	r6, r3
     a94:	d00a      	beq.n	aac <USB_Handler+0x1e0>
			host_pipe_job_busy_status = 0;
     a96:	2100      	movs	r1, #0
     a98:	4a60      	ldr	r2, [pc, #384]	; (c1c <USB_Handler+0x350>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     a9a:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
     a9c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     a9e:	6802      	ldr	r2, [r0, #0]
     aa0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     aa2:	3b5b      	subs	r3, #91	; 0x5b
     aa4:	5cc3      	ldrb	r3, [r0, r3]
     aa6:	065b      	lsls	r3, r3, #25
     aa8:	d500      	bpl.n	aac <USB_Handler+0x1e0>
     aaa:	e0e9      	b.n	c80 <USB_Handler+0x3b4>
		if (flags & USB_HOST_INTFLAG_DDISC) {
     aac:	2380      	movs	r3, #128	; 0x80
     aae:	009b      	lsls	r3, r3, #2
     ab0:	421e      	tst	r6, r3
     ab2:	d100      	bne.n	ab6 <USB_Handler+0x1ea>
     ab4:	e74b      	b.n	94e <USB_Handler+0x82>
			host_pipe_job_busy_status = 0;
     ab6:	2100      	movs	r1, #0
     ab8:	4a58      	ldr	r2, [pc, #352]	; (c1c <USB_Handler+0x350>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     aba:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
     abc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     abe:	6802      	ldr	r2, [r0, #0]
     ac0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     ac2:	3b5c      	subs	r3, #92	; 0x5c
     ac4:	3bff      	subs	r3, #255	; 0xff
     ac6:	5cc3      	ldrb	r3, [r0, r3]
     ac8:	2b7f      	cmp	r3, #127	; 0x7f
     aca:	d800      	bhi.n	ace <USB_Handler+0x202>
     acc:	e73f      	b.n	94e <USB_Handler+0x82>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     ace:	6a03      	ldr	r3, [r0, #32]
     ad0:	4798      	blx	r3
     ad2:	e73c      	b.n	94e <USB_Handler+0x82>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     ad4:	8c28      	ldrh	r0, [r5, #32]
     ad6:	4b52      	ldr	r3, [pc, #328]	; (c20 <USB_Handler+0x354>)
     ad8:	b280      	uxth	r0, r0
     ada:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     adc:	2308      	movs	r3, #8
     ade:	4698      	mov	r8, r3
     ae0:	4480      	add	r8, r0
     ae2:	4643      	mov	r3, r8
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     ae4:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     ae6:	015b      	lsls	r3, r3, #5
     ae8:	18ed      	adds	r5, r5, r3
     aea:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     aec:	0006      	movs	r6, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     aee:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     af0:	422a      	tst	r2, r5
     af2:	d014      	beq.n	b1e <USB_Handler+0x252>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     af4:	4949      	ldr	r1, [pc, #292]	; (c1c <USB_Handler+0x350>)
     af6:	468c      	mov	ip, r1
     af8:	2101      	movs	r1, #1
     afa:	4689      	mov	r9, r1
     afc:	4081      	lsls	r1, r0
     afe:	4660      	mov	r0, ip
     b00:	6800      	ldr	r0, [r0, #0]
     b02:	4388      	bics	r0, r1
     b04:	0001      	movs	r1, r0
     b06:	4660      	mov	r0, ip
     b08:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     b0a:	6839      	ldr	r1, [r7, #0]
     b0c:	18c9      	adds	r1, r1, r3
     b0e:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     b10:	4649      	mov	r1, r9
     b12:	19ba      	adds	r2, r7, r6
     b14:	32ae      	adds	r2, #174	; 0xae
     b16:	7812      	ldrb	r2, [r2, #0]
     b18:	4211      	tst	r1, r2
     b1a:	d000      	beq.n	b1e <USB_Handler+0x252>
     b1c:	e086      	b.n	c2c <USB_Handler+0x360>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     b1e:	2304      	movs	r3, #4
     b20:	422b      	tst	r3, r5
     b22:	d020      	beq.n	b66 <USB_Handler+0x29a>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
     b24:	6823      	ldr	r3, [r4, #0]
     b26:	681f      	ldr	r7, [r3, #0]
     b28:	469c      	mov	ip, r3
     b2a:	4643      	mov	r3, r8
     b2c:	015b      	lsls	r3, r3, #5
     b2e:	4699      	mov	r9, r3
     b30:	5ddb      	ldrb	r3, [r3, r7]
     b32:	069b      	lsls	r3, r3, #26
     b34:	0f5b      	lsrs	r3, r3, #29
     b36:	9300      	str	r3, [sp, #0]
     b38:	2b02      	cmp	r3, #2
     b3a:	d100      	bne.n	b3e <USB_Handler+0x272>
     b3c:	e0d3      	b.n	ce6 <USB_Handler+0x41a>
     b3e:	4839      	ldr	r0, [pc, #228]	; (c24 <USB_Handler+0x358>)
     b40:	0172      	lsls	r2, r6, #5
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
     b42:	4643      	mov	r3, r8
     b44:	0159      	lsls	r1, r3, #5
     b46:	5dcb      	ldrb	r3, [r1, r7]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     b48:	1882      	adds	r2, r0, r2
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
     b4a:	069b      	lsls	r3, r3, #26
     b4c:	0f5b      	lsrs	r3, r3, #29
     b4e:	2b03      	cmp	r3, #3
     b50:	d100      	bne.n	b54 <USB_Handler+0x288>
     b52:	e0d3      	b.n	cfc <USB_Handler+0x430>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     b54:	2300      	movs	r3, #0
     b56:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     b58:	4663      	mov	r3, ip
     b5a:	4642      	mov	r2, r8
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	0152      	lsls	r2, r2, #5
     b60:	189b      	adds	r3, r3, r2
     b62:	2204      	movs	r2, #4
     b64:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
     b66:	2308      	movs	r3, #8
     b68:	422b      	tst	r3, r5
     b6a:	d012      	beq.n	b92 <USB_Handler+0x2c6>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     b6c:	2201      	movs	r2, #1
     b6e:	40b2      	lsls	r2, r6
     b70:	492a      	ldr	r1, [pc, #168]	; (c1c <USB_Handler+0x350>)
     b72:	6808      	ldr	r0, [r1, #0]
     b74:	4390      	bics	r0, r2
     b76:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     b78:	6820      	ldr	r0, [r4, #0]
     b7a:	4642      	mov	r2, r8
     b7c:	6801      	ldr	r1, [r0, #0]
     b7e:	0152      	lsls	r2, r2, #5
     b80:	468c      	mov	ip, r1
     b82:	4462      	add	r2, ip
     b84:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     b86:	1983      	adds	r3, r0, r6
     b88:	33ae      	adds	r3, #174	; 0xae
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	079b      	lsls	r3, r3, #30
     b8e:	d500      	bpl.n	b92 <USB_Handler+0x2c6>
     b90:	e09b      	b.n	cca <USB_Handler+0x3fe>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     b92:	2310      	movs	r3, #16
     b94:	422b      	tst	r3, r5
     b96:	d011      	beq.n	bbc <USB_Handler+0x2f0>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     b98:	2201      	movs	r2, #1
     b9a:	40b2      	lsls	r2, r6
     b9c:	491f      	ldr	r1, [pc, #124]	; (c1c <USB_Handler+0x350>)
     b9e:	6808      	ldr	r0, [r1, #0]
     ba0:	4390      	bics	r0, r2
     ba2:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     ba4:	6820      	ldr	r0, [r4, #0]
     ba6:	4642      	mov	r2, r8
     ba8:	6801      	ldr	r1, [r0, #0]
     baa:	0152      	lsls	r2, r2, #5
     bac:	468c      	mov	ip, r1
     bae:	4462      	add	r2, ip
     bb0:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     bb2:	1983      	adds	r3, r0, r6
     bb4:	33ae      	adds	r3, #174	; 0xae
     bb6:	781b      	ldrb	r3, [r3, #0]
     bb8:	075b      	lsls	r3, r3, #29
     bba:	d477      	bmi.n	cac <USB_Handler+0x3e0>
		if (flags & USB_HOST_PINTFLAG_STALL) {
     bbc:	2220      	movs	r2, #32
     bbe:	422a      	tst	r2, r5
     bc0:	d100      	bne.n	bc4 <USB_Handler+0x2f8>
     bc2:	e6c4      	b.n	94e <USB_Handler+0x82>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     bc4:	2301      	movs	r3, #1
     bc6:	40b3      	lsls	r3, r6
     bc8:	4914      	ldr	r1, [pc, #80]	; (c1c <USB_Handler+0x350>)
     bca:	6808      	ldr	r0, [r1, #0]
     bcc:	4398      	bics	r0, r3
     bce:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     bd0:	6820      	ldr	r0, [r4, #0]
     bd2:	4643      	mov	r3, r8
     bd4:	6801      	ldr	r1, [r0, #0]
     bd6:	015b      	lsls	r3, r3, #5
     bd8:	468c      	mov	ip, r1
     bda:	4463      	add	r3, ip
     bdc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     bde:	1983      	adds	r3, r0, r6
     be0:	33ae      	adds	r3, #174	; 0xae
     be2:	781b      	ldrb	r3, [r3, #0]
     be4:	071b      	lsls	r3, r3, #28
     be6:	d400      	bmi.n	bea <USB_Handler+0x31e>
     be8:	e6b1      	b.n	94e <USB_Handler+0x82>
				pipe_callback_para.pipe_num = pipe_int;
     bea:	490f      	ldr	r1, [pc, #60]	; (c28 <USB_Handler+0x35c>)
     bec:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     bee:	0136      	lsls	r6, r6, #4
     bf0:	1986      	adds	r6, r0, r6
     bf2:	6b33      	ldr	r3, [r6, #48]	; 0x30
     bf4:	4798      	blx	r3
     bf6:	e6aa      	b.n	94e <USB_Handler+0x82>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
     bf8:	4662      	mov	r2, ip
     bfa:	5c8a      	ldrb	r2, [r1, r2]
     bfc:	0792      	lsls	r2, r2, #30
     bfe:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
     c00:	2a01      	cmp	r2, #1
     c02:	d000      	beq.n	c06 <USB_Handler+0x33a>
     c04:	e6fe      	b.n	a04 <USB_Handler+0x138>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
     c06:	4642      	mov	r2, r8
     c08:	4461      	add	r1, ip
     c0a:	710a      	strb	r2, [r1, #4]
     c0c:	e6fa      	b.n	a04 <USB_Handler+0x138>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	20000088 	.word	0x20000088
     c14:	2000008c 	.word	0x2000008c
     c18:	00002744 	.word	0x00002744
     c1c:	20000098 	.word	0x20000098
     c20:	00001e01 	.word	0x00001e01
     c24:	20000194 	.word	0x20000194
     c28:	2000009c 	.word	0x2000009c
				pipe_callback_para.pipe_num = pipe_int;
     c2c:	49c0      	ldr	r1, [pc, #768]	; (f30 <USB_Handler+0x664>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c2e:	48c1      	ldr	r0, [pc, #772]	; (f34 <USB_Handler+0x668>)
				pipe_callback_para.pipe_num = pipe_int;
     c30:	700e      	strb	r6, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     c32:	683a      	ldr	r2, [r7, #0]
     c34:	5c9b      	ldrb	r3, [r3, r2]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c36:	0172      	lsls	r2, r6, #5
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     c38:	079b      	lsls	r3, r3, #30
     c3a:	0f9b      	lsrs	r3, r3, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c3c:	1882      	adds	r2, r0, r2
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     c3e:	2b01      	cmp	r3, #1
     c40:	d100      	bne.n	c44 <USB_Handler+0x378>
     c42:	e0fe      	b.n	e42 <USB_Handler+0x576>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     c44:	6853      	ldr	r3, [r2, #4]
     c46:	011b      	lsls	r3, r3, #4
     c48:	0c9b      	lsrs	r3, r3, #18
     c4a:	804b      	strh	r3, [r1, #2]
     c4c:	b298      	uxth	r0, r3
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c4e:	6853      	ldr	r3, [r2, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     c50:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c52:	049b      	lsls	r3, r3, #18
     c54:	0c9b      	lsrs	r3, r3, #18
     c56:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     c58:	6853      	ldr	r3, [r2, #4]
     c5a:	4699      	mov	r9, r3
     c5c:	4648      	mov	r0, r9
     c5e:	4bb6      	ldr	r3, [pc, #728]	; (f38 <USB_Handler+0x66c>)
     c60:	4018      	ands	r0, r3
					if (0 == pipe_callback_para.transfered_size) {
     c62:	4653      	mov	r3, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     c64:	6050      	str	r0, [r2, #4]
					if (0 == pipe_callback_para.transfered_size) {
     c66:	2b00      	cmp	r3, #0
     c68:	d103      	bne.n	c72 <USB_Handler+0x3a6>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c6a:	6853      	ldr	r3, [r2, #4]
     c6c:	049b      	lsls	r3, r3, #18
     c6e:	0c9b      	lsrs	r3, r3, #18
     c70:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     c72:	1cb3      	adds	r3, r6, #2
     c74:	011b      	lsls	r3, r3, #4
     c76:	18fb      	adds	r3, r7, r3
     c78:	685b      	ldr	r3, [r3, #4]
     c7a:	0038      	movs	r0, r7
     c7c:	4798      	blx	r3
     c7e:	e74e      	b.n	b1e <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     c80:	69c3      	ldr	r3, [r0, #28]
     c82:	4798      	blx	r3
     c84:	e712      	b.n	aac <USB_Handler+0x1e0>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     c86:	6983      	ldr	r3, [r0, #24]
     c88:	4798      	blx	r3
     c8a:	e700      	b.n	a8e <USB_Handler+0x1c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     c8c:	68c3      	ldr	r3, [r0, #12]
     c8e:	4798      	blx	r3
     c90:	e6ef      	b.n	a72 <USB_Handler+0x1a6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     c92:	6903      	ldr	r3, [r0, #16]
     c94:	4798      	blx	r3
     c96:	e6e1      	b.n	a5c <USB_Handler+0x190>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     c98:	6943      	ldr	r3, [r0, #20]
     c9a:	4798      	blx	r3
     c9c:	e6d3      	b.n	a46 <USB_Handler+0x17a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     c9e:	6883      	ldr	r3, [r0, #8]
     ca0:	4798      	blx	r3
     ca2:	e6c5      	b.n	a30 <USB_Handler+0x164>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     ca4:	687b      	ldr	r3, [r7, #4]
     ca6:	0038      	movs	r0, r7
     ca8:	4798      	blx	r3
     caa:	e6b3      	b.n	a14 <USB_Handler+0x148>
				pipe_callback_para.pipe_num = pipe_int;
     cac:	4aa0      	ldr	r2, [pc, #640]	; (f30 <USB_Handler+0x664>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     cae:	4ba1      	ldr	r3, [pc, #644]	; (f34 <USB_Handler+0x668>)
     cb0:	0171      	lsls	r1, r6, #5
				pipe_callback_para.pipe_num = pipe_int;
     cb2:	7016      	strb	r6, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     cb4:	185b      	adds	r3, r3, r1
     cb6:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     cb8:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     cba:	011b      	lsls	r3, r3, #4
     cbc:	0c9b      	lsrs	r3, r3, #18
     cbe:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     cc0:	0133      	lsls	r3, r6, #4
     cc2:	18c3      	adds	r3, r0, r3
     cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     cc6:	4798      	blx	r3
     cc8:	e778      	b.n	bbc <USB_Handler+0x2f0>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     cca:	4b9a      	ldr	r3, [pc, #616]	; (f34 <USB_Handler+0x668>)
     ccc:	0172      	lsls	r2, r6, #5
     cce:	189b      	adds	r3, r3, r2
     cd0:	89da      	ldrh	r2, [r3, #14]
     cd2:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
     cd4:	4996      	ldr	r1, [pc, #600]	; (f30 <USB_Handler+0x664>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     cd6:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
     cd8:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     cda:	0133      	lsls	r3, r6, #4
     cdc:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
     cde:	700e      	strb	r6, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ce2:	4798      	blx	r3
     ce4:	e755      	b.n	b92 <USB_Handler+0x2c6>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
     ce6:	464a      	mov	r2, r9
     ce8:	5dd2      	ldrb	r2, [r2, r7]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
     cea:	4892      	ldr	r0, [pc, #584]	; (f34 <USB_Handler+0x668>)
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
     cec:	0792      	lsls	r2, r2, #30
     cee:	0f92      	lsrs	r2, r2, #30
     cf0:	4692      	mov	sl, r2
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
     cf2:	2a01      	cmp	r2, #1
     cf4:	d100      	bne.n	cf8 <USB_Handler+0x42c>
     cf6:	e0e8      	b.n	eca <USB_Handler+0x5fe>
     cf8:	0172      	lsls	r2, r6, #5
     cfa:	e722      	b.n	b42 <USB_Handler+0x276>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
     cfc:	5dcb      	ldrb	r3, [r1, r7]
     cfe:	079b      	lsls	r3, r3, #30
     d00:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
     d02:	2b01      	cmp	r3, #1
     d04:	d000      	beq.n	d08 <USB_Handler+0x43c>
     d06:	e725      	b.n	b54 <USB_Handler+0x288>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     d08:	2300      	movs	r3, #0
     d0a:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     d0c:	4663      	mov	r3, ip
     d0e:	2204      	movs	r2, #4
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	185b      	adds	r3, r3, r1
     d14:	71da      	strb	r2, [r3, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
     d16:	4663      	mov	r3, ip
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	1859      	adds	r1, r3, r1
     d1c:	2310      	movs	r3, #16
     d1e:	714b      	strb	r3, [r1, #5]
     d20:	e721      	b.n	b66 <USB_Handler+0x29a>
     d22:	002a      	movs	r2, r5
     d24:	4645      	mov	r5, r8
     d26:	4690      	mov	r8, r2
     d28:	015a      	lsls	r2, r3, #5
     d2a:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     d2c:	2208      	movs	r2, #8
     d2e:	2040      	movs	r0, #64	; 0x40
     d30:	32ff      	adds	r2, #255	; 0xff
     d32:	5cac      	ldrb	r4, [r5, r2]
     d34:	464f      	mov	r7, r9
     d36:	4220      	tst	r0, r4
     d38:	d100      	bne.n	d3c <USB_Handler+0x470>
     d3a:	e08f      	b.n	e5c <USB_Handler+0x590>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     d3c:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     d3e:	4640      	mov	r0, r8
     d40:	3a88      	subs	r2, #136	; 0x88
     d42:	3aff      	subs	r2, #255	; 0xff
     d44:	4302      	orrs	r2, r0
     d46:	487d      	ldr	r0, [pc, #500]	; (f3c <USB_Handler+0x670>)
     d48:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     d4a:	2260      	movs	r2, #96	; 0x60
     d4c:	420a      	tst	r2, r1
     d4e:	d100      	bne.n	d52 <USB_Handler+0x486>
     d50:	e5fd      	b.n	94e <USB_Handler+0x82>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     d52:	011b      	lsls	r3, r3, #4
     d54:	18fb      	adds	r3, r7, r3
     d56:	33e0      	adds	r3, #224	; 0xe0
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	4978      	ldr	r1, [pc, #480]	; (f3c <USB_Handler+0x670>)
     d5c:	0038      	movs	r0, r7
     d5e:	4798      	blx	r3
     d60:	e5f5      	b.n	94e <USB_Handler+0x82>
     d62:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     d64:	9a00      	ldr	r2, [sp, #0]
     d66:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     d68:	18fa      	adds	r2, r7, r3
     d6a:	3261      	adds	r2, #97	; 0x61
     d6c:	32ff      	adds	r2, #255	; 0xff
     d6e:	7812      	ldrb	r2, [r2, #0]
     d70:	4210      	tst	r0, r2
     d72:	d100      	bne.n	d76 <USB_Handler+0x4aa>
     d74:	e5eb      	b.n	94e <USB_Handler+0x82>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     d76:	4a6f      	ldr	r2, [pc, #444]	; (f34 <USB_Handler+0x668>)
     d78:	0159      	lsls	r1, r3, #5
     d7a:	1852      	adds	r2, r2, r1
     d7c:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     d7e:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     d80:	496e      	ldr	r1, [pc, #440]	; (f3c <USB_Handler+0x670>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     d82:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     d84:	0492      	lsls	r2, r2, #18
     d86:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     d88:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     d8a:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	4648      	mov	r0, r9
     d90:	4798      	blx	r3
     d92:	e5dc      	b.n	94e <USB_Handler+0x82>
     d94:	002a      	movs	r2, r5
     d96:	4645      	mov	r5, r8
     d98:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     d9a:	2208      	movs	r2, #8
     d9c:	2402      	movs	r4, #2
     d9e:	0158      	lsls	r0, r3, #5
     da0:	182d      	adds	r5, r5, r0
     da2:	32ff      	adds	r2, #255	; 0xff
     da4:	5cae      	ldrb	r6, [r5, r2]
     da6:	464f      	mov	r7, r9
     da8:	4234      	tst	r4, r6
     daa:	d061      	beq.n	e70 <USB_Handler+0x5a4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     dac:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     dae:	4645      	mov	r5, r8
     db0:	3a88      	subs	r2, #136	; 0x88
     db2:	4c62      	ldr	r4, [pc, #392]	; (f3c <USB_Handler+0x670>)
     db4:	3aff      	subs	r2, #255	; 0xff
     db6:	432a      	orrs	r2, r5
     db8:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     dba:	4a5e      	ldr	r2, [pc, #376]	; (f34 <USB_Handler+0x668>)
     dbc:	1810      	adds	r0, r2, r0
     dbe:	6942      	ldr	r2, [r0, #20]
     dc0:	0492      	lsls	r2, r2, #18
     dc2:	0c92      	lsrs	r2, r2, #18
     dc4:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     dc6:	078a      	lsls	r2, r1, #30
     dc8:	d100      	bne.n	dcc <USB_Handler+0x500>
     dca:	e5c0      	b.n	94e <USB_Handler+0x82>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
     dcc:	330d      	adds	r3, #13
     dce:	011b      	lsls	r3, r3, #4
     dd0:	18fb      	adds	r3, r7, r3
     dd2:	685b      	ldr	r3, [r3, #4]
     dd4:	4959      	ldr	r1, [pc, #356]	; (f3c <USB_Handler+0x670>)
     dd6:	0038      	movs	r0, r7
     dd8:	4798      	blx	r3
     dda:	e5b8      	b.n	94e <USB_Handler+0x82>
     ddc:	003a      	movs	r2, r7
     dde:	0028      	movs	r0, r5
     de0:	464f      	mov	r7, r9
     de2:	4645      	mov	r5, r8
     de4:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
     de6:	2208      	movs	r2, #8
     de8:	2408      	movs	r4, #8
     dea:	4680      	mov	r8, r0
     dec:	0158      	lsls	r0, r3, #5
     dee:	182d      	adds	r5, r5, r0
     df0:	32ff      	adds	r2, #255	; 0xff
     df2:	5cae      	ldrb	r6, [r5, r2]
     df4:	4234      	tst	r4, r6
     df6:	d04e      	beq.n	e96 <USB_Handler+0x5ca>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
     df8:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     dfa:	4a4e      	ldr	r2, [pc, #312]	; (f34 <USB_Handler+0x668>)
     dfc:	1810      	adds	r0, r2, r0
     dfe:	2202      	movs	r2, #2
     e00:	7e84      	ldrb	r4, [r0, #26]
     e02:	4222      	tst	r2, r4
     e04:	d002      	beq.n	e0c <USB_Handler+0x540>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     e06:	7e84      	ldrb	r4, [r0, #26]
     e08:	4394      	bics	r4, r2
     e0a:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     e0c:	2280      	movs	r2, #128	; 0x80
     e0e:	4640      	mov	r0, r8
     e10:	4252      	negs	r2, r2
     e12:	4302      	orrs	r2, r0
     e14:	4849      	ldr	r0, [pc, #292]	; (f3c <USB_Handler+0x670>)
     e16:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     e18:	6838      	ldr	r0, [r7, #0]
     e1a:	464a      	mov	r2, r9
     e1c:	4684      	mov	ip, r0
     e1e:	0152      	lsls	r2, r2, #5
     e20:	4462      	add	r2, ip
     e22:	79d2      	ldrb	r2, [r2, #7]
     e24:	0792      	lsls	r2, r2, #30
     e26:	d500      	bpl.n	e2a <USB_Handler+0x55e>
     e28:	e591      	b.n	94e <USB_Handler+0x82>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     e2a:	220c      	movs	r2, #12
     e2c:	420a      	tst	r2, r1
     e2e:	d100      	bne.n	e32 <USB_Handler+0x566>
     e30:	e58d      	b.n	94e <USB_Handler+0x82>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     e32:	011b      	lsls	r3, r3, #4
     e34:	18fb      	adds	r3, r7, r3
     e36:	33d8      	adds	r3, #216	; 0xd8
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	4940      	ldr	r1, [pc, #256]	; (f3c <USB_Handler+0x670>)
     e3c:	0038      	movs	r0, r7
     e3e:	4798      	blx	r3
     e40:	e585      	b.n	94e <USB_Handler+0x82>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     e42:	6853      	ldr	r3, [r2, #4]
     e44:	049b      	lsls	r3, r3, #18
     e46:	0c9b      	lsrs	r3, r3, #18
     e48:	804b      	strh	r3, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     e4a:	6853      	ldr	r3, [r2, #4]
     e4c:	011b      	lsls	r3, r3, #4
     e4e:	0c9b      	lsrs	r3, r3, #18
     e50:	808b      	strh	r3, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     e52:	6853      	ldr	r3, [r2, #4]
     e54:	0b9b      	lsrs	r3, r3, #14
     e56:	039b      	lsls	r3, r3, #14
     e58:	6053      	str	r3, [r2, #4]
     e5a:	e70a      	b.n	c72 <USB_Handler+0x3a6>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     e5c:	2020      	movs	r0, #32
     e5e:	5cac      	ldrb	r4, [r5, r2]
     e60:	4220      	tst	r0, r4
     e62:	d100      	bne.n	e66 <USB_Handler+0x59a>
     e64:	e771      	b.n	d4a <USB_Handler+0x47e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     e66:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     e68:	4640      	mov	r0, r8
     e6a:	4a34      	ldr	r2, [pc, #208]	; (f3c <USB_Handler+0x670>)
     e6c:	7190      	strb	r0, [r2, #6]
     e6e:	e76c      	b.n	d4a <USB_Handler+0x47e>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     e70:	5cac      	ldrb	r4, [r5, r2]
     e72:	07e4      	lsls	r4, r4, #31
     e74:	d5a7      	bpl.n	dc6 <USB_Handler+0x4fa>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     e76:	4664      	mov	r4, ip
     e78:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     e7a:	4642      	mov	r2, r8
     e7c:	4c2f      	ldr	r4, [pc, #188]	; (f3c <USB_Handler+0x670>)
     e7e:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     e80:	4a2c      	ldr	r2, [pc, #176]	; (f34 <USB_Handler+0x668>)
     e82:	1810      	adds	r0, r2, r0
     e84:	6842      	ldr	r2, [r0, #4]
     e86:	0492      	lsls	r2, r2, #18
     e88:	0c92      	lsrs	r2, r2, #18
     e8a:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
     e8c:	6842      	ldr	r2, [r0, #4]
     e8e:	0112      	lsls	r2, r2, #4
     e90:	0c92      	lsrs	r2, r2, #18
     e92:	80a2      	strh	r2, [r4, #4]
     e94:	e797      	b.n	dc6 <USB_Handler+0x4fa>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
     e96:	2404      	movs	r4, #4
     e98:	5cae      	ldrb	r6, [r5, r2]
     e9a:	4234      	tst	r4, r6
     e9c:	d0c5      	beq.n	e2a <USB_Handler+0x55e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
     e9e:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     ea0:	4a24      	ldr	r2, [pc, #144]	; (f34 <USB_Handler+0x668>)
     ea2:	3c02      	subs	r4, #2
     ea4:	1810      	adds	r0, r2, r0
     ea6:	7a82      	ldrb	r2, [r0, #10]
     ea8:	4214      	tst	r4, r2
     eaa:	d002      	beq.n	eb2 <USB_Handler+0x5e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     eac:	7a82      	ldrb	r2, [r0, #10]
     eae:	43a2      	bics	r2, r4
     eb0:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     eb2:	4640      	mov	r0, r8
     eb4:	4a21      	ldr	r2, [pc, #132]	; (f3c <USB_Handler+0x670>)
     eb6:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     eb8:	6838      	ldr	r0, [r7, #0]
     eba:	464a      	mov	r2, r9
     ebc:	4684      	mov	ip, r0
     ebe:	0152      	lsls	r2, r2, #5
     ec0:	4462      	add	r2, ip
     ec2:	79d2      	ldrb	r2, [r2, #7]
     ec4:	07d2      	lsls	r2, r2, #31
     ec6:	d5b0      	bpl.n	e2a <USB_Handler+0x55e>
     ec8:	e541      	b.n	94e <USB_Handler+0x82>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
     eca:	0172      	lsls	r2, r6, #5
     ecc:	1881      	adds	r1, r0, r2
     ece:	000b      	movs	r3, r1
     ed0:	2108      	movs	r1, #8
     ed2:	469b      	mov	fp, r3
     ed4:	9301      	str	r3, [sp, #4]
     ed6:	4459      	add	r1, fp
     ed8:	7889      	ldrb	r1, [r1, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
     eda:	07c9      	lsls	r1, r1, #31
     edc:	d400      	bmi.n	ee0 <USB_Handler+0x614>
     ede:	e630      	b.n	b42 <USB_Handler+0x276>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
     ee0:	4652      	mov	r2, sl
     ee2:	40b2      	lsls	r2, r6
     ee4:	4816      	ldr	r0, [pc, #88]	; (f40 <USB_Handler+0x674>)
     ee6:	6801      	ldr	r1, [r0, #0]
     ee8:	4391      	bics	r1, r2
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     eea:	2200      	movs	r2, #0
     eec:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     eee:	4663      	mov	r3, ip
				host_pipe_job_busy_status &= ~(1 << pipe_int);
     ef0:	6001      	str	r1, [r0, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	444b      	add	r3, r9
     ef6:	001a      	movs	r2, r3
     ef8:	2304      	movs	r3, #4
     efa:	71d3      	strb	r3, [r2, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     efc:	4663      	mov	r3, ip
     efe:	199a      	adds	r2, r3, r6
     f00:	32ae      	adds	r2, #174	; 0xae
     f02:	7812      	ldrb	r2, [r2, #0]
     f04:	9b00      	ldr	r3, [sp, #0]
     f06:	4213      	tst	r3, r2
     f08:	d100      	bne.n	f0c <USB_Handler+0x640>
     f0a:	e62c      	b.n	b66 <USB_Handler+0x29a>
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
     f0c:	2310      	movs	r3, #16
					pipe_callback_para.pipe_num = pipe_int;
     f0e:	4908      	ldr	r1, [pc, #32]	; (f30 <USB_Handler+0x664>)
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     f10:	4660      	mov	r0, ip
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
     f12:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     f14:	0133      	lsls	r3, r6, #4
     f16:	4463      	add	r3, ip
					pipe_callback_para.pipe_num = pipe_int;
     f18:	700e      	strb	r6, [r1, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f1c:	4798      	blx	r3
     f1e:	e622      	b.n	b66 <USB_Handler+0x29a>
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     f20:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     f22:	4b04      	ldr	r3, [pc, #16]	; (f34 <USB_Handler+0x668>)
					device_callback_lpm_wakeup_enable =
     f24:	4907      	ldr	r1, [pc, #28]	; (f44 <USB_Handler+0x678>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     f26:	891b      	ldrh	r3, [r3, #8]
     f28:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     f2a:	4013      	ands	r3, r2
     f2c:	600b      	str	r3, [r1, #0]
     f2e:	e504      	b.n	93a <USB_Handler+0x6e>
     f30:	2000009c 	.word	0x2000009c
     f34:	20000194 	.word	0x20000194
     f38:	f0003fff 	.word	0xf0003fff
     f3c:	20000090 	.word	0x20000090
     f40:	20000098 	.word	0x20000098
     f44:	2000008c 	.word	0x2000008c

00000f48 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     f48:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     f4a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f4c:	2340      	movs	r3, #64	; 0x40
     f4e:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     f50:	4281      	cmp	r1, r0
     f52:	d202      	bcs.n	f5a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     f54:	0018      	movs	r0, r3
     f56:	bd10      	pop	{r4, pc}
		baud_calculated++;
     f58:	001c      	movs	r4, r3
     f5a:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
     f5c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     f5e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     f60:	4288      	cmp	r0, r1
     f62:	d9f9      	bls.n	f58 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f64:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     f66:	2cff      	cmp	r4, #255	; 0xff
     f68:	d8f4      	bhi.n	f54 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     f6a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     f6c:	2300      	movs	r3, #0
     f6e:	e7f1      	b.n	f54 <_sercom_get_sync_baud_val+0xc>

00000f70 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	4657      	mov	r7, sl
     f74:	46de      	mov	lr, fp
     f76:	464e      	mov	r6, r9
     f78:	4645      	mov	r5, r8
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     f7a:	0004      	movs	r4, r0
{
     f7c:	468a      	mov	sl, r1
     f7e:	b5e0      	push	{r5, r6, r7, lr}
     f80:	b087      	sub	sp, #28
     f82:	9203      	str	r2, [sp, #12]
     f84:	aa10      	add	r2, sp, #64	; 0x40
     f86:	7811      	ldrb	r1, [r2, #0]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f88:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     f8a:	434c      	muls	r4, r1
     f8c:	4554      	cmp	r4, sl
     f8e:	d907      	bls.n	fa0 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f90:	0010      	movs	r0, r2
     f92:	b007      	add	sp, #28
     f94:	bc3c      	pop	{r2, r3, r4, r5}
     f96:	4690      	mov	r8, r2
     f98:	4699      	mov	r9, r3
     f9a:	46a2      	mov	sl, r4
     f9c:	46ab      	mov	fp, r5
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     fa0:	2b00      	cmp	r3, #0
     fa2:	d13e      	bne.n	1022 <_sercom_get_async_baud_val+0xb2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     fa4:	0002      	movs	r2, r0
     fa6:	4c61      	ldr	r4, [pc, #388]	; (112c <_sercom_get_async_baud_val+0x1bc>)
     fa8:	0008      	movs	r0, r1
     faa:	2100      	movs	r1, #0
     fac:	47a0      	blx	r4
	uint64_t q = 0, r = 0, bit_shift;
     fae:	2300      	movs	r3, #0
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     fb0:	4683      	mov	fp, r0
		bit_shift = (uint64_t)1 << i;
     fb2:	2001      	movs	r0, #1
		ratio = long_division(temp1, peripheral_clock);
     fb4:	4656      	mov	r6, sl
	uint64_t q = 0, r = 0, bit_shift;
     fb6:	4699      	mov	r9, r3
     fb8:	469a      	mov	sl, r3
		ratio = long_division(temp1, peripheral_clock);
     fba:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     fbc:	2200      	movs	r2, #0
     fbe:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     fc0:	213f      	movs	r1, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     fc2:	4684      	mov	ip, r0
     fc4:	e023      	b.n	100e <_sercom_get_async_baud_val+0x9e>
     fc6:	4664      	mov	r4, ip
     fc8:	4084      	lsls	r4, r0
     fca:	0020      	movs	r0, r4
     fcc:	4664      	mov	r4, ip
		r = r << 1;
     fce:	1892      	adds	r2, r2, r2
     fd0:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
     fd2:	408c      	lsls	r4, r1
     fd4:	46a0      	mov	r8, r4
		r = r << 1;
     fd6:	001c      	movs	r4, r3
     fd8:	0013      	movs	r3, r2
     fda:	9300      	str	r3, [sp, #0]
     fdc:	9401      	str	r4, [sp, #4]
     fde:	0023      	movs	r3, r4
		if (n & bit_shift) {
     fe0:	465c      	mov	r4, fp
     fe2:	4204      	tst	r4, r0
     fe4:	d003      	beq.n	fee <_sercom_get_async_baud_val+0x7e>
			r |= 0x01;
     fe6:	4664      	mov	r4, ip
     fe8:	4314      	orrs	r4, r2
     fea:	0022      	movs	r2, r4
     fec:	9b01      	ldr	r3, [sp, #4]
		if (r >= d) {
     fee:	429f      	cmp	r7, r3
     ff0:	d80b      	bhi.n	100a <_sercom_get_async_baud_val+0x9a>
     ff2:	d101      	bne.n	ff8 <_sercom_get_async_baud_val+0x88>
     ff4:	4296      	cmp	r6, r2
     ff6:	d808      	bhi.n	100a <_sercom_get_async_baud_val+0x9a>
			q |= bit_shift;
     ff8:	464c      	mov	r4, r9
     ffa:	4645      	mov	r5, r8
     ffc:	432c      	orrs	r4, r5
     ffe:	4655      	mov	r5, sl
    1000:	4305      	orrs	r5, r0
			r = r - d;
    1002:	1b92      	subs	r2, r2, r6
    1004:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    1006:	46a1      	mov	r9, r4
    1008:	46aa      	mov	sl, r5
	for (i = 63; i >= 0; i--) {
    100a:	3901      	subs	r1, #1
    100c:	d310      	bcc.n	1030 <_sercom_get_async_baud_val+0xc0>
		bit_shift = (uint64_t)1 << i;
    100e:	2020      	movs	r0, #32
    1010:	4240      	negs	r0, r0
    1012:	1808      	adds	r0, r1, r0
    1014:	d5d7      	bpl.n	fc6 <_sercom_get_async_baud_val+0x56>
    1016:	2020      	movs	r0, #32
    1018:	4664      	mov	r4, ip
    101a:	1a40      	subs	r0, r0, r1
    101c:	40c4      	lsrs	r4, r0
    101e:	0020      	movs	r0, r4
    1020:	e7d4      	b.n	fcc <_sercom_get_async_baud_val+0x5c>
    1022:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1024:	2b01      	cmp	r3, #1
    1026:	d007      	beq.n	1038 <_sercom_get_async_baud_val+0xc8>
	*baudval = baud_calculated;
    1028:	9b03      	ldr	r3, [sp, #12]
    102a:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    102c:	2200      	movs	r2, #0
    102e:	e7af      	b.n	f90 <_sercom_get_async_baud_val+0x20>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1030:	464b      	mov	r3, r9
    1032:	425a      	negs	r2, r3
    1034:	0c12      	lsrs	r2, r2, #16
    1036:	e7f7      	b.n	1028 <_sercom_get_async_baud_val+0xb8>
		temp1 = ((uint64_t)baudrate * sample_num);
    1038:	000a      	movs	r2, r1
    103a:	2300      	movs	r3, #0
    103c:	4c3b      	ldr	r4, [pc, #236]	; (112c <_sercom_get_async_baud_val+0x1bc>)
    103e:	2100      	movs	r1, #0
    1040:	47a0      	blx	r4
	uint64_t q = 0, r = 0, bit_shift;
    1042:	2300      	movs	r3, #0
		temp1 = ((uint64_t)baudrate * sample_num);
    1044:	000d      	movs	r5, r1
		bit_shift = (uint64_t)1 << i;
    1046:	2101      	movs	r1, #1
	uint64_t q = 0, r = 0, bit_shift;
    1048:	4698      	mov	r8, r3
		temp1 = ((uint64_t)baudrate * sample_num);
    104a:	0004      	movs	r4, r0
	uint64_t q = 0, r = 0, bit_shift;
    104c:	2200      	movs	r2, #0
    104e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1050:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1052:	468c      	mov	ip, r1
    1054:	4667      	mov	r7, ip
		r = r << 1;
    1056:	1892      	adds	r2, r2, r2
    1058:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
    105a:	40b7      	lsls	r7, r6
		if (n & bit_shift) {
    105c:	4651      	mov	r1, sl
		r = r << 1;
    105e:	9200      	str	r2, [sp, #0]
    1060:	9301      	str	r3, [sp, #4]
		if (n & bit_shift) {
    1062:	420f      	tst	r7, r1
    1064:	d003      	beq.n	106e <_sercom_get_async_baud_val+0xfe>
			r |= 0x01;
    1066:	4660      	mov	r0, ip
    1068:	4310      	orrs	r0, r2
    106a:	0002      	movs	r2, r0
    106c:	9b01      	ldr	r3, [sp, #4]
		if (r >= d) {
    106e:	429d      	cmp	r5, r3
    1070:	d807      	bhi.n	1082 <_sercom_get_async_baud_val+0x112>
    1072:	d101      	bne.n	1078 <_sercom_get_async_baud_val+0x108>
    1074:	4294      	cmp	r4, r2
    1076:	d804      	bhi.n	1082 <_sercom_get_async_baud_val+0x112>
			q |= bit_shift;
    1078:	4641      	mov	r1, r8
    107a:	4339      	orrs	r1, r7
			r = r - d;
    107c:	1b12      	subs	r2, r2, r4
    107e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1080:	4688      	mov	r8, r1
	for (i = 63; i >= 0; i--) {
    1082:	3e01      	subs	r6, #1
    1084:	d2e6      	bcs.n	1054 <_sercom_get_async_baud_val+0xe4>
		if(baud_int > BAUD_INT_MAX) {
    1086:	2380      	movs	r3, #128	; 0x80
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1088:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    108a:	019b      	lsls	r3, r3, #6
    108c:	4598      	cmp	r8, r3
    108e:	d900      	bls.n	1092 <_sercom_get_async_baud_val+0x122>
    1090:	e77e      	b.n	f90 <_sercom_get_async_baud_val+0x20>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1092:	4653      	mov	r3, sl
    1094:	0f5b      	lsrs	r3, r3, #29
    1096:	469b      	mov	fp, r3
    1098:	4653      	mov	r3, sl
    109a:	00db      	lsls	r3, r3, #3
    109c:	0019      	movs	r1, r3
		bit_shift = (uint64_t)1 << i;
    109e:	2001      	movs	r0, #1
	uint64_t q = 0, r = 0, bit_shift;
    10a0:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
    10a2:	468a      	mov	sl, r1
    10a4:	4641      	mov	r1, r8
	uint64_t q = 0, r = 0, bit_shift;
    10a6:	9304      	str	r3, [sp, #16]
    10a8:	2200      	movs	r2, #0
    10aa:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    10ac:	273f      	movs	r7, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    10ae:	4681      	mov	r9, r0
    10b0:	9400      	str	r4, [sp, #0]
    10b2:	9501      	str	r5, [sp, #4]
    10b4:	9105      	str	r1, [sp, #20]
    10b6:	e023      	b.n	1100 <_sercom_get_async_baud_val+0x190>
    10b8:	4648      	mov	r0, r9
    10ba:	4088      	lsls	r0, r1
    10bc:	4680      	mov	r8, r0
    10be:	4649      	mov	r1, r9
    10c0:	40b9      	lsls	r1, r7
    10c2:	468c      	mov	ip, r1
		if (n & bit_shift) {
    10c4:	4656      	mov	r6, sl
    10c6:	4664      	mov	r4, ip
    10c8:	465d      	mov	r5, fp
    10ca:	4026      	ands	r6, r4
    10cc:	4644      	mov	r4, r8
    10ce:	402c      	ands	r4, r5
		r = r << 1;
    10d0:	1892      	adds	r2, r2, r2
    10d2:	415b      	adcs	r3, r3
		if (n & bit_shift) {
    10d4:	4326      	orrs	r6, r4
    10d6:	d002      	beq.n	10de <_sercom_get_async_baud_val+0x16e>
			r |= 0x01;
    10d8:	464c      	mov	r4, r9
    10da:	4314      	orrs	r4, r2
    10dc:	0022      	movs	r2, r4
		if (r >= d) {
    10de:	9800      	ldr	r0, [sp, #0]
    10e0:	9901      	ldr	r1, [sp, #4]
    10e2:	4299      	cmp	r1, r3
    10e4:	d80a      	bhi.n	10fc <_sercom_get_async_baud_val+0x18c>
    10e6:	d101      	bne.n	10ec <_sercom_get_async_baud_val+0x17c>
    10e8:	4290      	cmp	r0, r2
    10ea:	d807      	bhi.n	10fc <_sercom_get_async_baud_val+0x18c>
			r = r - d;
    10ec:	9800      	ldr	r0, [sp, #0]
    10ee:	9901      	ldr	r1, [sp, #4]
    10f0:	1a12      	subs	r2, r2, r0
    10f2:	418b      	sbcs	r3, r1
			q |= bit_shift;
    10f4:	4660      	mov	r0, ip
    10f6:	9904      	ldr	r1, [sp, #16]
    10f8:	4301      	orrs	r1, r0
    10fa:	9104      	str	r1, [sp, #16]
	for (i = 63; i >= 0; i--) {
    10fc:	3f01      	subs	r7, #1
    10fe:	d309      	bcc.n	1114 <_sercom_get_async_baud_val+0x1a4>
		bit_shift = (uint64_t)1 << i;
    1100:	2120      	movs	r1, #32
    1102:	4249      	negs	r1, r1
    1104:	1879      	adds	r1, r7, r1
    1106:	d5d7      	bpl.n	10b8 <_sercom_get_async_baud_val+0x148>
    1108:	2120      	movs	r1, #32
    110a:	4648      	mov	r0, r9
    110c:	1bc9      	subs	r1, r1, r7
    110e:	40c8      	lsrs	r0, r1
    1110:	4680      	mov	r8, r0
    1112:	e7d4      	b.n	10be <_sercom_get_async_baud_val+0x14e>
    1114:	9b05      	ldr	r3, [sp, #20]
    1116:	4698      	mov	r8, r3
		baud_fp = temp1 - 8 * baud_int;
    1118:	00da      	lsls	r2, r3, #3
    111a:	9b04      	ldr	r3, [sp, #16]
    111c:	1a9a      	subs	r2, r3, r2
		baud_calculated = baud_int | (baud_fp << 13);
    111e:	4643      	mov	r3, r8
    1120:	b2d2      	uxtb	r2, r2
    1122:	0352      	lsls	r2, r2, #13
    1124:	431a      	orrs	r2, r3
    1126:	b292      	uxth	r2, r2
    1128:	e77e      	b.n	1028 <_sercom_get_async_baud_val+0xb8>
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	00001e41 	.word	0x00001e41

00001130 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1130:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1132:	4c0e      	ldr	r4, [pc, #56]	; (116c <sercom_set_gclk_generator+0x3c>)
{
    1134:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
    1136:	7823      	ldrb	r3, [r4, #0]
{
    1138:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    113a:	2b00      	cmp	r3, #0
    113c:	d006      	beq.n	114c <sercom_set_gclk_generator+0x1c>
    113e:	2900      	cmp	r1, #0
    1140:	d104      	bne.n	114c <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1142:	7863      	ldrb	r3, [r4, #1]
    1144:	4283      	cmp	r3, r0
    1146:	d00f      	beq.n	1168 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1148:	201d      	movs	r0, #29
    114a:	e00b      	b.n	1164 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
    114c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    114e:	2013      	movs	r0, #19
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
    1152:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1154:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1156:	2013      	movs	r0, #19
    1158:	4b06      	ldr	r3, [pc, #24]	; (1174 <sercom_set_gclk_generator+0x44>)
    115a:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
    115c:	2301      	movs	r3, #1
		return STATUS_OK;
    115e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    1160:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    1162:	7023      	strb	r3, [r4, #0]
}
    1164:	b003      	add	sp, #12
    1166:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    1168:	2000      	movs	r0, #0
    116a:	e7fb      	b.n	1164 <sercom_set_gclk_generator+0x34>
    116c:	200000a4 	.word	0x200000a4
    1170:	00001a69 	.word	0x00001a69
    1174:	000019e1 	.word	0x000019e1

00001178 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1178:	4b3a      	ldr	r3, [pc, #232]	; (1264 <_sercom_get_default_pad+0xec>)
    117a:	4298      	cmp	r0, r3
    117c:	d043      	beq.n	1206 <_sercom_get_default_pad+0x8e>
    117e:	d90a      	bls.n	1196 <_sercom_get_default_pad+0x1e>
    1180:	4b39      	ldr	r3, [pc, #228]	; (1268 <_sercom_get_default_pad+0xf0>)
    1182:	4298      	cmp	r0, r3
    1184:	d017      	beq.n	11b6 <_sercom_get_default_pad+0x3e>
    1186:	4b39      	ldr	r3, [pc, #228]	; (126c <_sercom_get_default_pad+0xf4>)
    1188:	4298      	cmp	r0, r3
    118a:	d032      	beq.n	11f2 <_sercom_get_default_pad+0x7a>
    118c:	4b38      	ldr	r3, [pc, #224]	; (1270 <_sercom_get_default_pad+0xf8>)
    118e:	4298      	cmp	r0, r3
    1190:	d01b      	beq.n	11ca <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1192:	2000      	movs	r0, #0
}
    1194:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1196:	4b37      	ldr	r3, [pc, #220]	; (1274 <_sercom_get_default_pad+0xfc>)
    1198:	4298      	cmp	r0, r3
    119a:	d020      	beq.n	11de <_sercom_get_default_pad+0x66>
    119c:	4b36      	ldr	r3, [pc, #216]	; (1278 <_sercom_get_default_pad+0x100>)
    119e:	4298      	cmp	r0, r3
    11a0:	d1f7      	bne.n	1192 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11a2:	2901      	cmp	r1, #1
    11a4:	d043      	beq.n	122e <_sercom_get_default_pad+0xb6>
    11a6:	2900      	cmp	r1, #0
    11a8:	d03f      	beq.n	122a <_sercom_get_default_pad+0xb2>
    11aa:	2902      	cmp	r1, #2
    11ac:	d03b      	beq.n	1226 <_sercom_get_default_pad+0xae>
    11ae:	2903      	cmp	r1, #3
    11b0:	d1ef      	bne.n	1192 <_sercom_get_default_pad+0x1a>
    11b2:	4832      	ldr	r0, [pc, #200]	; (127c <_sercom_get_default_pad+0x104>)
    11b4:	e7ee      	b.n	1194 <_sercom_get_default_pad+0x1c>
    11b6:	2901      	cmp	r1, #1
    11b8:	d031      	beq.n	121e <_sercom_get_default_pad+0xa6>
    11ba:	2900      	cmp	r1, #0
    11bc:	d02d      	beq.n	121a <_sercom_get_default_pad+0xa2>
    11be:	2902      	cmp	r1, #2
    11c0:	d02f      	beq.n	1222 <_sercom_get_default_pad+0xaa>
    11c2:	2903      	cmp	r1, #3
    11c4:	d1e5      	bne.n	1192 <_sercom_get_default_pad+0x1a>
    11c6:	482e      	ldr	r0, [pc, #184]	; (1280 <_sercom_get_default_pad+0x108>)
    11c8:	e7e4      	b.n	1194 <_sercom_get_default_pad+0x1c>
    11ca:	2901      	cmp	r1, #1
    11cc:	d03f      	beq.n	124e <_sercom_get_default_pad+0xd6>
    11ce:	2900      	cmp	r1, #0
    11d0:	d03b      	beq.n	124a <_sercom_get_default_pad+0xd2>
    11d2:	2902      	cmp	r1, #2
    11d4:	d037      	beq.n	1246 <_sercom_get_default_pad+0xce>
    11d6:	2903      	cmp	r1, #3
    11d8:	d1db      	bne.n	1192 <_sercom_get_default_pad+0x1a>
    11da:	482a      	ldr	r0, [pc, #168]	; (1284 <_sercom_get_default_pad+0x10c>)
    11dc:	e7da      	b.n	1194 <_sercom_get_default_pad+0x1c>
    11de:	2901      	cmp	r1, #1
    11e0:	d03d      	beq.n	125e <_sercom_get_default_pad+0xe6>
    11e2:	2900      	cmp	r1, #0
    11e4:	d039      	beq.n	125a <_sercom_get_default_pad+0xe2>
    11e6:	2902      	cmp	r1, #2
    11e8:	d02b      	beq.n	1242 <_sercom_get_default_pad+0xca>
    11ea:	2903      	cmp	r1, #3
    11ec:	d1d1      	bne.n	1192 <_sercom_get_default_pad+0x1a>
    11ee:	4826      	ldr	r0, [pc, #152]	; (1288 <_sercom_get_default_pad+0x110>)
    11f0:	e7d0      	b.n	1194 <_sercom_get_default_pad+0x1c>
    11f2:	2901      	cmp	r1, #1
    11f4:	d023      	beq.n	123e <_sercom_get_default_pad+0xc6>
    11f6:	2900      	cmp	r1, #0
    11f8:	d01f      	beq.n	123a <_sercom_get_default_pad+0xc2>
    11fa:	2902      	cmp	r1, #2
    11fc:	d01b      	beq.n	1236 <_sercom_get_default_pad+0xbe>
    11fe:	2903      	cmp	r1, #3
    1200:	d1c7      	bne.n	1192 <_sercom_get_default_pad+0x1a>
    1202:	4822      	ldr	r0, [pc, #136]	; (128c <_sercom_get_default_pad+0x114>)
    1204:	e7c6      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1206:	2901      	cmp	r1, #1
    1208:	d025      	beq.n	1256 <_sercom_get_default_pad+0xde>
    120a:	2900      	cmp	r1, #0
    120c:	d021      	beq.n	1252 <_sercom_get_default_pad+0xda>
    120e:	2902      	cmp	r1, #2
    1210:	d00f      	beq.n	1232 <_sercom_get_default_pad+0xba>
    1212:	2903      	cmp	r1, #3
    1214:	d1bd      	bne.n	1192 <_sercom_get_default_pad+0x1a>
    1216:	481e      	ldr	r0, [pc, #120]	; (1290 <_sercom_get_default_pad+0x118>)
    1218:	e7bc      	b.n	1194 <_sercom_get_default_pad+0x1c>
    121a:	481e      	ldr	r0, [pc, #120]	; (1294 <_sercom_get_default_pad+0x11c>)
    121c:	e7ba      	b.n	1194 <_sercom_get_default_pad+0x1c>
    121e:	481e      	ldr	r0, [pc, #120]	; (1298 <_sercom_get_default_pad+0x120>)
    1220:	e7b8      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1222:	481e      	ldr	r0, [pc, #120]	; (129c <_sercom_get_default_pad+0x124>)
    1224:	e7b6      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1226:	481e      	ldr	r0, [pc, #120]	; (12a0 <_sercom_get_default_pad+0x128>)
    1228:	e7b4      	b.n	1194 <_sercom_get_default_pad+0x1c>
    122a:	2003      	movs	r0, #3
    122c:	e7b2      	b.n	1194 <_sercom_get_default_pad+0x1c>
    122e:	481d      	ldr	r0, [pc, #116]	; (12a4 <_sercom_get_default_pad+0x12c>)
    1230:	e7b0      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1232:	481d      	ldr	r0, [pc, #116]	; (12a8 <_sercom_get_default_pad+0x130>)
    1234:	e7ae      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1236:	481d      	ldr	r0, [pc, #116]	; (12ac <_sercom_get_default_pad+0x134>)
    1238:	e7ac      	b.n	1194 <_sercom_get_default_pad+0x1c>
    123a:	481d      	ldr	r0, [pc, #116]	; (12b0 <_sercom_get_default_pad+0x138>)
    123c:	e7aa      	b.n	1194 <_sercom_get_default_pad+0x1c>
    123e:	481d      	ldr	r0, [pc, #116]	; (12b4 <_sercom_get_default_pad+0x13c>)
    1240:	e7a8      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1242:	481d      	ldr	r0, [pc, #116]	; (12b8 <_sercom_get_default_pad+0x140>)
    1244:	e7a6      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1246:	481d      	ldr	r0, [pc, #116]	; (12bc <_sercom_get_default_pad+0x144>)
    1248:	e7a4      	b.n	1194 <_sercom_get_default_pad+0x1c>
    124a:	481d      	ldr	r0, [pc, #116]	; (12c0 <_sercom_get_default_pad+0x148>)
    124c:	e7a2      	b.n	1194 <_sercom_get_default_pad+0x1c>
    124e:	481d      	ldr	r0, [pc, #116]	; (12c4 <_sercom_get_default_pad+0x14c>)
    1250:	e7a0      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1252:	481d      	ldr	r0, [pc, #116]	; (12c8 <_sercom_get_default_pad+0x150>)
    1254:	e79e      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1256:	481d      	ldr	r0, [pc, #116]	; (12cc <_sercom_get_default_pad+0x154>)
    1258:	e79c      	b.n	1194 <_sercom_get_default_pad+0x1c>
    125a:	481d      	ldr	r0, [pc, #116]	; (12d0 <_sercom_get_default_pad+0x158>)
    125c:	e79a      	b.n	1194 <_sercom_get_default_pad+0x1c>
    125e:	481d      	ldr	r0, [pc, #116]	; (12d4 <_sercom_get_default_pad+0x15c>)
    1260:	e798      	b.n	1194 <_sercom_get_default_pad+0x1c>
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	42001000 	.word	0x42001000
    1268:	42001800 	.word	0x42001800
    126c:	42001c00 	.word	0x42001c00
    1270:	42001400 	.word	0x42001400
    1274:	42000800 	.word	0x42000800
    1278:	42000c00 	.word	0x42000c00
    127c:	001f0003 	.word	0x001f0003
    1280:	000f0003 	.word	0x000f0003
    1284:	00130003 	.word	0x00130003
    1288:	00070003 	.word	0x00070003
    128c:	00190003 	.word	0x00190003
    1290:	000b0003 	.word	0x000b0003
    1294:	000c0003 	.word	0x000c0003
    1298:	000d0003 	.word	0x000d0003
    129c:	000e0003 	.word	0x000e0003
    12a0:	001e0003 	.word	0x001e0003
    12a4:	00010003 	.word	0x00010003
    12a8:	000a0003 	.word	0x000a0003
    12ac:	00180003 	.word	0x00180003
    12b0:	00160003 	.word	0x00160003
    12b4:	00170003 	.word	0x00170003
    12b8:	00060003 	.word	0x00060003
    12bc:	00120003 	.word	0x00120003
    12c0:	00100003 	.word	0x00100003
    12c4:	00110003 	.word	0x00110003
    12c8:	00080003 	.word	0x00080003
    12cc:	00090003 	.word	0x00090003
    12d0:	00040003 	.word	0x00040003
    12d4:	00050003 	.word	0x00050003

000012d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    12dc:	4669      	mov	r1, sp
    12de:	4b09      	ldr	r3, [pc, #36]	; (1304 <_sercom_get_sercom_inst_index+0x2c>)
    12e0:	466a      	mov	r2, sp
    12e2:	cb70      	ldmia	r3!, {r4, r5, r6}
    12e4:	c170      	stmia	r1!, {r4, r5, r6}
    12e6:	cb70      	ldmia	r3!, {r4, r5, r6}
    12e8:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12ea:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    12ec:	0099      	lsls	r1, r3, #2
    12ee:	5851      	ldr	r1, [r2, r1]
    12f0:	4281      	cmp	r1, r0
    12f2:	d005      	beq.n	1300 <_sercom_get_sercom_inst_index+0x28>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12f4:	3301      	adds	r3, #1
    12f6:	2b06      	cmp	r3, #6
    12f8:	d1f8      	bne.n	12ec <_sercom_get_sercom_inst_index+0x14>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    12fa:	2000      	movs	r0, #0
}
    12fc:	b006      	add	sp, #24
    12fe:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    1300:	b2d8      	uxtb	r0, r3
    1302:	e7fb      	b.n	12fc <_sercom_get_sercom_inst_index+0x24>
    1304:	00002754 	.word	0x00002754

00001308 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1308:	4770      	bx	lr
    130a:	46c0      	nop			; (mov r8, r8)

0000130c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    130c:	b5f0      	push	{r4, r5, r6, r7, lr}
    130e:	468c      	mov	ip, r1
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1310:	490b      	ldr	r1, [pc, #44]	; (1340 <_sercom_set_handler+0x34>)
    1312:	780b      	ldrb	r3, [r1, #0]
    1314:	2b00      	cmp	r3, #0
    1316:	d110      	bne.n	133a <_sercom_set_handler+0x2e>
    1318:	2300      	movs	r3, #0
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    131a:	2500      	movs	r5, #0
    131c:	4c09      	ldr	r4, [pc, #36]	; (1344 <_sercom_set_handler+0x38>)
    131e:	4f0a      	ldr	r7, [pc, #40]	; (1348 <_sercom_set_handler+0x3c>)
    1320:	4e0a      	ldr	r6, [pc, #40]	; (134c <_sercom_set_handler+0x40>)
    1322:	18f2      	adds	r2, r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1324:	50e7      	str	r7, [r4, r3]
    1326:	3304      	adds	r3, #4
			_sercom_instances[i] = NULL;
    1328:	6015      	str	r5, [r2, #0]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    132a:	2b18      	cmp	r3, #24
    132c:	d1f9      	bne.n	1322 <_sercom_set_handler+0x16>
		}

		_handler_table_initialized = true;
    132e:	3b17      	subs	r3, #23
    1330:	700b      	strb	r3, [r1, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1332:	4663      	mov	r3, ip
    1334:	0080      	lsls	r0, r0, #2
    1336:	5023      	str	r3, [r4, r0]
}
    1338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    133a:	4c02      	ldr	r4, [pc, #8]	; (1344 <_sercom_set_handler+0x38>)
    133c:	e7f9      	b.n	1332 <_sercom_set_handler+0x26>
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	200000a6 	.word	0x200000a6
    1344:	200000a8 	.word	0x200000a8
    1348:	00001309 	.word	0x00001309
    134c:	20000294 	.word	0x20000294

00001350 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1350:	b500      	push	{lr}
    1352:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1354:	466a      	mov	r2, sp
    1356:	2309      	movs	r3, #9
    1358:	7013      	strb	r3, [r2, #0]
    135a:	3301      	adds	r3, #1
    135c:	7053      	strb	r3, [r2, #1]
    135e:	3301      	adds	r3, #1
    1360:	7093      	strb	r3, [r2, #2]
    1362:	3301      	adds	r3, #1
    1364:	70d3      	strb	r3, [r2, #3]
    1366:	3301      	adds	r3, #1
    1368:	7113      	strb	r3, [r2, #4]
    136a:	3301      	adds	r3, #1
    136c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    136e:	4b03      	ldr	r3, [pc, #12]	; (137c <_sercom_get_interrupt_vector+0x2c>)
    1370:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1372:	466b      	mov	r3, sp
    1374:	5618      	ldrsb	r0, [r3, r0]
}
    1376:	b003      	add	sp, #12
    1378:	bd00      	pop	{pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	000012d9 	.word	0x000012d9

00001380 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1380:	b510      	push	{r4, lr}
    1382:	4b02      	ldr	r3, [pc, #8]	; (138c <SERCOM0_Handler+0xc>)
    1384:	2000      	movs	r0, #0
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	4798      	blx	r3
    138a:	bd10      	pop	{r4, pc}
    138c:	200000a8 	.word	0x200000a8

00001390 <SERCOM1_Handler>:
    1390:	b510      	push	{r4, lr}
    1392:	4b02      	ldr	r3, [pc, #8]	; (139c <SERCOM1_Handler+0xc>)
    1394:	2001      	movs	r0, #1
    1396:	685b      	ldr	r3, [r3, #4]
    1398:	4798      	blx	r3
    139a:	bd10      	pop	{r4, pc}
    139c:	200000a8 	.word	0x200000a8

000013a0 <SERCOM2_Handler>:
    13a0:	b510      	push	{r4, lr}
    13a2:	4b02      	ldr	r3, [pc, #8]	; (13ac <SERCOM2_Handler+0xc>)
    13a4:	2002      	movs	r0, #2
    13a6:	689b      	ldr	r3, [r3, #8]
    13a8:	4798      	blx	r3
    13aa:	bd10      	pop	{r4, pc}
    13ac:	200000a8 	.word	0x200000a8

000013b0 <SERCOM3_Handler>:
    13b0:	b510      	push	{r4, lr}
    13b2:	4b02      	ldr	r3, [pc, #8]	; (13bc <SERCOM3_Handler+0xc>)
    13b4:	2003      	movs	r0, #3
    13b6:	68db      	ldr	r3, [r3, #12]
    13b8:	4798      	blx	r3
    13ba:	bd10      	pop	{r4, pc}
    13bc:	200000a8 	.word	0x200000a8

000013c0 <SERCOM4_Handler>:
    13c0:	b510      	push	{r4, lr}
    13c2:	4b02      	ldr	r3, [pc, #8]	; (13cc <SERCOM4_Handler+0xc>)
    13c4:	2004      	movs	r0, #4
    13c6:	691b      	ldr	r3, [r3, #16]
    13c8:	4798      	blx	r3
    13ca:	bd10      	pop	{r4, pc}
    13cc:	200000a8 	.word	0x200000a8

000013d0 <SERCOM5_Handler>:
    13d0:	b510      	push	{r4, lr}
    13d2:	4b02      	ldr	r3, [pc, #8]	; (13dc <SERCOM5_Handler+0xc>)
    13d4:	2005      	movs	r0, #5
    13d6:	695b      	ldr	r3, [r3, #20]
    13d8:	4798      	blx	r3
    13da:	bd10      	pop	{r4, pc}
    13dc:	200000a8 	.word	0x200000a8

000013e0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    13e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    13e2:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    13e4:	2601      	movs	r6, #1
    13e6:	4c0b      	ldr	r4, [pc, #44]	; (1414 <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    13e8:	4d0b      	ldr	r5, [pc, #44]	; (1418 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    13ea:	4f0c      	ldr	r7, [pc, #48]	; (141c <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    13ec:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
    13ee:	0032      	movs	r2, r6
    13f0:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    13f2:	6929      	ldr	r1, [r5, #16]
		if (extint_chan_is_detected(_current_channel)) {
    13f4:	4211      	tst	r1, r2
    13f6:	d005      	beq.n	1404 <EIC_Handler+0x24>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    13f8:	612a      	str	r2, [r5, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    13fa:	009b      	lsls	r3, r3, #2
    13fc:	59db      	ldr	r3, [r3, r7]
    13fe:	2b00      	cmp	r3, #0
    1400:	d000      	beq.n	1404 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1402:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1404:	7823      	ldrb	r3, [r4, #0]
    1406:	3301      	adds	r3, #1
    1408:	b2db      	uxtb	r3, r3
    140a:	7023      	strb	r3, [r4, #0]
    140c:	2b0f      	cmp	r3, #15
    140e:	d9ee      	bls.n	13ee <EIC_Handler+0xe>
			}
		}
	}
}
    1410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	200002ac 	.word	0x200002ac
    1418:	40001800 	.word	0x40001800
    141c:	200000ec 	.word	0x200000ec

00001420 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1420:	4b0b      	ldr	r3, [pc, #44]	; (1450 <cpu_irq_enter_critical+0x30>)
    1422:	681a      	ldr	r2, [r3, #0]
    1424:	2a00      	cmp	r2, #0
    1426:	d105      	bne.n	1434 <cpu_irq_enter_critical+0x14>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1428:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    142c:	2900      	cmp	r1, #0
    142e:	d005      	beq.n	143c <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1430:	4908      	ldr	r1, [pc, #32]	; (1454 <cpu_irq_enter_critical+0x34>)
    1432:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1434:	681a      	ldr	r2, [r3, #0]
    1436:	3201      	adds	r2, #1
    1438:	601a      	str	r2, [r3, #0]
}
    143a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    143c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    143e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1442:	4a05      	ldr	r2, [pc, #20]	; (1458 <cpu_irq_enter_critical+0x38>)
    1444:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    1446:	4a03      	ldr	r2, [pc, #12]	; (1454 <cpu_irq_enter_critical+0x34>)
    1448:	3101      	adds	r1, #1
    144a:	7011      	strb	r1, [r2, #0]
    144c:	e7f2      	b.n	1434 <cpu_irq_enter_critical+0x14>
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	200000c0 	.word	0x200000c0
    1454:	200000c4 	.word	0x200000c4
    1458:	20000000 	.word	0x20000000

0000145c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <cpu_irq_leave_critical+0x24>)
    145e:	681a      	ldr	r2, [r3, #0]
    1460:	3a01      	subs	r2, #1
    1462:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	2b00      	cmp	r3, #0
    1468:	d109      	bne.n	147e <cpu_irq_leave_critical+0x22>
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <cpu_irq_leave_critical+0x28>)
    146c:	781b      	ldrb	r3, [r3, #0]
    146e:	2b00      	cmp	r3, #0
    1470:	d005      	beq.n	147e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1472:	2201      	movs	r2, #1
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <cpu_irq_leave_critical+0x2c>)
    1476:	701a      	strb	r2, [r3, #0]
    1478:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    147c:	b662      	cpsie	i
	}
}
    147e:	4770      	bx	lr
    1480:	200000c0 	.word	0x200000c0
    1484:	200000c4 	.word	0x200000c4
    1488:	20000000 	.word	0x20000000

0000148c <system_board_init>:
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    148c:	2301      	movs	r3, #1
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    148e:	b510      	push	{r4, lr}
	config->powersave  = false;
    1490:	2400      	movs	r4, #0
    1492:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1494:	a901      	add	r1, sp, #4
    1496:	704b      	strb	r3, [r1, #1]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1498:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    149a:	20ff      	movs	r0, #255	; 0xff
    149c:	4b02      	ldr	r3, [pc, #8]	; (14a8 <system_board_init+0x1c>)
	config->powersave  = false;
    149e:	708c      	strb	r4, [r1, #2]
    14a0:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14a2:	61a4      	str	r4, [r4, #24]
    14a4:	deff      	udf	#255	; 0xff
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	000014ad 	.word	0x000014ad

000014ac <port_pin_set_config>:
    14ac:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    14ae:	b500      	push	{lr}
    14b0:	b083      	sub	sp, #12
    14b2:	ab01      	add	r3, sp, #4
    14b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    14b6:	780a      	ldrb	r2, [r1, #0]
    14b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    14ba:	784a      	ldrb	r2, [r1, #1]
    14bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    14be:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    14c0:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    14c2:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    14c4:	4b01      	ldr	r3, [pc, #4]	; (14cc <port_pin_set_config+0x20>)
    14c6:	4798      	blx	r3
}
    14c8:	b003      	add	sp, #12
    14ca:	bd00      	pop	{pc}
    14cc:	00001b69 	.word	0x00001b69

000014d0 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    14d0:	2102      	movs	r1, #2
    14d2:	480d      	ldr	r0, [pc, #52]	; (1508 <system_clock_source_enable.part.0+0x38>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    14d4:	4a0d      	ldr	r2, [pc, #52]	; (150c <system_clock_source_enable.part.0+0x3c>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    14d6:	6803      	ldr	r3, [r0, #0]
    14d8:	430b      	orrs	r3, r1
    14da:	6003      	str	r3, [r0, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    14dc:	8491      	strh	r1, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14de:	310e      	adds	r1, #14
    14e0:	68d3      	ldr	r3, [r2, #12]
    14e2:	4219      	tst	r1, r3
    14e4:	d0fc      	beq.n	14e0 <system_clock_source_enable.part.0+0x10>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    14e6:	6883      	ldr	r3, [r0, #8]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14e8:	2110      	movs	r1, #16
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    14ea:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    14ec:	6843      	ldr	r3, [r0, #4]
    14ee:	6293      	str	r3, [r2, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    14f0:	2300      	movs	r3, #0
    14f2:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14f4:	4a05      	ldr	r2, [pc, #20]	; (150c <system_clock_source_enable.part.0+0x3c>)
    14f6:	68d3      	ldr	r3, [r2, #12]
    14f8:	4219      	tst	r1, r3
    14fa:	d0fc      	beq.n	14f6 <system_clock_source_enable.part.0+0x26>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    14fc:	6803      	ldr	r3, [r0, #0]
    14fe:	b29b      	uxth	r3, r3
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1500:	2000      	movs	r0, #0
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1502:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1504:	4770      	bx	lr
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	200000c8 	.word	0x200000c8
    150c:	40000800 	.word	0x40000800

00001510 <system_clock_source_get_hz>:
{
    1510:	b510      	push	{r4, lr}
	switch (clock_source) {
    1512:	2808      	cmp	r0, #8
    1514:	d82d      	bhi.n	1572 <system_clock_source_get_hz+0x62>
    1516:	4b1c      	ldr	r3, [pc, #112]	; (1588 <system_clock_source_get_hz+0x78>)
    1518:	0080      	lsls	r0, r0, #2
    151a:	581b      	ldr	r3, [r3, r0]
    151c:	469f      	mov	pc, r3
		return 32768UL;
    151e:	2080      	movs	r0, #128	; 0x80
    1520:	0200      	lsls	r0, r0, #8
}
    1522:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
    1524:	4b19      	ldr	r3, [pc, #100]	; (158c <system_clock_source_get_hz+0x7c>)
    1526:	6958      	ldr	r0, [r3, #20]
    1528:	e7fb      	b.n	1522 <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    152a:	4b19      	ldr	r3, [pc, #100]	; (1590 <system_clock_source_get_hz+0x80>)
    152c:	4819      	ldr	r0, [pc, #100]	; (1594 <system_clock_source_get_hz+0x84>)
    152e:	6a1b      	ldr	r3, [r3, #32]
    1530:	059b      	lsls	r3, r3, #22
    1532:	0f9b      	lsrs	r3, r3, #30
    1534:	40d8      	lsrs	r0, r3
    1536:	e7f4      	b.n	1522 <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1538:	4c14      	ldr	r4, [pc, #80]	; (158c <system_clock_source_get_hz+0x7c>)
			return 0;
    153a:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    153c:	6823      	ldr	r3, [r4, #0]
    153e:	079b      	lsls	r3, r3, #30
    1540:	d5ef      	bpl.n	1522 <system_clock_source_get_hz+0x12>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1542:	2210      	movs	r2, #16
    1544:	4912      	ldr	r1, [pc, #72]	; (1590 <system_clock_source_get_hz+0x80>)
    1546:	68cb      	ldr	r3, [r1, #12]
    1548:	421a      	tst	r2, r3
    154a:	d0fc      	beq.n	1546 <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    154c:	2324      	movs	r3, #36	; 0x24
    154e:	6822      	ldr	r2, [r4, #0]
    1550:	4013      	ands	r3, r2
    1552:	2b04      	cmp	r3, #4
    1554:	d00f      	beq.n	1576 <system_clock_source_get_hz+0x66>
			return 48000000UL;
    1556:	4810      	ldr	r0, [pc, #64]	; (1598 <system_clock_source_get_hz+0x88>)
    1558:	e7e3      	b.n	1522 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
    155a:	4b0c      	ldr	r3, [pc, #48]	; (158c <system_clock_source_get_hz+0x7c>)
    155c:	6918      	ldr	r0, [r3, #16]
    155e:	e7e0      	b.n	1522 <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1560:	2350      	movs	r3, #80	; 0x50
    1562:	4a0b      	ldr	r2, [pc, #44]	; (1590 <system_clock_source_get_hz+0x80>)
			return 0;
    1564:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1566:	5cd3      	ldrb	r3, [r2, r3]
    1568:	075b      	lsls	r3, r3, #29
    156a:	d5da      	bpl.n	1522 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
    156c:	4b07      	ldr	r3, [pc, #28]	; (158c <system_clock_source_get_hz+0x7c>)
    156e:	68d8      	ldr	r0, [r3, #12]
    1570:	e7d7      	b.n	1522 <system_clock_source_get_hz+0x12>
		return 0;
    1572:	2000      	movs	r0, #0
    1574:	e7d5      	b.n	1522 <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1576:	4b09      	ldr	r3, [pc, #36]	; (159c <system_clock_source_get_hz+0x8c>)
    1578:	2000      	movs	r0, #0
    157a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    157c:	68a3      	ldr	r3, [r4, #8]
    157e:	041b      	lsls	r3, r3, #16
    1580:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1582:	4358      	muls	r0, r3
    1584:	e7cd      	b.n	1522 <system_clock_source_get_hz+0x12>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	0000276c 	.word	0x0000276c
    158c:	200000c8 	.word	0x200000c8
    1590:	40000800 	.word	0x40000800
    1594:	007a1200 	.word	0x007a1200
    1598:	02dc6c00 	.word	0x02dc6c00
    159c:	00001a85 	.word	0x00001a85

000015a0 <system_clock_source_xosc32k_set_config>:
{
    15a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a2:	46de      	mov	lr, fp
    15a4:	4657      	mov	r7, sl
    15a6:	464e      	mov	r6, r9
    15a8:	4645      	mov	r5, r8
    15aa:	b5e0      	push	{r5, r6, r7, lr}
    15ac:	0001      	movs	r1, r0
	temp.bit.STARTUP = config->startup_time;
    15ae:	7845      	ldrb	r5, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    15b0:	7800      	ldrb	r0, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    15b2:	7b4e      	ldrb	r6, [r1, #13]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    15b4:	4242      	negs	r2, r0
    15b6:	4142      	adcs	r2, r0
    15b8:	4691      	mov	r9, r2
	temp.bit.EN1K = config->enable_1khz_output;
    15ba:	78ca      	ldrb	r2, [r1, #3]
	temp.bit.AAMPEN = config->auto_gain_control;
    15bc:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    15be:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    15c0:	790a      	ldrb	r2, [r1, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    15c2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    15c4:	7b8c      	ldrb	r4, [r1, #14]
	temp.bit.EN32K = config->enable_32khz_output;
    15c6:	4690      	mov	r8, r2
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    15c8:	4b1f      	ldr	r3, [pc, #124]	; (1648 <system_clock_source_xosc32k_set_config+0xa8>)
	_system_clock_inst.xosc32k.frequency = config->frequency;
    15ca:	688a      	ldr	r2, [r1, #8]
    15cc:	491f      	ldr	r1, [pc, #124]	; (164c <system_clock_source_xosc32k_set_config+0xac>)
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    15ce:	469b      	mov	fp, r3
    15d0:	8a9b      	ldrh	r3, [r3, #20]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    15d2:	614a      	str	r2, [r1, #20]
	SYSCTRL->XOSC32K = temp;
    15d4:	464a      	mov	r2, r9
    15d6:	0092      	lsls	r2, r2, #2
    15d8:	4691      	mov	r9, r2
    15da:	2204      	movs	r2, #4
    15dc:	4393      	bics	r3, r2
    15de:	464a      	mov	r2, r9
    15e0:	2101      	movs	r1, #1
    15e2:	4313      	orrs	r3, r2
    15e4:	4642      	mov	r2, r8
    15e6:	400a      	ands	r2, r1
    15e8:	00d2      	lsls	r2, r2, #3
    15ea:	4690      	mov	r8, r2
    15ec:	2208      	movs	r2, #8
    15ee:	4393      	bics	r3, r2
    15f0:	4642      	mov	r2, r8
    15f2:	4313      	orrs	r3, r2
    15f4:	4662      	mov	r2, ip
    15f6:	400a      	ands	r2, r1
    15f8:	0112      	lsls	r2, r2, #4
    15fa:	4694      	mov	ip, r2
    15fc:	2210      	movs	r2, #16
    15fe:	4393      	bics	r3, r2
    1600:	4662      	mov	r2, ip
    1602:	4313      	orrs	r3, r2
    1604:	2220      	movs	r2, #32
    1606:	4008      	ands	r0, r1
    1608:	0140      	lsls	r0, r0, #5
    160a:	4393      	bics	r3, r2
    160c:	4303      	orrs	r3, r0
    160e:	2040      	movs	r0, #64	; 0x40
    1610:	465a      	mov	r2, fp
    1612:	400f      	ands	r7, r1
    1614:	01bf      	lsls	r7, r7, #6
    1616:	4383      	bics	r3, r0
    1618:	433b      	orrs	r3, r7
    161a:	3040      	adds	r0, #64	; 0x40
    161c:	400e      	ands	r6, r1
    161e:	4383      	bics	r3, r0
    1620:	3879      	subs	r0, #121	; 0x79
    1622:	01f6      	lsls	r6, r6, #7
    1624:	4005      	ands	r5, r0
    1626:	480a      	ldr	r0, [pc, #40]	; (1650 <system_clock_source_xosc32k_set_config+0xb0>)
    1628:	4333      	orrs	r3, r6
    162a:	022d      	lsls	r5, r5, #8
    162c:	4003      	ands	r3, r0
    162e:	4809      	ldr	r0, [pc, #36]	; (1654 <system_clock_source_xosc32k_set_config+0xb4>)
    1630:	432b      	orrs	r3, r5
    1632:	4021      	ands	r1, r4
    1634:	0309      	lsls	r1, r1, #12
    1636:	4003      	ands	r3, r0
    1638:	430b      	orrs	r3, r1
    163a:	8293      	strh	r3, [r2, #20]
}
    163c:	bc3c      	pop	{r2, r3, r4, r5}
    163e:	4690      	mov	r8, r2
    1640:	4699      	mov	r9, r3
    1642:	46a2      	mov	sl, r4
    1644:	46ab      	mov	fp, r5
    1646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1648:	40000800 	.word	0x40000800
    164c:	200000c8 	.word	0x200000c8
    1650:	fffff8ff 	.word	0xfffff8ff
    1654:	ffffefff 	.word	0xffffefff

00001658 <system_clock_source_dfll_set_config>:
{
    1658:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    165a:	7a03      	ldrb	r3, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    165c:	8942      	ldrh	r2, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    165e:	069b      	lsls	r3, r3, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1660:	0592      	lsls	r2, r2, #22
    1662:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1664:	0c1b      	lsrs	r3, r3, #16
    1666:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1668:	4a17      	ldr	r2, [pc, #92]	; (16c8 <system_clock_source_dfll_set_config+0x70>)
    166a:	6053      	str	r3, [r2, #4]
			(uint32_t)config->wakeup_lock     |
    166c:	79c1      	ldrb	r1, [r0, #7]
    166e:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->quick_lock      |
    1670:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    1672:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
    1674:	8841      	ldrh	r1, [r0, #2]
    1676:	4321      	orrs	r1, r4
    1678:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    167a:	7841      	ldrb	r1, [r0, #1]
    167c:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    167e:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
    1680:	6013      	str	r3, [r2, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1682:	7803      	ldrb	r3, [r0, #0]
    1684:	2b04      	cmp	r3, #4
    1686:	d010      	beq.n	16aa <system_clock_source_dfll_set_config+0x52>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1688:	2b20      	cmp	r3, #32
    168a:	d10d      	bne.n	16a8 <system_clock_source_dfll_set_config+0x50>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    168c:	7b03      	ldrb	r3, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    168e:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1690:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1692:	430b      	orrs	r3, r1
    1694:	89c1      	ldrh	r1, [r0, #14]
    1696:	480d      	ldr	r0, [pc, #52]	; (16cc <system_clock_source_dfll_set_config+0x74>)
    1698:	0409      	lsls	r1, r1, #16
    169a:	4001      	ands	r1, r0
    169c:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
    169e:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    16a0:	6811      	ldr	r1, [r2, #0]
    16a2:	4b0b      	ldr	r3, [pc, #44]	; (16d0 <system_clock_source_dfll_set_config+0x78>)
    16a4:	430b      	orrs	r3, r1
    16a6:	6013      	str	r3, [r2, #0]
}
    16a8:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16aa:	7b01      	ldrb	r1, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    16ac:	8a04      	ldrh	r4, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16ae:	0689      	lsls	r1, r1, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    16b0:	89c0      	ldrh	r0, [r0, #14]
    16b2:	4321      	orrs	r1, r4
    16b4:	4c05      	ldr	r4, [pc, #20]	; (16cc <system_clock_source_dfll_set_config+0x74>)
    16b6:	0400      	lsls	r0, r0, #16
    16b8:	4020      	ands	r0, r4
    16ba:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
    16bc:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    16be:	6811      	ldr	r1, [r2, #0]
    16c0:	430b      	orrs	r3, r1
    16c2:	6013      	str	r3, [r2, #0]
    16c4:	e7f0      	b.n	16a8 <system_clock_source_dfll_set_config+0x50>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	200000c8 	.word	0x200000c8
    16cc:	03ff0000 	.word	0x03ff0000
    16d0:	00000424 	.word	0x00000424

000016d4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	46c6      	mov	lr, r8
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16d8:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16da:	211e      	movs	r1, #30
{
    16dc:	b500      	push	{lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16de:	4b4a      	ldr	r3, [pc, #296]	; (1808 <system_clock_init+0x134>)
    16e0:	00d2      	lsls	r2, r2, #3
    16e2:	609a      	str	r2, [r3, #8]
    16e4:	4a49      	ldr	r2, [pc, #292]	; (180c <system_clock_init+0x138>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16e6:	2400      	movs	r4, #0
    16e8:	6853      	ldr	r3, [r2, #4]
{
    16ea:	b08c      	sub	sp, #48	; 0x30
    16ec:	438b      	bics	r3, r1
    16ee:	391a      	subs	r1, #26
    16f0:	430b      	orrs	r3, r1
    16f2:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    16f4:	2302      	movs	r3, #2
    16f6:	ad07      	add	r5, sp, #28
    16f8:	4e45      	ldr	r6, [pc, #276]	; (1810 <system_clock_init+0x13c>)
    16fa:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    16fc:	b2e0      	uxtb	r0, r4
    16fe:	0029      	movs	r1, r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1700:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1702:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1704:	2c25      	cmp	r4, #37	; 0x25
    1706:	d1f9      	bne.n	16fc <system_clock_init+0x28>
	config->frequency           = 32768UL;
    1708:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    170a:	a803      	add	r0, sp, #12
	config->frequency           = 32768UL;
    170c:	0212      	lsls	r2, r2, #8
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    170e:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    1710:	6082      	str	r2, [r0, #8]
	config->enable_32khz_output = true;
    1712:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1714:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1716:	7083      	strb	r3, [r0, #2]
	config->enable_1khz_output  = false;
    1718:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    171a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    171c:	7303      	strb	r3, [r0, #12]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    171e:	3205      	adds	r2, #5
	config->write_once          = false;
    1720:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1722:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1724:	4b3b      	ldr	r3, [pc, #236]	; (1814 <system_clock_init+0x140>)
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1726:	7042      	strb	r2, [r0, #1]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1728:	4798      	blx	r3
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    172a:	2102      	movs	r1, #2
    172c:	4a36      	ldr	r2, [pc, #216]	; (1808 <system_clock_init+0x134>)
    172e:	8a93      	ldrh	r3, [r2, #20]
    1730:	430b      	orrs	r3, r1
    1732:	8293      	strh	r3, [r2, #20]
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1734:	68d3      	ldr	r3, [r2, #12]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1736:	4219      	tst	r1, r3
    1738:	d0fc      	beq.n	1734 <system_clock_init+0x60>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    173a:	2180      	movs	r1, #128	; 0x80
    173c:	8a93      	ldrh	r3, [r2, #20]
    173e:	430b      	orrs	r3, r1
    1740:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1742:	2200      	movs	r2, #0
    1744:	2300      	movs	r3, #0
    1746:	806a      	strh	r2, [r5, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1748:	80aa      	strh	r2, [r5, #4]
	config->fine_value      = 0xff / 4; /* Midpoint */
    174a:	323f      	adds	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    174c:	71ab      	strb	r3, [r5, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    174e:	71eb      	strb	r3, [r5, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1750:	816a      	strh	r2, [r5, #10]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    1752:	706b      	strb	r3, [r5, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1754:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1756:	4b30      	ldr	r3, [pc, #192]	; (1818 <system_clock_init+0x144>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1758:	702a      	strb	r2, [r5, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    175e:	2b3f      	cmp	r3, #63	; 0x3f
    1760:	d050      	beq.n	1804 <system_clock_init+0x130>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1762:	722b      	strb	r3, [r5, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1764:	4b2d      	ldr	r3, [pc, #180]	; (181c <system_clock_init+0x148>)
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1766:	0028      	movs	r0, r5
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1768:	822b      	strh	r3, [r5, #16]
	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    176a:	2307      	movs	r3, #7
    176c:	732b      	strb	r3, [r5, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    176e:	3338      	adds	r3, #56	; 0x38
    1770:	81eb      	strh	r3, [r5, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    1772:	4b2b      	ldr	r3, [pc, #172]	; (1820 <system_clock_init+0x14c>)
    1774:	4798      	blx	r3
	SYSCTRL->OSC8M = temp;
    1776:	2240      	movs	r2, #64	; 0x40
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1778:	4c23      	ldr	r4, [pc, #140]	; (1808 <system_clock_init+0x134>)
    177a:	6a23      	ldr	r3, [r4, #32]
	SYSCTRL->OSC8M = temp;
    177c:	4393      	bics	r3, r2
    177e:	3240      	adds	r2, #64	; 0x40
    1780:	4313      	orrs	r3, r2
    1782:	4a28      	ldr	r2, [pc, #160]	; (1824 <system_clock_init+0x150>)
    1784:	4013      	ands	r3, r2
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1786:	2202      	movs	r2, #2
	SYSCTRL->OSC8M = temp;
    1788:	6223      	str	r3, [r4, #32]
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    178a:	6a23      	ldr	r3, [r4, #32]
    178c:	4313      	orrs	r3, r2
    178e:	6223      	str	r3, [r4, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1790:	4b25      	ldr	r3, [pc, #148]	; (1828 <system_clock_init+0x154>)
    1792:	4798      	blx	r3
	config->division_factor    = 1;
    1794:	2301      	movs	r3, #1
	config->high_when_disabled = false;
    1796:	466a      	mov	r2, sp
	config->division_factor    = 1;
    1798:	4698      	mov	r8, r3
    179a:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    179c:	2300      	movs	r3, #0

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    179e:	4669      	mov	r1, sp
    17a0:	7053      	strb	r3, [r2, #1]
	config->run_in_standby     = false;
    17a2:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    17a4:	7253      	strb	r3, [r2, #9]
    17a6:	2001      	movs	r0, #1
    17a8:	3305      	adds	r3, #5
    17aa:	4f20      	ldr	r7, [pc, #128]	; (182c <system_clock_init+0x158>)
    17ac:	7013      	strb	r3, [r2, #0]
    17ae:	47b8      	blx	r7
    17b0:	2001      	movs	r0, #1
    17b2:	4d1f      	ldr	r5, [pc, #124]	; (1830 <system_clock_init+0x15c>)
    17b4:	47a8      	blx	r5
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    17b6:	4642      	mov	r2, r8
    17b8:	466b      	mov	r3, sp
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    17ba:	4669      	mov	r1, sp
    17bc:	2000      	movs	r0, #0
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    17be:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    17c0:	47b0      	blx	r6
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    17c2:	2000      	movs	r0, #0
    17c4:	4b1b      	ldr	r3, [pc, #108]	; (1834 <system_clock_init+0x160>)
    17c6:	4798      	blx	r3
    17c8:	4b1b      	ldr	r3, [pc, #108]	; (1838 <system_clock_init+0x164>)
    17ca:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    17cc:	21d0      	movs	r1, #208	; 0xd0
    17ce:	68e3      	ldr	r3, [r4, #12]
    17d0:	400b      	ands	r3, r1


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    17d2:	2bd0      	cmp	r3, #208	; 0xd0
    17d4:	d1fb      	bne.n	17ce <system_clock_init+0xfa>
	PM->CPUSEL.reg = (uint32_t)divider;
    17d6:	2300      	movs	r3, #0
    17d8:	4a18      	ldr	r2, [pc, #96]	; (183c <system_clock_init+0x168>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17da:	4669      	mov	r1, sp
    17dc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    17de:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    17e0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    17e2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    17e4:	2201      	movs	r2, #1
    17e6:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    17e8:	466a      	mov	r2, sp
    17ea:	2000      	movs	r0, #0
    17ec:	7053      	strb	r3, [r2, #1]
	config->run_in_standby     = false;
    17ee:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    17f0:	7253      	strb	r3, [r2, #9]
    17f2:	3307      	adds	r3, #7
    17f4:	7013      	strb	r3, [r2, #0]
    17f6:	47b8      	blx	r7
    17f8:	2000      	movs	r0, #0
    17fa:	47a8      	blx	r5
#endif
}
    17fc:	b00c      	add	sp, #48	; 0x30
    17fe:	bc04      	pop	{r2}
    1800:	4690      	mov	r8, r2
    1802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
    1804:	3b20      	subs	r3, #32
    1806:	e7ac      	b.n	1762 <system_clock_init+0x8e>
    1808:	40000800 	.word	0x40000800
    180c:	41004000 	.word	0x41004000
    1810:	00001a69 	.word	0x00001a69
    1814:	000015a1 	.word	0x000015a1
    1818:	00806024 	.word	0x00806024
    181c:	000005b9 	.word	0x000005b9
    1820:	00001659 	.word	0x00001659
    1824:	fffffcff 	.word	0xfffffcff
    1828:	00001841 	.word	0x00001841
    182c:	00001865 	.word	0x00001865
    1830:	00001919 	.word	0x00001919
    1834:	000019e1 	.word	0x000019e1
    1838:	000014d1 	.word	0x000014d1
    183c:	40000400 	.word	0x40000400

00001840 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1840:	2108      	movs	r1, #8
    1842:	4a06      	ldr	r2, [pc, #24]	; (185c <system_gclk_init+0x1c>)
    1844:	6993      	ldr	r3, [r2, #24]
    1846:	430b      	orrs	r3, r1
    1848:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    184a:	2301      	movs	r3, #1
    184c:	4a04      	ldr	r2, [pc, #16]	; (1860 <system_gclk_init+0x20>)
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    184e:	3907      	subs	r1, #7
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1850:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1852:	7813      	ldrb	r3, [r2, #0]
    1854:	4219      	tst	r1, r3
    1856:	d1fc      	bne.n	1852 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1858:	4770      	bx	lr
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	40000400 	.word	0x40000400
    1860:	40000c00 	.word	0x40000c00

00001864 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1864:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1866:	780b      	ldrb	r3, [r1, #0]
{
    1868:	0006      	movs	r6, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    186a:	021b      	lsls	r3, r3, #8
    186c:	4303      	orrs	r3, r0
    186e:	001d      	movs	r5, r3

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1870:	784b      	ldrb	r3, [r1, #1]
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1872:	0004      	movs	r4, r0
	if (config->high_when_disabled) {
    1874:	2b00      	cmp	r3, #0
    1876:	d002      	beq.n	187e <system_gclk_gen_set_config+0x1a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1878:	2380      	movs	r3, #128	; 0x80
    187a:	02db      	lsls	r3, r3, #11
    187c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    187e:	7a4b      	ldrb	r3, [r1, #9]
    1880:	2b00      	cmp	r3, #0
    1882:	d002      	beq.n	188a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1884:	2380      	movs	r3, #128	; 0x80
    1886:	031b      	lsls	r3, r3, #12
    1888:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    188a:	6848      	ldr	r0, [r1, #4]
    188c:	2801      	cmp	r0, #1
    188e:	d90f      	bls.n	18b0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1890:	1e43      	subs	r3, r0, #1
    1892:	4218      	tst	r0, r3
    1894:	d12f      	bne.n	18f6 <system_gclk_gen_set_config+0x92>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1896:	2802      	cmp	r0, #2
    1898:	d033      	beq.n	1902 <system_gclk_gen_set_config+0x9e>
    189a:	2302      	movs	r3, #2
    189c:	2400      	movs	r4, #0
						mask <<= 1) {
				div2_count++;
    189e:	3401      	adds	r4, #1
						mask <<= 1) {
    18a0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    18a2:	4298      	cmp	r0, r3
    18a4:	d8fb      	bhi.n	189e <system_gclk_gen_set_config+0x3a>
    18a6:	0224      	lsls	r4, r4, #8
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18a8:	2380      	movs	r3, #128	; 0x80
    18aa:	035b      	lsls	r3, r3, #13
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18ac:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18ae:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    18b0:	7a0b      	ldrb	r3, [r1, #8]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d002      	beq.n	18bc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    18b6:	2380      	movs	r3, #128	; 0x80
    18b8:	039b      	lsls	r3, r3, #14
    18ba:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18bc:	4a12      	ldr	r2, [pc, #72]	; (1908 <system_gclk_gen_set_config+0xa4>)
    18be:	7853      	ldrb	r3, [r2, #1]
    18c0:	b25b      	sxtb	r3, r3
    18c2:	2b00      	cmp	r3, #0
    18c4:	dbfb      	blt.n	18be <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    18c6:	4b11      	ldr	r3, [pc, #68]	; (190c <system_gclk_gen_set_config+0xa8>)
    18c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ca:	4b11      	ldr	r3, [pc, #68]	; (1910 <system_gclk_gen_set_config+0xac>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18cc:	4a0e      	ldr	r2, [pc, #56]	; (1908 <system_gclk_gen_set_config+0xa4>)
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ce:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18d0:	7853      	ldrb	r3, [r2, #1]
    18d2:	b25b      	sxtb	r3, r3
    18d4:	2b00      	cmp	r3, #0
    18d6:	dbfb      	blt.n	18d0 <system_gclk_gen_set_config+0x6c>
    18d8:	490b      	ldr	r1, [pc, #44]	; (1908 <system_gclk_gen_set_config+0xa4>)

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    18da:	6094      	str	r4, [r2, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18dc:	784a      	ldrb	r2, [r1, #1]
    18de:	b252      	sxtb	r2, r2
    18e0:	2a00      	cmp	r2, #0
    18e2:	dbfb      	blt.n	18dc <system_gclk_gen_set_config+0x78>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    18e4:	2280      	movs	r2, #128	; 0x80
    18e6:	684b      	ldr	r3, [r1, #4]
    18e8:	0252      	lsls	r2, r2, #9
    18ea:	4013      	ands	r3, r2
    18ec:	432b      	orrs	r3, r5
    18ee:	604b      	str	r3, [r1, #4]
	cpu_irq_leave_critical();
    18f0:	4b08      	ldr	r3, [pc, #32]	; (1914 <system_gclk_gen_set_config+0xb0>)
    18f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18f4:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18f6:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    18f8:	0204      	lsls	r4, r0, #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18fa:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |=
    18fc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18fe:	431d      	orrs	r5, r3
    1900:	e7d6      	b.n	18b0 <system_gclk_gen_set_config+0x4c>
			for (mask = (1UL << 1); mask < config->division_factor;
    1902:	2400      	movs	r4, #0
    1904:	e7d0      	b.n	18a8 <system_gclk_gen_set_config+0x44>
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	40000c00 	.word	0x40000c00
    190c:	00001421 	.word	0x00001421
    1910:	40000c08 	.word	0x40000c08
    1914:	0000145d 	.word	0x0000145d

00001918 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1918:	b510      	push	{r4, lr}
    191a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    191c:	4a0a      	ldr	r2, [pc, #40]	; (1948 <system_gclk_gen_enable+0x30>)
    191e:	7853      	ldrb	r3, [r2, #1]
    1920:	b25b      	sxtb	r3, r3
    1922:	2b00      	cmp	r3, #0
    1924:	dbfb      	blt.n	191e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1926:	4b09      	ldr	r3, [pc, #36]	; (194c <system_gclk_gen_enable+0x34>)
    1928:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    192a:	4b09      	ldr	r3, [pc, #36]	; (1950 <system_gclk_gen_enable+0x38>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    192c:	4a06      	ldr	r2, [pc, #24]	; (1948 <system_gclk_gen_enable+0x30>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    192e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1930:	7853      	ldrb	r3, [r2, #1]
    1932:	b25b      	sxtb	r3, r3
    1934:	2b00      	cmp	r3, #0
    1936:	dbfb      	blt.n	1930 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1938:	2380      	movs	r3, #128	; 0x80
    193a:	6851      	ldr	r1, [r2, #4]
    193c:	025b      	lsls	r3, r3, #9
    193e:	430b      	orrs	r3, r1
    1940:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1942:	4b04      	ldr	r3, [pc, #16]	; (1954 <system_gclk_gen_enable+0x3c>)
    1944:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1946:	bd10      	pop	{r4, pc}
    1948:	40000c00 	.word	0x40000c00
    194c:	00001421 	.word	0x00001421
    1950:	40000c04 	.word	0x40000c04
    1954:	0000145d 	.word	0x0000145d

00001958 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    195c:	4a19      	ldr	r2, [pc, #100]	; (19c4 <system_gclk_gen_get_hz+0x6c>)
    195e:	7853      	ldrb	r3, [r2, #1]
    1960:	b25b      	sxtb	r3, r3
    1962:	2b00      	cmp	r3, #0
    1964:	dbfb      	blt.n	195e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1966:	4b18      	ldr	r3, [pc, #96]	; (19c8 <system_gclk_gen_get_hz+0x70>)
    1968:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    196a:	4b18      	ldr	r3, [pc, #96]	; (19cc <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    196c:	4d15      	ldr	r5, [pc, #84]	; (19c4 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    196e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1970:	786b      	ldrb	r3, [r5, #1]
    1972:	b25b      	sxtb	r3, r3
    1974:	2b00      	cmp	r3, #0
    1976:	dbfb      	blt.n	1970 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1978:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
    197a:	4b15      	ldr	r3, [pc, #84]	; (19d0 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    197c:	04c0      	lsls	r0, r0, #19
    197e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1980:	4798      	blx	r3
    1982:	0006      	movs	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1984:	4b11      	ldr	r3, [pc, #68]	; (19cc <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1986:	4a0f      	ldr	r2, [pc, #60]	; (19c4 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1988:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    198a:	686d      	ldr	r5, [r5, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    198c:	4b11      	ldr	r3, [pc, #68]	; (19d4 <system_gclk_gen_get_hz+0x7c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    198e:	02ed      	lsls	r5, r5, #11
    1990:	0fed      	lsrs	r5, r5, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1992:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1994:	7853      	ldrb	r3, [r2, #1]
    1996:	b25b      	sxtb	r3, r3
    1998:	2b00      	cmp	r3, #0
    199a:	dbfb      	blt.n	1994 <system_gclk_gen_get_hz+0x3c>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    199c:	6891      	ldr	r1, [r2, #8]
	cpu_irq_leave_critical();
    199e:	4b0e      	ldr	r3, [pc, #56]	; (19d8 <system_gclk_gen_get_hz+0x80>)
    19a0:	0209      	lsls	r1, r1, #8
    19a2:	0c0c      	lsrs	r4, r1, #16
    19a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    19a6:	2d00      	cmp	r5, #0
    19a8:	d003      	beq.n	19b2 <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    19aa:	3401      	adds	r4, #1
    19ac:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    19ae:	0030      	movs	r0, r6
    19b0:	bd70      	pop	{r4, r5, r6, pc}
	if (!divsel && divider > 1) {
    19b2:	2c01      	cmp	r4, #1
    19b4:	d9fb      	bls.n	19ae <system_gclk_gen_get_hz+0x56>
		gen_input_hz /= divider;
    19b6:	0030      	movs	r0, r6
    19b8:	0021      	movs	r1, r4
    19ba:	4b08      	ldr	r3, [pc, #32]	; (19dc <system_gclk_gen_get_hz+0x84>)
    19bc:	4798      	blx	r3
    19be:	0006      	movs	r6, r0
    19c0:	e7f5      	b.n	19ae <system_gclk_gen_get_hz+0x56>
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	40000c00 	.word	0x40000c00
    19c8:	00001421 	.word	0x00001421
    19cc:	40000c04 	.word	0x40000c04
    19d0:	00001511 	.word	0x00001511
    19d4:	40000c08 	.word	0x40000c08
    19d8:	0000145d 	.word	0x0000145d
    19dc:	00001ce9 	.word	0x00001ce9

000019e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    19e0:	b510      	push	{r4, lr}
    19e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19e4:	4b06      	ldr	r3, [pc, #24]	; (1a00 <system_gclk_chan_enable+0x20>)
    19e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19e8:	4b06      	ldr	r3, [pc, #24]	; (1a04 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    19ea:	4a07      	ldr	r2, [pc, #28]	; (1a08 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19ec:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    19ee:	2380      	movs	r3, #128	; 0x80
    19f0:	8851      	ldrh	r1, [r2, #2]
    19f2:	01db      	lsls	r3, r3, #7
    19f4:	430b      	orrs	r3, r1
    19f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    19f8:	4b04      	ldr	r3, [pc, #16]	; (1a0c <system_gclk_chan_enable+0x2c>)
    19fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19fc:	bd10      	pop	{r4, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	00001421 	.word	0x00001421
    1a04:	40000c02 	.word	0x40000c02
    1a08:	40000c00 	.word	0x40000c00
    1a0c:	0000145d 	.word	0x0000145d

00001a10 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a10:	b510      	push	{r4, lr}
    1a12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <system_gclk_chan_disable+0x40>)
    1a16:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a18:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <system_gclk_chan_disable+0x44>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a1a:	4a0f      	ldr	r2, [pc, #60]	; (1a58 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a1c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a1e:	8853      	ldrh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1a20:	490e      	ldr	r1, [pc, #56]	; (1a5c <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a22:	051b      	lsls	r3, r3, #20
    1a24:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a26:	8853      	ldrh	r3, [r2, #2]
    1a28:	400b      	ands	r3, r1
    1a2a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a2c:	8853      	ldrh	r3, [r2, #2]
    1a2e:	490c      	ldr	r1, [pc, #48]	; (1a60 <system_gclk_chan_disable+0x50>)
    1a30:	400b      	ands	r3, r1
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a32:	2180      	movs	r1, #128	; 0x80
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a34:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a36:	01c9      	lsls	r1, r1, #7
    1a38:	8853      	ldrh	r3, [r2, #2]
    1a3a:	420b      	tst	r3, r1
    1a3c:	d1fc      	bne.n	1a38 <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a3e:	8851      	ldrh	r1, [r2, #2]
    1a40:	0203      	lsls	r3, r0, #8
    1a42:	4806      	ldr	r0, [pc, #24]	; (1a5c <system_gclk_chan_disable+0x4c>)
    1a44:	4001      	ands	r1, r0
    1a46:	430b      	orrs	r3, r1
    1a48:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a4a:	4b06      	ldr	r3, [pc, #24]	; (1a64 <system_gclk_chan_disable+0x54>)
    1a4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a4e:	bd10      	pop	{r4, pc}
    1a50:	00001421 	.word	0x00001421
    1a54:	40000c02 	.word	0x40000c02
    1a58:	40000c00 	.word	0x40000c00
    1a5c:	fffff0ff 	.word	0xfffff0ff
    1a60:	ffffbfff 	.word	0xffffbfff
    1a64:	0000145d 	.word	0x0000145d

00001a68 <system_gclk_chan_set_config>:
{
    1a68:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a6a:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a6e:	0224      	lsls	r4, r4, #8
    1a70:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a72:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a74:	4b02      	ldr	r3, [pc, #8]	; (1a80 <system_gclk_chan_set_config+0x18>)
    1a76:	b2a4      	uxth	r4, r4
    1a78:	805c      	strh	r4, [r3, #2]
}
    1a7a:	bd10      	pop	{r4, pc}
    1a7c:	00001a11 	.word	0x00001a11
    1a80:	40000c00 	.word	0x40000c00

00001a84 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a84:	b510      	push	{r4, lr}
    1a86:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a88:	4b06      	ldr	r3, [pc, #24]	; (1aa4 <system_gclk_chan_get_hz+0x20>)
    1a8a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a8c:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <system_gclk_chan_get_hz+0x24>)
    1a8e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a90:	4b06      	ldr	r3, [pc, #24]	; (1aac <system_gclk_chan_get_hz+0x28>)
    1a92:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1a94:	4b06      	ldr	r3, [pc, #24]	; (1ab0 <system_gclk_chan_get_hz+0x2c>)
    1a96:	0524      	lsls	r4, r4, #20
    1a98:	0f24      	lsrs	r4, r4, #28
    1a9a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a9c:	0020      	movs	r0, r4
    1a9e:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <system_gclk_chan_get_hz+0x30>)
    1aa0:	4798      	blx	r3
}
    1aa2:	bd10      	pop	{r4, pc}
    1aa4:	00001421 	.word	0x00001421
    1aa8:	40000c02 	.word	0x40000c02
    1aac:	40000c00 	.word	0x40000c00
    1ab0:	0000145d 	.word	0x0000145d
    1ab4:	00001959 	.word	0x00001959

00001ab8 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1ab8:	78d3      	ldrb	r3, [r2, #3]
{
    1aba:	b570      	push	{r4, r5, r6, lr}
	if (!config->powersave) {
    1abc:	2b00      	cmp	r3, #0
    1abe:	d131      	bne.n	1b24 <_system_pinmux_config+0x6c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ac0:	7813      	ldrb	r3, [r2, #0]
    1ac2:	2b80      	cmp	r3, #128	; 0x80
    1ac4:	d047      	beq.n	1b56 <_system_pinmux_config+0x9e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ac6:	2480      	movs	r4, #128	; 0x80
    1ac8:	061b      	lsls	r3, r3, #24
    1aca:	0264      	lsls	r4, r4, #9
    1acc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ace:	7854      	ldrb	r4, [r2, #1]
    1ad0:	2502      	movs	r5, #2
    1ad2:	0026      	movs	r6, r4
    1ad4:	43ae      	bics	r6, r5
    1ad6:	d107      	bne.n	1ae8 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ad8:	7894      	ldrb	r4, [r2, #2]
    1ada:	2c00      	cmp	r4, #0
    1adc:	d137      	bne.n	1b4e <_system_pinmux_config+0x96>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ade:	2480      	movs	r4, #128	; 0x80
    1ae0:	02a4      	lsls	r4, r4, #10
    1ae2:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ae4:	6041      	str	r1, [r0, #4]
    1ae6:	7854      	ldrb	r4, [r2, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ae8:	3c01      	subs	r4, #1
    1aea:	2c01      	cmp	r4, #1
    1aec:	d935      	bls.n	1b5a <_system_pinmux_config+0xa2>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1aee:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1af0:	040d      	lsls	r5, r1, #16
    1af2:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1af4:	05e4      	lsls	r4, r4, #23
    1af6:	432c      	orrs	r4, r5
    1af8:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1afa:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1afc:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1afe:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b00:	0624      	lsls	r4, r4, #24
    1b02:	432c      	orrs	r4, r5
    1b04:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b06:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b08:	78d4      	ldrb	r4, [r2, #3]
    1b0a:	2c00      	cmp	r4, #0
    1b0c:	d109      	bne.n	1b22 <_system_pinmux_config+0x6a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b0e:	035b      	lsls	r3, r3, #13
    1b10:	d503      	bpl.n	1b1a <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b12:	7893      	ldrb	r3, [r2, #2]
    1b14:	2b01      	cmp	r3, #1
    1b16:	d023      	beq.n	1b60 <_system_pinmux_config+0xa8>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1b18:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b1a:	7853      	ldrb	r3, [r2, #1]
    1b1c:	3b01      	subs	r3, #1
    1b1e:	2b01      	cmp	r3, #1
    1b20:	d913      	bls.n	1b4a <_system_pinmux_config+0x92>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1b22:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b24:	23a0      	movs	r3, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b26:	040c      	lsls	r4, r1, #16
    1b28:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b2a:	05db      	lsls	r3, r3, #23
    1b2c:	4323      	orrs	r3, r4
		port->DIRCLR.reg = pin_mask;
    1b2e:	6041      	str	r1, [r0, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b30:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b32:	23d0      	movs	r3, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b34:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b36:	061b      	lsls	r3, r3, #24
    1b38:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b3a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1b3c:	78d3      	ldrb	r3, [r2, #3]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d1ef      	bne.n	1b22 <_system_pinmux_config+0x6a>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b42:	7853      	ldrb	r3, [r2, #1]
    1b44:	3b01      	subs	r3, #1
    1b46:	2b01      	cmp	r3, #1
    1b48:	d8eb      	bhi.n	1b22 <_system_pinmux_config+0x6a>
			port->DIRSET.reg = pin_mask;
    1b4a:	6081      	str	r1, [r0, #8]
}
    1b4c:	e7e9      	b.n	1b22 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b4e:	24c0      	movs	r4, #192	; 0xc0
    1b50:	02e4      	lsls	r4, r4, #11
    1b52:	4323      	orrs	r3, r4
    1b54:	e7c6      	b.n	1ae4 <_system_pinmux_config+0x2c>
	uint32_t pin_cfg = 0;
    1b56:	2300      	movs	r3, #0
    1b58:	e7b9      	b.n	1ace <_system_pinmux_config+0x16>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b5a:	4c02      	ldr	r4, [pc, #8]	; (1b64 <_system_pinmux_config+0xac>)
    1b5c:	4023      	ands	r3, r4
    1b5e:	e7c6      	b.n	1aee <_system_pinmux_config+0x36>
				port->OUTSET.reg = pin_mask;
    1b60:	6181      	str	r1, [r0, #24]
    1b62:	e7da      	b.n	1b1a <_system_pinmux_config+0x62>
    1b64:	fffbffff 	.word	0xfffbffff

00001b68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b68:	000a      	movs	r2, r1
    1b6a:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b6c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b70:	2900      	cmp	r1, #0
    1b72:	d104      	bne.n	1b7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b74:	4906      	ldr	r1, [pc, #24]	; (1b90 <system_pinmux_pin_set_config+0x28>)
    1b76:	0943      	lsrs	r3, r0, #5
    1b78:	468c      	mov	ip, r1
    1b7a:	01db      	lsls	r3, r3, #7
    1b7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b7e:	241f      	movs	r4, #31
    1b80:	2101      	movs	r1, #1
    1b82:	4020      	ands	r0, r4
    1b84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b86:	0018      	movs	r0, r3
    1b88:	4b02      	ldr	r3, [pc, #8]	; (1b94 <system_pinmux_pin_set_config+0x2c>)
    1b8a:	4798      	blx	r3
}
    1b8c:	bd10      	pop	{r4, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	41004400 	.word	0x41004400
    1b94:	00001ab9 	.word	0x00001ab9

00001b98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b98:	4770      	bx	lr
    1b9a:	46c0      	nop			; (mov r8, r8)

00001b9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b9e:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <system_init+0x18>)
    1ba0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1ba2:	4b05      	ldr	r3, [pc, #20]	; (1bb8 <system_init+0x1c>)
    1ba4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <system_init+0x20>)
    1ba8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1baa:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <system_init+0x24>)
    1bac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1bae:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <system_init+0x28>)
    1bb0:	4798      	blx	r3
}
    1bb2:	bd10      	pop	{r4, pc}
    1bb4:	000016d5 	.word	0x000016d5
    1bb8:	0000148d 	.word	0x0000148d
    1bbc:	00001b99 	.word	0x00001b99
    1bc0:	00000115 	.word	0x00000115
    1bc4:	00001b99 	.word	0x00001b99

00001bc8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1bc8:	e7fe      	b.n	1bc8 <Dummy_Handler>
    1bca:	46c0      	nop			; (mov r8, r8)

00001bcc <Reset_Handler>:
        if (pSrc != pDest) {
    1bcc:	4828      	ldr	r0, [pc, #160]	; (1c70 <Reset_Handler+0xa4>)
    1bce:	4929      	ldr	r1, [pc, #164]	; (1c74 <Reset_Handler+0xa8>)
{
    1bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1bd2:	4288      	cmp	r0, r1
    1bd4:	d00d      	beq.n	1bf2 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
    1bd6:	4a28      	ldr	r2, [pc, #160]	; (1c78 <Reset_Handler+0xac>)
    1bd8:	4291      	cmp	r1, r2
    1bda:	d20a      	bcs.n	1bf2 <Reset_Handler+0x26>
    1bdc:	43cb      	mvns	r3, r1
    1bde:	189b      	adds	r3, r3, r2
    1be0:	2200      	movs	r2, #0
    1be2:	089b      	lsrs	r3, r3, #2
    1be4:	3301      	adds	r3, #1
    1be6:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
    1be8:	5884      	ldr	r4, [r0, r2]
    1bea:	508c      	str	r4, [r1, r2]
    1bec:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1bee:	429a      	cmp	r2, r3
    1bf0:	d1fa      	bne.n	1be8 <Reset_Handler+0x1c>
        for (pDest = &_szero; pDest < &_ezero;) {
    1bf2:	4a22      	ldr	r2, [pc, #136]	; (1c7c <Reset_Handler+0xb0>)
    1bf4:	4922      	ldr	r1, [pc, #136]	; (1c80 <Reset_Handler+0xb4>)
    1bf6:	428a      	cmp	r2, r1
    1bf8:	d209      	bcs.n	1c0e <Reset_Handler+0x42>
    1bfa:	43d3      	mvns	r3, r2
    1bfc:	185b      	adds	r3, r3, r1
    1bfe:	2103      	movs	r1, #3
    1c00:	438b      	bics	r3, r1
                *pDest++ = 0;
    1c02:	2100      	movs	r1, #0
    1c04:	3304      	adds	r3, #4
    1c06:	18d3      	adds	r3, r2, r3
    1c08:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1c0a:	429a      	cmp	r2, r3
    1c0c:	d1fc      	bne.n	1c08 <Reset_Handler+0x3c>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c0e:	21ff      	movs	r1, #255	; 0xff
    1c10:	4b1c      	ldr	r3, [pc, #112]	; (1c84 <Reset_Handler+0xb8>)
    1c12:	4a1d      	ldr	r2, [pc, #116]	; (1c88 <Reset_Handler+0xbc>)
    1c14:	438b      	bics	r3, r1
    1c16:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c18:	2390      	movs	r3, #144	; 0x90
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c1a:	2503      	movs	r5, #3
    1c1c:	2402      	movs	r4, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c1e:	270c      	movs	r7, #12
    1c20:	2608      	movs	r6, #8
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c22:	4a1a      	ldr	r2, [pc, #104]	; (1c8c <Reset_Handler+0xc0>)
    1c24:	39fd      	subs	r1, #253	; 0xfd
    1c26:	005b      	lsls	r3, r3, #1
    1c28:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c2a:	4a19      	ldr	r2, [pc, #100]	; (1c90 <Reset_Handler+0xc4>)
    1c2c:	78d3      	ldrb	r3, [r2, #3]
    1c2e:	43ab      	bics	r3, r5
    1c30:	4323      	orrs	r3, r4
    1c32:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c34:	78d3      	ldrb	r3, [r2, #3]
    1c36:	43bb      	bics	r3, r7
    1c38:	4333      	orrs	r3, r6
    1c3a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c3c:	2230      	movs	r2, #48	; 0x30
    1c3e:	4b15      	ldr	r3, [pc, #84]	; (1c94 <Reset_Handler+0xc8>)
    1c40:	7b98      	ldrb	r0, [r3, #14]
    1c42:	4390      	bics	r0, r2
    1c44:	2220      	movs	r2, #32
    1c46:	4310      	orrs	r0, r2
    1c48:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c4a:	7b99      	ldrb	r1, [r3, #14]
    1c4c:	43b9      	bics	r1, r7
    1c4e:	4331      	orrs	r1, r6
    1c50:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c52:	2180      	movs	r1, #128	; 0x80
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c54:	7b9a      	ldrb	r2, [r3, #14]
    1c56:	43aa      	bics	r2, r5
    1c58:	4322      	orrs	r2, r4
    1c5a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c5c:	4a0e      	ldr	r2, [pc, #56]	; (1c98 <Reset_Handler+0xcc>)
    1c5e:	6853      	ldr	r3, [r2, #4]
    1c60:	430b      	orrs	r3, r1
    1c62:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c64:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <Reset_Handler+0xd0>)
    1c66:	4798      	blx	r3
        main();
    1c68:	4b0d      	ldr	r3, [pc, #52]	; (1ca0 <Reset_Handler+0xd4>)
    1c6a:	4798      	blx	r3
    1c6c:	e7fe      	b.n	1c6c <Reset_Handler+0xa0>
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	00002854 	.word	0x00002854
    1c74:	20000000 	.word	0x20000000
    1c78:	20000068 	.word	0x20000068
    1c7c:	20000068 	.word	0x20000068
    1c80:	200002b4 	.word	0x200002b4
    1c84:	00000000 	.word	0x00000000
    1c88:	e000ed00 	.word	0xe000ed00
    1c8c:	41007000 	.word	0x41007000
    1c90:	41005000 	.word	0x41005000
    1c94:	41004800 	.word	0x41004800
    1c98:	41004000 	.word	0x41004000
    1c9c:	00001e95 	.word	0x00001e95
    1ca0:	00001cc1 	.word	0x00001cc1

00001ca4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1ca4:	4a04      	ldr	r2, [pc, #16]	; (1cb8 <_sbrk+0x14>)
    1ca6:	6813      	ldr	r3, [r2, #0]
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d003      	beq.n	1cb4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    1cac:	1818      	adds	r0, r3, r0
    1cae:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1cb0:	0018      	movs	r0, r3
    1cb2:	4770      	bx	lr
    1cb4:	4b01      	ldr	r3, [pc, #4]	; (1cbc <_sbrk+0x18>)
    1cb6:	e7f9      	b.n	1cac <_sbrk+0x8>
    1cb8:	200000e0 	.word	0x200000e0
    1cbc:	200022b8 	.word	0x200022b8

00001cc0 <main>:
#include <asf.h>
#include "main21.h"
#include "os_usart.h"
int main (void)
{
    1cc0:	b510      	push	{r4, lr}
	system_init();
    1cc2:	4b04      	ldr	r3, [pc, #16]	; (1cd4 <main+0x14>)
    1cc4:	4798      	blx	r3
	}
}

void owlsat_init(void)
{
	os_usart_init();
    1cc6:	4b04      	ldr	r3, [pc, #16]	; (1cd8 <main+0x18>)
    1cc8:	4798      	blx	r3
	DEBUG("Hello World\n");
    1cca:	4904      	ldr	r1, [pc, #16]	; (1cdc <main+0x1c>)
    1ccc:	4804      	ldr	r0, [pc, #16]	; (1ce0 <main+0x20>)
    1cce:	4b05      	ldr	r3, [pc, #20]	; (1ce4 <main+0x24>)
    1cd0:	4798      	blx	r3
    1cd2:	e7fe      	b.n	1cd2 <main+0x12>
    1cd4:	00001b9d 	.word	0x00001b9d
    1cd8:	00000781 	.word	0x00000781
    1cdc:	00002790 	.word	0x00002790
    1ce0:	2000012c 	.word	0x2000012c
    1ce4:	00000841 	.word	0x00000841

00001ce8 <__udivsi3>:
    1ce8:	2200      	movs	r2, #0
    1cea:	0843      	lsrs	r3, r0, #1
    1cec:	428b      	cmp	r3, r1
    1cee:	d374      	bcc.n	1dda <__udivsi3+0xf2>
    1cf0:	0903      	lsrs	r3, r0, #4
    1cf2:	428b      	cmp	r3, r1
    1cf4:	d35f      	bcc.n	1db6 <__udivsi3+0xce>
    1cf6:	0a03      	lsrs	r3, r0, #8
    1cf8:	428b      	cmp	r3, r1
    1cfa:	d344      	bcc.n	1d86 <__udivsi3+0x9e>
    1cfc:	0b03      	lsrs	r3, r0, #12
    1cfe:	428b      	cmp	r3, r1
    1d00:	d328      	bcc.n	1d54 <__udivsi3+0x6c>
    1d02:	0c03      	lsrs	r3, r0, #16
    1d04:	428b      	cmp	r3, r1
    1d06:	d30d      	bcc.n	1d24 <__udivsi3+0x3c>
    1d08:	22ff      	movs	r2, #255	; 0xff
    1d0a:	0209      	lsls	r1, r1, #8
    1d0c:	ba12      	rev	r2, r2
    1d0e:	0c03      	lsrs	r3, r0, #16
    1d10:	428b      	cmp	r3, r1
    1d12:	d302      	bcc.n	1d1a <__udivsi3+0x32>
    1d14:	1212      	asrs	r2, r2, #8
    1d16:	0209      	lsls	r1, r1, #8
    1d18:	d065      	beq.n	1de6 <__udivsi3+0xfe>
    1d1a:	0b03      	lsrs	r3, r0, #12
    1d1c:	428b      	cmp	r3, r1
    1d1e:	d319      	bcc.n	1d54 <__udivsi3+0x6c>
    1d20:	e000      	b.n	1d24 <__udivsi3+0x3c>
    1d22:	0a09      	lsrs	r1, r1, #8
    1d24:	0bc3      	lsrs	r3, r0, #15
    1d26:	428b      	cmp	r3, r1
    1d28:	d301      	bcc.n	1d2e <__udivsi3+0x46>
    1d2a:	03cb      	lsls	r3, r1, #15
    1d2c:	1ac0      	subs	r0, r0, r3
    1d2e:	4152      	adcs	r2, r2
    1d30:	0b83      	lsrs	r3, r0, #14
    1d32:	428b      	cmp	r3, r1
    1d34:	d301      	bcc.n	1d3a <__udivsi3+0x52>
    1d36:	038b      	lsls	r3, r1, #14
    1d38:	1ac0      	subs	r0, r0, r3
    1d3a:	4152      	adcs	r2, r2
    1d3c:	0b43      	lsrs	r3, r0, #13
    1d3e:	428b      	cmp	r3, r1
    1d40:	d301      	bcc.n	1d46 <__udivsi3+0x5e>
    1d42:	034b      	lsls	r3, r1, #13
    1d44:	1ac0      	subs	r0, r0, r3
    1d46:	4152      	adcs	r2, r2
    1d48:	0b03      	lsrs	r3, r0, #12
    1d4a:	428b      	cmp	r3, r1
    1d4c:	d301      	bcc.n	1d52 <__udivsi3+0x6a>
    1d4e:	030b      	lsls	r3, r1, #12
    1d50:	1ac0      	subs	r0, r0, r3
    1d52:	4152      	adcs	r2, r2
    1d54:	0ac3      	lsrs	r3, r0, #11
    1d56:	428b      	cmp	r3, r1
    1d58:	d301      	bcc.n	1d5e <__udivsi3+0x76>
    1d5a:	02cb      	lsls	r3, r1, #11
    1d5c:	1ac0      	subs	r0, r0, r3
    1d5e:	4152      	adcs	r2, r2
    1d60:	0a83      	lsrs	r3, r0, #10
    1d62:	428b      	cmp	r3, r1
    1d64:	d301      	bcc.n	1d6a <__udivsi3+0x82>
    1d66:	028b      	lsls	r3, r1, #10
    1d68:	1ac0      	subs	r0, r0, r3
    1d6a:	4152      	adcs	r2, r2
    1d6c:	0a43      	lsrs	r3, r0, #9
    1d6e:	428b      	cmp	r3, r1
    1d70:	d301      	bcc.n	1d76 <__udivsi3+0x8e>
    1d72:	024b      	lsls	r3, r1, #9
    1d74:	1ac0      	subs	r0, r0, r3
    1d76:	4152      	adcs	r2, r2
    1d78:	0a03      	lsrs	r3, r0, #8
    1d7a:	428b      	cmp	r3, r1
    1d7c:	d301      	bcc.n	1d82 <__udivsi3+0x9a>
    1d7e:	020b      	lsls	r3, r1, #8
    1d80:	1ac0      	subs	r0, r0, r3
    1d82:	4152      	adcs	r2, r2
    1d84:	d2cd      	bcs.n	1d22 <__udivsi3+0x3a>
    1d86:	09c3      	lsrs	r3, r0, #7
    1d88:	428b      	cmp	r3, r1
    1d8a:	d301      	bcc.n	1d90 <__udivsi3+0xa8>
    1d8c:	01cb      	lsls	r3, r1, #7
    1d8e:	1ac0      	subs	r0, r0, r3
    1d90:	4152      	adcs	r2, r2
    1d92:	0983      	lsrs	r3, r0, #6
    1d94:	428b      	cmp	r3, r1
    1d96:	d301      	bcc.n	1d9c <__udivsi3+0xb4>
    1d98:	018b      	lsls	r3, r1, #6
    1d9a:	1ac0      	subs	r0, r0, r3
    1d9c:	4152      	adcs	r2, r2
    1d9e:	0943      	lsrs	r3, r0, #5
    1da0:	428b      	cmp	r3, r1
    1da2:	d301      	bcc.n	1da8 <__udivsi3+0xc0>
    1da4:	014b      	lsls	r3, r1, #5
    1da6:	1ac0      	subs	r0, r0, r3
    1da8:	4152      	adcs	r2, r2
    1daa:	0903      	lsrs	r3, r0, #4
    1dac:	428b      	cmp	r3, r1
    1dae:	d301      	bcc.n	1db4 <__udivsi3+0xcc>
    1db0:	010b      	lsls	r3, r1, #4
    1db2:	1ac0      	subs	r0, r0, r3
    1db4:	4152      	adcs	r2, r2
    1db6:	08c3      	lsrs	r3, r0, #3
    1db8:	428b      	cmp	r3, r1
    1dba:	d301      	bcc.n	1dc0 <__udivsi3+0xd8>
    1dbc:	00cb      	lsls	r3, r1, #3
    1dbe:	1ac0      	subs	r0, r0, r3
    1dc0:	4152      	adcs	r2, r2
    1dc2:	0883      	lsrs	r3, r0, #2
    1dc4:	428b      	cmp	r3, r1
    1dc6:	d301      	bcc.n	1dcc <__udivsi3+0xe4>
    1dc8:	008b      	lsls	r3, r1, #2
    1dca:	1ac0      	subs	r0, r0, r3
    1dcc:	4152      	adcs	r2, r2
    1dce:	0843      	lsrs	r3, r0, #1
    1dd0:	428b      	cmp	r3, r1
    1dd2:	d301      	bcc.n	1dd8 <__udivsi3+0xf0>
    1dd4:	004b      	lsls	r3, r1, #1
    1dd6:	1ac0      	subs	r0, r0, r3
    1dd8:	4152      	adcs	r2, r2
    1dda:	1a41      	subs	r1, r0, r1
    1ddc:	d200      	bcs.n	1de0 <__udivsi3+0xf8>
    1dde:	4601      	mov	r1, r0
    1de0:	4152      	adcs	r2, r2
    1de2:	4610      	mov	r0, r2
    1de4:	4770      	bx	lr
    1de6:	e7ff      	b.n	1de8 <__udivsi3+0x100>
    1de8:	b501      	push	{r0, lr}
    1dea:	2000      	movs	r0, #0
    1dec:	f000 f806 	bl	1dfc <__aeabi_idiv0>
    1df0:	bd02      	pop	{r1, pc}
    1df2:	46c0      	nop			; (mov r8, r8)

00001df4 <__aeabi_uidivmod>:
    1df4:	2900      	cmp	r1, #0
    1df6:	d0f7      	beq.n	1de8 <__udivsi3+0x100>
    1df8:	e776      	b.n	1ce8 <__udivsi3>
    1dfa:	4770      	bx	lr

00001dfc <__aeabi_idiv0>:
    1dfc:	4770      	bx	lr
    1dfe:	46c0      	nop			; (mov r8, r8)

00001e00 <__ctzsi2>:
    1e00:	4241      	negs	r1, r0
    1e02:	4008      	ands	r0, r1
    1e04:	211c      	movs	r1, #28
    1e06:	2301      	movs	r3, #1
    1e08:	041b      	lsls	r3, r3, #16
    1e0a:	4298      	cmp	r0, r3
    1e0c:	d301      	bcc.n	1e12 <__ctzsi2+0x12>
    1e0e:	0c00      	lsrs	r0, r0, #16
    1e10:	3910      	subs	r1, #16
    1e12:	0a1b      	lsrs	r3, r3, #8
    1e14:	4298      	cmp	r0, r3
    1e16:	d301      	bcc.n	1e1c <__ctzsi2+0x1c>
    1e18:	0a00      	lsrs	r0, r0, #8
    1e1a:	3908      	subs	r1, #8
    1e1c:	091b      	lsrs	r3, r3, #4
    1e1e:	4298      	cmp	r0, r3
    1e20:	d301      	bcc.n	1e26 <__ctzsi2+0x26>
    1e22:	0900      	lsrs	r0, r0, #4
    1e24:	3904      	subs	r1, #4
    1e26:	a202      	add	r2, pc, #8	; (adr r2, 1e30 <__ctzsi2+0x30>)
    1e28:	5c10      	ldrb	r0, [r2, r0]
    1e2a:	1a40      	subs	r0, r0, r1
    1e2c:	4770      	bx	lr
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	1d1d1c1b 	.word	0x1d1d1c1b
    1e34:	1e1e1e1e 	.word	0x1e1e1e1e
    1e38:	1f1f1f1f 	.word	0x1f1f1f1f
    1e3c:	1f1f1f1f 	.word	0x1f1f1f1f

00001e40 <__aeabi_lmul>:
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e42:	46ce      	mov	lr, r9
    1e44:	4647      	mov	r7, r8
    1e46:	0415      	lsls	r5, r2, #16
    1e48:	0c2d      	lsrs	r5, r5, #16
    1e4a:	002e      	movs	r6, r5
    1e4c:	b580      	push	{r7, lr}
    1e4e:	0407      	lsls	r7, r0, #16
    1e50:	0c14      	lsrs	r4, r2, #16
    1e52:	0c3f      	lsrs	r7, r7, #16
    1e54:	4699      	mov	r9, r3
    1e56:	0c03      	lsrs	r3, r0, #16
    1e58:	437e      	muls	r6, r7
    1e5a:	435d      	muls	r5, r3
    1e5c:	4367      	muls	r7, r4
    1e5e:	4363      	muls	r3, r4
    1e60:	197f      	adds	r7, r7, r5
    1e62:	0c34      	lsrs	r4, r6, #16
    1e64:	19e4      	adds	r4, r4, r7
    1e66:	469c      	mov	ip, r3
    1e68:	42a5      	cmp	r5, r4
    1e6a:	d903      	bls.n	1e74 <__aeabi_lmul+0x34>
    1e6c:	2380      	movs	r3, #128	; 0x80
    1e6e:	025b      	lsls	r3, r3, #9
    1e70:	4698      	mov	r8, r3
    1e72:	44c4      	add	ip, r8
    1e74:	464b      	mov	r3, r9
    1e76:	4351      	muls	r1, r2
    1e78:	4343      	muls	r3, r0
    1e7a:	0436      	lsls	r6, r6, #16
    1e7c:	0c36      	lsrs	r6, r6, #16
    1e7e:	0c25      	lsrs	r5, r4, #16
    1e80:	0424      	lsls	r4, r4, #16
    1e82:	4465      	add	r5, ip
    1e84:	19a4      	adds	r4, r4, r6
    1e86:	1859      	adds	r1, r3, r1
    1e88:	1949      	adds	r1, r1, r5
    1e8a:	0020      	movs	r0, r4
    1e8c:	bc0c      	pop	{r2, r3}
    1e8e:	4690      	mov	r8, r2
    1e90:	4699      	mov	r9, r3
    1e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e94 <__libc_init_array>:
    1e94:	b570      	push	{r4, r5, r6, lr}
    1e96:	2600      	movs	r6, #0
    1e98:	4d0c      	ldr	r5, [pc, #48]	; (1ecc <__libc_init_array+0x38>)
    1e9a:	4c0d      	ldr	r4, [pc, #52]	; (1ed0 <__libc_init_array+0x3c>)
    1e9c:	1b64      	subs	r4, r4, r5
    1e9e:	10a4      	asrs	r4, r4, #2
    1ea0:	42a6      	cmp	r6, r4
    1ea2:	d109      	bne.n	1eb8 <__libc_init_array+0x24>
    1ea4:	2600      	movs	r6, #0
    1ea6:	f000 fcc5 	bl	2834 <_init>
    1eaa:	4d0a      	ldr	r5, [pc, #40]	; (1ed4 <__libc_init_array+0x40>)
    1eac:	4c0a      	ldr	r4, [pc, #40]	; (1ed8 <__libc_init_array+0x44>)
    1eae:	1b64      	subs	r4, r4, r5
    1eb0:	10a4      	asrs	r4, r4, #2
    1eb2:	42a6      	cmp	r6, r4
    1eb4:	d105      	bne.n	1ec2 <__libc_init_array+0x2e>
    1eb6:	bd70      	pop	{r4, r5, r6, pc}
    1eb8:	00b3      	lsls	r3, r6, #2
    1eba:	58eb      	ldr	r3, [r5, r3]
    1ebc:	4798      	blx	r3
    1ebe:	3601      	adds	r6, #1
    1ec0:	e7ee      	b.n	1ea0 <__libc_init_array+0xc>
    1ec2:	00b3      	lsls	r3, r6, #2
    1ec4:	58eb      	ldr	r3, [r5, r3]
    1ec6:	4798      	blx	r3
    1ec8:	3601      	adds	r6, #1
    1eca:	e7f2      	b.n	1eb2 <__libc_init_array+0x1e>
    1ecc:	00002840 	.word	0x00002840
    1ed0:	00002840 	.word	0x00002840
    1ed4:	00002840 	.word	0x00002840
    1ed8:	00002844 	.word	0x00002844

00001edc <memcpy>:
    1edc:	2300      	movs	r3, #0
    1ede:	b510      	push	{r4, lr}
    1ee0:	429a      	cmp	r2, r3
    1ee2:	d100      	bne.n	1ee6 <memcpy+0xa>
    1ee4:	bd10      	pop	{r4, pc}
    1ee6:	5ccc      	ldrb	r4, [r1, r3]
    1ee8:	54c4      	strb	r4, [r0, r3]
    1eea:	3301      	adds	r3, #1
    1eec:	e7f8      	b.n	1ee0 <memcpy+0x4>

00001eee <memset>:
    1eee:	0003      	movs	r3, r0
    1ef0:	1882      	adds	r2, r0, r2
    1ef2:	4293      	cmp	r3, r2
    1ef4:	d100      	bne.n	1ef8 <memset+0xa>
    1ef6:	4770      	bx	lr
    1ef8:	7019      	strb	r1, [r3, #0]
    1efa:	3301      	adds	r3, #1
    1efc:	e7f9      	b.n	1ef2 <memset+0x4>

00001efe <strlen>:
    1efe:	2300      	movs	r3, #0
    1f00:	5cc2      	ldrb	r2, [r0, r3]
    1f02:	3301      	adds	r3, #1
    1f04:	2a00      	cmp	r2, #0
    1f06:	d1fb      	bne.n	1f00 <strlen+0x2>
    1f08:	1e58      	subs	r0, r3, #1
    1f0a:	4770      	bx	lr

00001f0c <_vsiprintf_r>:
    1f0c:	b530      	push	{r4, r5, lr}
    1f0e:	b09b      	sub	sp, #108	; 0x6c
    1f10:	9100      	str	r1, [sp, #0]
    1f12:	9104      	str	r1, [sp, #16]
    1f14:	4908      	ldr	r1, [pc, #32]	; (1f38 <_vsiprintf_r+0x2c>)
    1f16:	466d      	mov	r5, sp
    1f18:	9102      	str	r1, [sp, #8]
    1f1a:	9105      	str	r1, [sp, #20]
    1f1c:	2101      	movs	r1, #1
    1f1e:	2482      	movs	r4, #130	; 0x82
    1f20:	4249      	negs	r1, r1
    1f22:	81e9      	strh	r1, [r5, #14]
    1f24:	00a4      	lsls	r4, r4, #2
    1f26:	4669      	mov	r1, sp
    1f28:	81ac      	strh	r4, [r5, #12]
    1f2a:	f000 f91d 	bl	2168 <_svfiprintf_r>
    1f2e:	2300      	movs	r3, #0
    1f30:	9a00      	ldr	r2, [sp, #0]
    1f32:	7013      	strb	r3, [r2, #0]
    1f34:	b01b      	add	sp, #108	; 0x6c
    1f36:	bd30      	pop	{r4, r5, pc}
    1f38:	7fffffff 	.word	0x7fffffff

00001f3c <vsiprintf>:
    1f3c:	b510      	push	{r4, lr}
    1f3e:	0013      	movs	r3, r2
    1f40:	000a      	movs	r2, r1
    1f42:	0001      	movs	r1, r0
    1f44:	4802      	ldr	r0, [pc, #8]	; (1f50 <vsiprintf+0x14>)
    1f46:	6800      	ldr	r0, [r0, #0]
    1f48:	f7ff ffe0 	bl	1f0c <_vsiprintf_r>
    1f4c:	bd10      	pop	{r4, pc}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	20000004 	.word	0x20000004

00001f54 <_free_r>:
    1f54:	b570      	push	{r4, r5, r6, lr}
    1f56:	0005      	movs	r5, r0
    1f58:	2900      	cmp	r1, #0
    1f5a:	d010      	beq.n	1f7e <_free_r+0x2a>
    1f5c:	1f0c      	subs	r4, r1, #4
    1f5e:	6823      	ldr	r3, [r4, #0]
    1f60:	2b00      	cmp	r3, #0
    1f62:	da00      	bge.n	1f66 <_free_r+0x12>
    1f64:	18e4      	adds	r4, r4, r3
    1f66:	0028      	movs	r0, r5
    1f68:	f000 fbb9 	bl	26de <__malloc_lock>
    1f6c:	4a1d      	ldr	r2, [pc, #116]	; (1fe4 <_free_r+0x90>)
    1f6e:	6813      	ldr	r3, [r2, #0]
    1f70:	2b00      	cmp	r3, #0
    1f72:	d105      	bne.n	1f80 <_free_r+0x2c>
    1f74:	6063      	str	r3, [r4, #4]
    1f76:	6014      	str	r4, [r2, #0]
    1f78:	0028      	movs	r0, r5
    1f7a:	f000 fbb1 	bl	26e0 <__malloc_unlock>
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
    1f80:	42a3      	cmp	r3, r4
    1f82:	d909      	bls.n	1f98 <_free_r+0x44>
    1f84:	6821      	ldr	r1, [r4, #0]
    1f86:	1860      	adds	r0, r4, r1
    1f88:	4283      	cmp	r3, r0
    1f8a:	d1f3      	bne.n	1f74 <_free_r+0x20>
    1f8c:	6818      	ldr	r0, [r3, #0]
    1f8e:	685b      	ldr	r3, [r3, #4]
    1f90:	1841      	adds	r1, r0, r1
    1f92:	6021      	str	r1, [r4, #0]
    1f94:	e7ee      	b.n	1f74 <_free_r+0x20>
    1f96:	0013      	movs	r3, r2
    1f98:	685a      	ldr	r2, [r3, #4]
    1f9a:	2a00      	cmp	r2, #0
    1f9c:	d001      	beq.n	1fa2 <_free_r+0x4e>
    1f9e:	42a2      	cmp	r2, r4
    1fa0:	d9f9      	bls.n	1f96 <_free_r+0x42>
    1fa2:	6819      	ldr	r1, [r3, #0]
    1fa4:	1858      	adds	r0, r3, r1
    1fa6:	42a0      	cmp	r0, r4
    1fa8:	d10b      	bne.n	1fc2 <_free_r+0x6e>
    1faa:	6820      	ldr	r0, [r4, #0]
    1fac:	1809      	adds	r1, r1, r0
    1fae:	1858      	adds	r0, r3, r1
    1fb0:	6019      	str	r1, [r3, #0]
    1fb2:	4282      	cmp	r2, r0
    1fb4:	d1e0      	bne.n	1f78 <_free_r+0x24>
    1fb6:	6810      	ldr	r0, [r2, #0]
    1fb8:	6852      	ldr	r2, [r2, #4]
    1fba:	1841      	adds	r1, r0, r1
    1fbc:	6019      	str	r1, [r3, #0]
    1fbe:	605a      	str	r2, [r3, #4]
    1fc0:	e7da      	b.n	1f78 <_free_r+0x24>
    1fc2:	42a0      	cmp	r0, r4
    1fc4:	d902      	bls.n	1fcc <_free_r+0x78>
    1fc6:	230c      	movs	r3, #12
    1fc8:	602b      	str	r3, [r5, #0]
    1fca:	e7d5      	b.n	1f78 <_free_r+0x24>
    1fcc:	6821      	ldr	r1, [r4, #0]
    1fce:	1860      	adds	r0, r4, r1
    1fd0:	4282      	cmp	r2, r0
    1fd2:	d103      	bne.n	1fdc <_free_r+0x88>
    1fd4:	6810      	ldr	r0, [r2, #0]
    1fd6:	6852      	ldr	r2, [r2, #4]
    1fd8:	1841      	adds	r1, r0, r1
    1fda:	6021      	str	r1, [r4, #0]
    1fdc:	6062      	str	r2, [r4, #4]
    1fde:	605c      	str	r4, [r3, #4]
    1fe0:	e7ca      	b.n	1f78 <_free_r+0x24>
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	200000e4 	.word	0x200000e4

00001fe8 <_malloc_r>:
    1fe8:	2303      	movs	r3, #3
    1fea:	b570      	push	{r4, r5, r6, lr}
    1fec:	1ccd      	adds	r5, r1, #3
    1fee:	439d      	bics	r5, r3
    1ff0:	3508      	adds	r5, #8
    1ff2:	0006      	movs	r6, r0
    1ff4:	2d0c      	cmp	r5, #12
    1ff6:	d21e      	bcs.n	2036 <STACK_SIZE+0x36>
    1ff8:	250c      	movs	r5, #12
    1ffa:	42a9      	cmp	r1, r5
    1ffc:	d81d      	bhi.n	203a <STACK_SIZE+0x3a>
    1ffe:	0030      	movs	r0, r6
    2000:	f000 fb6d 	bl	26de <__malloc_lock>
    2004:	4a25      	ldr	r2, [pc, #148]	; (209c <STACK_SIZE+0x9c>)
    2006:	6814      	ldr	r4, [r2, #0]
    2008:	0021      	movs	r1, r4
    200a:	2900      	cmp	r1, #0
    200c:	d119      	bne.n	2042 <STACK_SIZE+0x42>
    200e:	4c24      	ldr	r4, [pc, #144]	; (20a0 <STACK_SIZE+0xa0>)
    2010:	6823      	ldr	r3, [r4, #0]
    2012:	2b00      	cmp	r3, #0
    2014:	d103      	bne.n	201e <STACK_SIZE+0x1e>
    2016:	0030      	movs	r0, r6
    2018:	f000 fb32 	bl	2680 <_sbrk_r>
    201c:	6020      	str	r0, [r4, #0]
    201e:	0029      	movs	r1, r5
    2020:	0030      	movs	r0, r6
    2022:	f000 fb2d 	bl	2680 <_sbrk_r>
    2026:	1c43      	adds	r3, r0, #1
    2028:	d12c      	bne.n	2084 <STACK_SIZE+0x84>
    202a:	230c      	movs	r3, #12
    202c:	0030      	movs	r0, r6
    202e:	6033      	str	r3, [r6, #0]
    2030:	f000 fb56 	bl	26e0 <__malloc_unlock>
    2034:	e003      	b.n	203e <STACK_SIZE+0x3e>
    2036:	2d00      	cmp	r5, #0
    2038:	dadf      	bge.n	1ffa <_malloc_r+0x12>
    203a:	230c      	movs	r3, #12
    203c:	6033      	str	r3, [r6, #0]
    203e:	2000      	movs	r0, #0
    2040:	bd70      	pop	{r4, r5, r6, pc}
    2042:	680b      	ldr	r3, [r1, #0]
    2044:	1b5b      	subs	r3, r3, r5
    2046:	d41a      	bmi.n	207e <STACK_SIZE+0x7e>
    2048:	2b0b      	cmp	r3, #11
    204a:	d903      	bls.n	2054 <STACK_SIZE+0x54>
    204c:	600b      	str	r3, [r1, #0]
    204e:	18cc      	adds	r4, r1, r3
    2050:	6025      	str	r5, [r4, #0]
    2052:	e003      	b.n	205c <STACK_SIZE+0x5c>
    2054:	428c      	cmp	r4, r1
    2056:	d10e      	bne.n	2076 <STACK_SIZE+0x76>
    2058:	6863      	ldr	r3, [r4, #4]
    205a:	6013      	str	r3, [r2, #0]
    205c:	0030      	movs	r0, r6
    205e:	f000 fb3f 	bl	26e0 <__malloc_unlock>
    2062:	0020      	movs	r0, r4
    2064:	2207      	movs	r2, #7
    2066:	300b      	adds	r0, #11
    2068:	1d23      	adds	r3, r4, #4
    206a:	4390      	bics	r0, r2
    206c:	1ac3      	subs	r3, r0, r3
    206e:	d0e7      	beq.n	2040 <STACK_SIZE+0x40>
    2070:	425a      	negs	r2, r3
    2072:	50e2      	str	r2, [r4, r3]
    2074:	e7e4      	b.n	2040 <STACK_SIZE+0x40>
    2076:	684b      	ldr	r3, [r1, #4]
    2078:	6063      	str	r3, [r4, #4]
    207a:	000c      	movs	r4, r1
    207c:	e7ee      	b.n	205c <STACK_SIZE+0x5c>
    207e:	000c      	movs	r4, r1
    2080:	6849      	ldr	r1, [r1, #4]
    2082:	e7c2      	b.n	200a <STACK_SIZE+0xa>
    2084:	2303      	movs	r3, #3
    2086:	1cc4      	adds	r4, r0, #3
    2088:	439c      	bics	r4, r3
    208a:	42a0      	cmp	r0, r4
    208c:	d0e0      	beq.n	2050 <STACK_SIZE+0x50>
    208e:	1a21      	subs	r1, r4, r0
    2090:	0030      	movs	r0, r6
    2092:	f000 faf5 	bl	2680 <_sbrk_r>
    2096:	1c43      	adds	r3, r0, #1
    2098:	d1da      	bne.n	2050 <STACK_SIZE+0x50>
    209a:	e7c6      	b.n	202a <STACK_SIZE+0x2a>
    209c:	200000e4 	.word	0x200000e4
    20a0:	200000e8 	.word	0x200000e8

000020a4 <__ssputs_r>:
    20a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a6:	688e      	ldr	r6, [r1, #8]
    20a8:	b085      	sub	sp, #20
    20aa:	0007      	movs	r7, r0
    20ac:	000c      	movs	r4, r1
    20ae:	9203      	str	r2, [sp, #12]
    20b0:	9301      	str	r3, [sp, #4]
    20b2:	429e      	cmp	r6, r3
    20b4:	d839      	bhi.n	212a <__ssputs_r+0x86>
    20b6:	2390      	movs	r3, #144	; 0x90
    20b8:	898a      	ldrh	r2, [r1, #12]
    20ba:	00db      	lsls	r3, r3, #3
    20bc:	421a      	tst	r2, r3
    20be:	d034      	beq.n	212a <__ssputs_r+0x86>
    20c0:	2503      	movs	r5, #3
    20c2:	6909      	ldr	r1, [r1, #16]
    20c4:	6823      	ldr	r3, [r4, #0]
    20c6:	1a5b      	subs	r3, r3, r1
    20c8:	9302      	str	r3, [sp, #8]
    20ca:	6963      	ldr	r3, [r4, #20]
    20cc:	9802      	ldr	r0, [sp, #8]
    20ce:	435d      	muls	r5, r3
    20d0:	0feb      	lsrs	r3, r5, #31
    20d2:	195d      	adds	r5, r3, r5
    20d4:	9b01      	ldr	r3, [sp, #4]
    20d6:	106d      	asrs	r5, r5, #1
    20d8:	3301      	adds	r3, #1
    20da:	181b      	adds	r3, r3, r0
    20dc:	42ab      	cmp	r3, r5
    20de:	d900      	bls.n	20e2 <__ssputs_r+0x3e>
    20e0:	001d      	movs	r5, r3
    20e2:	0553      	lsls	r3, r2, #21
    20e4:	d532      	bpl.n	214c <__ssputs_r+0xa8>
    20e6:	0029      	movs	r1, r5
    20e8:	0038      	movs	r0, r7
    20ea:	f7ff ff7d 	bl	1fe8 <_malloc_r>
    20ee:	1e06      	subs	r6, r0, #0
    20f0:	d109      	bne.n	2106 <__ssputs_r+0x62>
    20f2:	230c      	movs	r3, #12
    20f4:	603b      	str	r3, [r7, #0]
    20f6:	2340      	movs	r3, #64	; 0x40
    20f8:	2001      	movs	r0, #1
    20fa:	89a2      	ldrh	r2, [r4, #12]
    20fc:	4240      	negs	r0, r0
    20fe:	4313      	orrs	r3, r2
    2100:	81a3      	strh	r3, [r4, #12]
    2102:	b005      	add	sp, #20
    2104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2106:	9a02      	ldr	r2, [sp, #8]
    2108:	6921      	ldr	r1, [r4, #16]
    210a:	f7ff fee7 	bl	1edc <memcpy>
    210e:	89a3      	ldrh	r3, [r4, #12]
    2110:	4a14      	ldr	r2, [pc, #80]	; (2164 <__ssputs_r+0xc0>)
    2112:	401a      	ands	r2, r3
    2114:	2380      	movs	r3, #128	; 0x80
    2116:	4313      	orrs	r3, r2
    2118:	81a3      	strh	r3, [r4, #12]
    211a:	9b02      	ldr	r3, [sp, #8]
    211c:	6126      	str	r6, [r4, #16]
    211e:	18f6      	adds	r6, r6, r3
    2120:	6026      	str	r6, [r4, #0]
    2122:	6165      	str	r5, [r4, #20]
    2124:	9e01      	ldr	r6, [sp, #4]
    2126:	1aed      	subs	r5, r5, r3
    2128:	60a5      	str	r5, [r4, #8]
    212a:	9b01      	ldr	r3, [sp, #4]
    212c:	42b3      	cmp	r3, r6
    212e:	d200      	bcs.n	2132 <__ssputs_r+0x8e>
    2130:	001e      	movs	r6, r3
    2132:	0032      	movs	r2, r6
    2134:	9903      	ldr	r1, [sp, #12]
    2136:	6820      	ldr	r0, [r4, #0]
    2138:	f000 fabf 	bl	26ba <memmove>
    213c:	68a3      	ldr	r3, [r4, #8]
    213e:	2000      	movs	r0, #0
    2140:	1b9b      	subs	r3, r3, r6
    2142:	60a3      	str	r3, [r4, #8]
    2144:	6823      	ldr	r3, [r4, #0]
    2146:	199e      	adds	r6, r3, r6
    2148:	6026      	str	r6, [r4, #0]
    214a:	e7da      	b.n	2102 <__ssputs_r+0x5e>
    214c:	002a      	movs	r2, r5
    214e:	0038      	movs	r0, r7
    2150:	f000 fac7 	bl	26e2 <_realloc_r>
    2154:	1e06      	subs	r6, r0, #0
    2156:	d1e0      	bne.n	211a <__ssputs_r+0x76>
    2158:	6921      	ldr	r1, [r4, #16]
    215a:	0038      	movs	r0, r7
    215c:	f7ff fefa 	bl	1f54 <_free_r>
    2160:	e7c7      	b.n	20f2 <__ssputs_r+0x4e>
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	fffffb7f 	.word	0xfffffb7f

00002168 <_svfiprintf_r>:
    2168:	b5f0      	push	{r4, r5, r6, r7, lr}
    216a:	b09f      	sub	sp, #124	; 0x7c
    216c:	9002      	str	r0, [sp, #8]
    216e:	9305      	str	r3, [sp, #20]
    2170:	898b      	ldrh	r3, [r1, #12]
    2172:	000f      	movs	r7, r1
    2174:	0016      	movs	r6, r2
    2176:	061b      	lsls	r3, r3, #24
    2178:	d511      	bpl.n	219e <_svfiprintf_r+0x36>
    217a:	690b      	ldr	r3, [r1, #16]
    217c:	2b00      	cmp	r3, #0
    217e:	d10e      	bne.n	219e <_svfiprintf_r+0x36>
    2180:	2140      	movs	r1, #64	; 0x40
    2182:	f7ff ff31 	bl	1fe8 <_malloc_r>
    2186:	6038      	str	r0, [r7, #0]
    2188:	6138      	str	r0, [r7, #16]
    218a:	2800      	cmp	r0, #0
    218c:	d105      	bne.n	219a <_svfiprintf_r+0x32>
    218e:	230c      	movs	r3, #12
    2190:	9a02      	ldr	r2, [sp, #8]
    2192:	3801      	subs	r0, #1
    2194:	6013      	str	r3, [r2, #0]
    2196:	b01f      	add	sp, #124	; 0x7c
    2198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219a:	2340      	movs	r3, #64	; 0x40
    219c:	617b      	str	r3, [r7, #20]
    219e:	2300      	movs	r3, #0
    21a0:	ad06      	add	r5, sp, #24
    21a2:	616b      	str	r3, [r5, #20]
    21a4:	3320      	adds	r3, #32
    21a6:	766b      	strb	r3, [r5, #25]
    21a8:	3310      	adds	r3, #16
    21aa:	76ab      	strb	r3, [r5, #26]
    21ac:	0034      	movs	r4, r6
    21ae:	7823      	ldrb	r3, [r4, #0]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d147      	bne.n	2244 <_svfiprintf_r+0xdc>
    21b4:	1ba3      	subs	r3, r4, r6
    21b6:	9304      	str	r3, [sp, #16]
    21b8:	d00d      	beq.n	21d6 <_svfiprintf_r+0x6e>
    21ba:	1ba3      	subs	r3, r4, r6
    21bc:	0032      	movs	r2, r6
    21be:	0039      	movs	r1, r7
    21c0:	9802      	ldr	r0, [sp, #8]
    21c2:	f7ff ff6f 	bl	20a4 <__ssputs_r>
    21c6:	1c43      	adds	r3, r0, #1
    21c8:	d100      	bne.n	21cc <_svfiprintf_r+0x64>
    21ca:	e0b5      	b.n	2338 <_svfiprintf_r+0x1d0>
    21cc:	696a      	ldr	r2, [r5, #20]
    21ce:	9b04      	ldr	r3, [sp, #16]
    21d0:	4694      	mov	ip, r2
    21d2:	4463      	add	r3, ip
    21d4:	616b      	str	r3, [r5, #20]
    21d6:	7823      	ldrb	r3, [r4, #0]
    21d8:	2b00      	cmp	r3, #0
    21da:	d100      	bne.n	21de <_svfiprintf_r+0x76>
    21dc:	e0ac      	b.n	2338 <_svfiprintf_r+0x1d0>
    21de:	2201      	movs	r2, #1
    21e0:	2300      	movs	r3, #0
    21e2:	4252      	negs	r2, r2
    21e4:	606a      	str	r2, [r5, #4]
    21e6:	a902      	add	r1, sp, #8
    21e8:	3254      	adds	r2, #84	; 0x54
    21ea:	1852      	adds	r2, r2, r1
    21ec:	3401      	adds	r4, #1
    21ee:	602b      	str	r3, [r5, #0]
    21f0:	60eb      	str	r3, [r5, #12]
    21f2:	60ab      	str	r3, [r5, #8]
    21f4:	7013      	strb	r3, [r2, #0]
    21f6:	65ab      	str	r3, [r5, #88]	; 0x58
    21f8:	4e58      	ldr	r6, [pc, #352]	; (235c <_svfiprintf_r+0x1f4>)
    21fa:	2205      	movs	r2, #5
    21fc:	7821      	ldrb	r1, [r4, #0]
    21fe:	0030      	movs	r0, r6
    2200:	f000 fa50 	bl	26a4 <memchr>
    2204:	1c62      	adds	r2, r4, #1
    2206:	2800      	cmp	r0, #0
    2208:	d120      	bne.n	224c <_svfiprintf_r+0xe4>
    220a:	6829      	ldr	r1, [r5, #0]
    220c:	06cb      	lsls	r3, r1, #27
    220e:	d504      	bpl.n	221a <_svfiprintf_r+0xb2>
    2210:	2353      	movs	r3, #83	; 0x53
    2212:	ae02      	add	r6, sp, #8
    2214:	3020      	adds	r0, #32
    2216:	199b      	adds	r3, r3, r6
    2218:	7018      	strb	r0, [r3, #0]
    221a:	070b      	lsls	r3, r1, #28
    221c:	d504      	bpl.n	2228 <_svfiprintf_r+0xc0>
    221e:	2353      	movs	r3, #83	; 0x53
    2220:	202b      	movs	r0, #43	; 0x2b
    2222:	ae02      	add	r6, sp, #8
    2224:	199b      	adds	r3, r3, r6
    2226:	7018      	strb	r0, [r3, #0]
    2228:	7823      	ldrb	r3, [r4, #0]
    222a:	2b2a      	cmp	r3, #42	; 0x2a
    222c:	d016      	beq.n	225c <_svfiprintf_r+0xf4>
    222e:	2000      	movs	r0, #0
    2230:	210a      	movs	r1, #10
    2232:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2234:	7822      	ldrb	r2, [r4, #0]
    2236:	3a30      	subs	r2, #48	; 0x30
    2238:	2a09      	cmp	r2, #9
    223a:	d955      	bls.n	22e8 <_svfiprintf_r+0x180>
    223c:	2800      	cmp	r0, #0
    223e:	d015      	beq.n	226c <_svfiprintf_r+0x104>
    2240:	9309      	str	r3, [sp, #36]	; 0x24
    2242:	e013      	b.n	226c <_svfiprintf_r+0x104>
    2244:	2b25      	cmp	r3, #37	; 0x25
    2246:	d0b5      	beq.n	21b4 <_svfiprintf_r+0x4c>
    2248:	3401      	adds	r4, #1
    224a:	e7b0      	b.n	21ae <_svfiprintf_r+0x46>
    224c:	2301      	movs	r3, #1
    224e:	1b80      	subs	r0, r0, r6
    2250:	4083      	lsls	r3, r0
    2252:	6829      	ldr	r1, [r5, #0]
    2254:	0014      	movs	r4, r2
    2256:	430b      	orrs	r3, r1
    2258:	602b      	str	r3, [r5, #0]
    225a:	e7cd      	b.n	21f8 <_svfiprintf_r+0x90>
    225c:	9b05      	ldr	r3, [sp, #20]
    225e:	1d18      	adds	r0, r3, #4
    2260:	681b      	ldr	r3, [r3, #0]
    2262:	9005      	str	r0, [sp, #20]
    2264:	2b00      	cmp	r3, #0
    2266:	db39      	blt.n	22dc <_svfiprintf_r+0x174>
    2268:	9309      	str	r3, [sp, #36]	; 0x24
    226a:	0014      	movs	r4, r2
    226c:	7823      	ldrb	r3, [r4, #0]
    226e:	2b2e      	cmp	r3, #46	; 0x2e
    2270:	d10b      	bne.n	228a <_svfiprintf_r+0x122>
    2272:	7863      	ldrb	r3, [r4, #1]
    2274:	1c62      	adds	r2, r4, #1
    2276:	2b2a      	cmp	r3, #42	; 0x2a
    2278:	d13e      	bne.n	22f8 <_svfiprintf_r+0x190>
    227a:	9b05      	ldr	r3, [sp, #20]
    227c:	3402      	adds	r4, #2
    227e:	1d1a      	adds	r2, r3, #4
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	9205      	str	r2, [sp, #20]
    2284:	2b00      	cmp	r3, #0
    2286:	db34      	blt.n	22f2 <_svfiprintf_r+0x18a>
    2288:	9307      	str	r3, [sp, #28]
    228a:	4e35      	ldr	r6, [pc, #212]	; (2360 <_svfiprintf_r+0x1f8>)
    228c:	7821      	ldrb	r1, [r4, #0]
    228e:	2203      	movs	r2, #3
    2290:	0030      	movs	r0, r6
    2292:	f000 fa07 	bl	26a4 <memchr>
    2296:	2800      	cmp	r0, #0
    2298:	d006      	beq.n	22a8 <_svfiprintf_r+0x140>
    229a:	2340      	movs	r3, #64	; 0x40
    229c:	1b80      	subs	r0, r0, r6
    229e:	4083      	lsls	r3, r0
    22a0:	682a      	ldr	r2, [r5, #0]
    22a2:	3401      	adds	r4, #1
    22a4:	4313      	orrs	r3, r2
    22a6:	602b      	str	r3, [r5, #0]
    22a8:	7821      	ldrb	r1, [r4, #0]
    22aa:	2206      	movs	r2, #6
    22ac:	482d      	ldr	r0, [pc, #180]	; (2364 <_svfiprintf_r+0x1fc>)
    22ae:	1c66      	adds	r6, r4, #1
    22b0:	7629      	strb	r1, [r5, #24]
    22b2:	f000 f9f7 	bl	26a4 <memchr>
    22b6:	2800      	cmp	r0, #0
    22b8:	d046      	beq.n	2348 <_svfiprintf_r+0x1e0>
    22ba:	4b2b      	ldr	r3, [pc, #172]	; (2368 <_svfiprintf_r+0x200>)
    22bc:	2b00      	cmp	r3, #0
    22be:	d12f      	bne.n	2320 <_svfiprintf_r+0x1b8>
    22c0:	6829      	ldr	r1, [r5, #0]
    22c2:	9b05      	ldr	r3, [sp, #20]
    22c4:	2207      	movs	r2, #7
    22c6:	05c9      	lsls	r1, r1, #23
    22c8:	d528      	bpl.n	231c <_svfiprintf_r+0x1b4>
    22ca:	189b      	adds	r3, r3, r2
    22cc:	4393      	bics	r3, r2
    22ce:	3308      	adds	r3, #8
    22d0:	9305      	str	r3, [sp, #20]
    22d2:	696b      	ldr	r3, [r5, #20]
    22d4:	9a03      	ldr	r2, [sp, #12]
    22d6:	189b      	adds	r3, r3, r2
    22d8:	616b      	str	r3, [r5, #20]
    22da:	e767      	b.n	21ac <_svfiprintf_r+0x44>
    22dc:	425b      	negs	r3, r3
    22de:	60eb      	str	r3, [r5, #12]
    22e0:	2302      	movs	r3, #2
    22e2:	430b      	orrs	r3, r1
    22e4:	602b      	str	r3, [r5, #0]
    22e6:	e7c0      	b.n	226a <_svfiprintf_r+0x102>
    22e8:	434b      	muls	r3, r1
    22ea:	3401      	adds	r4, #1
    22ec:	189b      	adds	r3, r3, r2
    22ee:	2001      	movs	r0, #1
    22f0:	e7a0      	b.n	2234 <_svfiprintf_r+0xcc>
    22f2:	2301      	movs	r3, #1
    22f4:	425b      	negs	r3, r3
    22f6:	e7c7      	b.n	2288 <_svfiprintf_r+0x120>
    22f8:	2300      	movs	r3, #0
    22fa:	0014      	movs	r4, r2
    22fc:	200a      	movs	r0, #10
    22fe:	001a      	movs	r2, r3
    2300:	606b      	str	r3, [r5, #4]
    2302:	7821      	ldrb	r1, [r4, #0]
    2304:	3930      	subs	r1, #48	; 0x30
    2306:	2909      	cmp	r1, #9
    2308:	d903      	bls.n	2312 <_svfiprintf_r+0x1aa>
    230a:	2b00      	cmp	r3, #0
    230c:	d0bd      	beq.n	228a <_svfiprintf_r+0x122>
    230e:	9207      	str	r2, [sp, #28]
    2310:	e7bb      	b.n	228a <_svfiprintf_r+0x122>
    2312:	4342      	muls	r2, r0
    2314:	3401      	adds	r4, #1
    2316:	1852      	adds	r2, r2, r1
    2318:	2301      	movs	r3, #1
    231a:	e7f2      	b.n	2302 <_svfiprintf_r+0x19a>
    231c:	3307      	adds	r3, #7
    231e:	e7d5      	b.n	22cc <_svfiprintf_r+0x164>
    2320:	ab05      	add	r3, sp, #20
    2322:	9300      	str	r3, [sp, #0]
    2324:	003a      	movs	r2, r7
    2326:	4b11      	ldr	r3, [pc, #68]	; (236c <_svfiprintf_r+0x204>)
    2328:	0029      	movs	r1, r5
    232a:	9802      	ldr	r0, [sp, #8]
    232c:	e000      	b.n	2330 <_svfiprintf_r+0x1c8>
    232e:	bf00      	nop
    2330:	9003      	str	r0, [sp, #12]
    2332:	9b03      	ldr	r3, [sp, #12]
    2334:	3301      	adds	r3, #1
    2336:	d1cc      	bne.n	22d2 <_svfiprintf_r+0x16a>
    2338:	89bb      	ldrh	r3, [r7, #12]
    233a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    233c:	065b      	lsls	r3, r3, #25
    233e:	d400      	bmi.n	2342 <_svfiprintf_r+0x1da>
    2340:	e729      	b.n	2196 <_svfiprintf_r+0x2e>
    2342:	2001      	movs	r0, #1
    2344:	4240      	negs	r0, r0
    2346:	e726      	b.n	2196 <_svfiprintf_r+0x2e>
    2348:	ab05      	add	r3, sp, #20
    234a:	9300      	str	r3, [sp, #0]
    234c:	003a      	movs	r2, r7
    234e:	4b07      	ldr	r3, [pc, #28]	; (236c <_svfiprintf_r+0x204>)
    2350:	0029      	movs	r1, r5
    2352:	9802      	ldr	r0, [sp, #8]
    2354:	f000 f87a 	bl	244c <_printf_i>
    2358:	e7ea      	b.n	2330 <_svfiprintf_r+0x1c8>
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	00002800 	.word	0x00002800
    2360:	00002806 	.word	0x00002806
    2364:	0000280a 	.word	0x0000280a
    2368:	00000000 	.word	0x00000000
    236c:	000020a5 	.word	0x000020a5

00002370 <_printf_common>:
    2370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2372:	0015      	movs	r5, r2
    2374:	9301      	str	r3, [sp, #4]
    2376:	688a      	ldr	r2, [r1, #8]
    2378:	690b      	ldr	r3, [r1, #16]
    237a:	9000      	str	r0, [sp, #0]
    237c:	000c      	movs	r4, r1
    237e:	4293      	cmp	r3, r2
    2380:	da00      	bge.n	2384 <_printf_common+0x14>
    2382:	0013      	movs	r3, r2
    2384:	0022      	movs	r2, r4
    2386:	602b      	str	r3, [r5, #0]
    2388:	3243      	adds	r2, #67	; 0x43
    238a:	7812      	ldrb	r2, [r2, #0]
    238c:	2a00      	cmp	r2, #0
    238e:	d001      	beq.n	2394 <_printf_common+0x24>
    2390:	3301      	adds	r3, #1
    2392:	602b      	str	r3, [r5, #0]
    2394:	6823      	ldr	r3, [r4, #0]
    2396:	069b      	lsls	r3, r3, #26
    2398:	d502      	bpl.n	23a0 <_printf_common+0x30>
    239a:	682b      	ldr	r3, [r5, #0]
    239c:	3302      	adds	r3, #2
    239e:	602b      	str	r3, [r5, #0]
    23a0:	2706      	movs	r7, #6
    23a2:	6823      	ldr	r3, [r4, #0]
    23a4:	401f      	ands	r7, r3
    23a6:	d027      	beq.n	23f8 <_printf_common+0x88>
    23a8:	0023      	movs	r3, r4
    23aa:	3343      	adds	r3, #67	; 0x43
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	1e5a      	subs	r2, r3, #1
    23b0:	4193      	sbcs	r3, r2
    23b2:	6822      	ldr	r2, [r4, #0]
    23b4:	0692      	lsls	r2, r2, #26
    23b6:	d430      	bmi.n	241a <_printf_common+0xaa>
    23b8:	0022      	movs	r2, r4
    23ba:	9901      	ldr	r1, [sp, #4]
    23bc:	3243      	adds	r2, #67	; 0x43
    23be:	9800      	ldr	r0, [sp, #0]
    23c0:	9e08      	ldr	r6, [sp, #32]
    23c2:	47b0      	blx	r6
    23c4:	1c43      	adds	r3, r0, #1
    23c6:	d025      	beq.n	2414 <_printf_common+0xa4>
    23c8:	2306      	movs	r3, #6
    23ca:	6820      	ldr	r0, [r4, #0]
    23cc:	682a      	ldr	r2, [r5, #0]
    23ce:	68e1      	ldr	r1, [r4, #12]
    23d0:	4003      	ands	r3, r0
    23d2:	2500      	movs	r5, #0
    23d4:	2b04      	cmp	r3, #4
    23d6:	d103      	bne.n	23e0 <_printf_common+0x70>
    23d8:	1a8d      	subs	r5, r1, r2
    23da:	43eb      	mvns	r3, r5
    23dc:	17db      	asrs	r3, r3, #31
    23de:	401d      	ands	r5, r3
    23e0:	68a3      	ldr	r3, [r4, #8]
    23e2:	6922      	ldr	r2, [r4, #16]
    23e4:	4293      	cmp	r3, r2
    23e6:	dd01      	ble.n	23ec <_printf_common+0x7c>
    23e8:	1a9b      	subs	r3, r3, r2
    23ea:	18ed      	adds	r5, r5, r3
    23ec:	2700      	movs	r7, #0
    23ee:	42bd      	cmp	r5, r7
    23f0:	d120      	bne.n	2434 <_printf_common+0xc4>
    23f2:	2000      	movs	r0, #0
    23f4:	e010      	b.n	2418 <_printf_common+0xa8>
    23f6:	3701      	adds	r7, #1
    23f8:	68e3      	ldr	r3, [r4, #12]
    23fa:	682a      	ldr	r2, [r5, #0]
    23fc:	1a9b      	subs	r3, r3, r2
    23fe:	429f      	cmp	r7, r3
    2400:	dad2      	bge.n	23a8 <_printf_common+0x38>
    2402:	0022      	movs	r2, r4
    2404:	2301      	movs	r3, #1
    2406:	3219      	adds	r2, #25
    2408:	9901      	ldr	r1, [sp, #4]
    240a:	9800      	ldr	r0, [sp, #0]
    240c:	9e08      	ldr	r6, [sp, #32]
    240e:	47b0      	blx	r6
    2410:	1c43      	adds	r3, r0, #1
    2412:	d1f0      	bne.n	23f6 <_printf_common+0x86>
    2414:	2001      	movs	r0, #1
    2416:	4240      	negs	r0, r0
    2418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    241a:	2030      	movs	r0, #48	; 0x30
    241c:	18e1      	adds	r1, r4, r3
    241e:	3143      	adds	r1, #67	; 0x43
    2420:	7008      	strb	r0, [r1, #0]
    2422:	0021      	movs	r1, r4
    2424:	1c5a      	adds	r2, r3, #1
    2426:	3145      	adds	r1, #69	; 0x45
    2428:	7809      	ldrb	r1, [r1, #0]
    242a:	18a2      	adds	r2, r4, r2
    242c:	3243      	adds	r2, #67	; 0x43
    242e:	3302      	adds	r3, #2
    2430:	7011      	strb	r1, [r2, #0]
    2432:	e7c1      	b.n	23b8 <_printf_common+0x48>
    2434:	0022      	movs	r2, r4
    2436:	2301      	movs	r3, #1
    2438:	321a      	adds	r2, #26
    243a:	9901      	ldr	r1, [sp, #4]
    243c:	9800      	ldr	r0, [sp, #0]
    243e:	9e08      	ldr	r6, [sp, #32]
    2440:	47b0      	blx	r6
    2442:	1c43      	adds	r3, r0, #1
    2444:	d0e6      	beq.n	2414 <_printf_common+0xa4>
    2446:	3701      	adds	r7, #1
    2448:	e7d1      	b.n	23ee <_printf_common+0x7e>
	...

0000244c <_printf_i>:
    244c:	b5f0      	push	{r4, r5, r6, r7, lr}
    244e:	b08b      	sub	sp, #44	; 0x2c
    2450:	9206      	str	r2, [sp, #24]
    2452:	000a      	movs	r2, r1
    2454:	3243      	adds	r2, #67	; 0x43
    2456:	9307      	str	r3, [sp, #28]
    2458:	9005      	str	r0, [sp, #20]
    245a:	9204      	str	r2, [sp, #16]
    245c:	7e0a      	ldrb	r2, [r1, #24]
    245e:	000c      	movs	r4, r1
    2460:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2462:	2a6e      	cmp	r2, #110	; 0x6e
    2464:	d100      	bne.n	2468 <_printf_i+0x1c>
    2466:	e08f      	b.n	2588 <_printf_i+0x13c>
    2468:	d817      	bhi.n	249a <_printf_i+0x4e>
    246a:	2a63      	cmp	r2, #99	; 0x63
    246c:	d02c      	beq.n	24c8 <_printf_i+0x7c>
    246e:	d808      	bhi.n	2482 <_printf_i+0x36>
    2470:	2a00      	cmp	r2, #0
    2472:	d100      	bne.n	2476 <_printf_i+0x2a>
    2474:	e099      	b.n	25aa <_printf_i+0x15e>
    2476:	2a58      	cmp	r2, #88	; 0x58
    2478:	d054      	beq.n	2524 <_printf_i+0xd8>
    247a:	0026      	movs	r6, r4
    247c:	3642      	adds	r6, #66	; 0x42
    247e:	7032      	strb	r2, [r6, #0]
    2480:	e029      	b.n	24d6 <_printf_i+0x8a>
    2482:	2a64      	cmp	r2, #100	; 0x64
    2484:	d001      	beq.n	248a <_printf_i+0x3e>
    2486:	2a69      	cmp	r2, #105	; 0x69
    2488:	d1f7      	bne.n	247a <_printf_i+0x2e>
    248a:	6821      	ldr	r1, [r4, #0]
    248c:	681a      	ldr	r2, [r3, #0]
    248e:	0608      	lsls	r0, r1, #24
    2490:	d523      	bpl.n	24da <_printf_i+0x8e>
    2492:	1d11      	adds	r1, r2, #4
    2494:	6019      	str	r1, [r3, #0]
    2496:	6815      	ldr	r5, [r2, #0]
    2498:	e025      	b.n	24e6 <_printf_i+0x9a>
    249a:	2a73      	cmp	r2, #115	; 0x73
    249c:	d100      	bne.n	24a0 <_printf_i+0x54>
    249e:	e088      	b.n	25b2 <_printf_i+0x166>
    24a0:	d808      	bhi.n	24b4 <_printf_i+0x68>
    24a2:	2a6f      	cmp	r2, #111	; 0x6f
    24a4:	d029      	beq.n	24fa <_printf_i+0xae>
    24a6:	2a70      	cmp	r2, #112	; 0x70
    24a8:	d1e7      	bne.n	247a <_printf_i+0x2e>
    24aa:	2220      	movs	r2, #32
    24ac:	6809      	ldr	r1, [r1, #0]
    24ae:	430a      	orrs	r2, r1
    24b0:	6022      	str	r2, [r4, #0]
    24b2:	e003      	b.n	24bc <_printf_i+0x70>
    24b4:	2a75      	cmp	r2, #117	; 0x75
    24b6:	d020      	beq.n	24fa <_printf_i+0xae>
    24b8:	2a78      	cmp	r2, #120	; 0x78
    24ba:	d1de      	bne.n	247a <_printf_i+0x2e>
    24bc:	0022      	movs	r2, r4
    24be:	2178      	movs	r1, #120	; 0x78
    24c0:	3245      	adds	r2, #69	; 0x45
    24c2:	7011      	strb	r1, [r2, #0]
    24c4:	4a6c      	ldr	r2, [pc, #432]	; (2678 <_printf_i+0x22c>)
    24c6:	e030      	b.n	252a <_printf_i+0xde>
    24c8:	000e      	movs	r6, r1
    24ca:	681a      	ldr	r2, [r3, #0]
    24cc:	3642      	adds	r6, #66	; 0x42
    24ce:	1d11      	adds	r1, r2, #4
    24d0:	6019      	str	r1, [r3, #0]
    24d2:	6813      	ldr	r3, [r2, #0]
    24d4:	7033      	strb	r3, [r6, #0]
    24d6:	2301      	movs	r3, #1
    24d8:	e079      	b.n	25ce <_printf_i+0x182>
    24da:	0649      	lsls	r1, r1, #25
    24dc:	d5d9      	bpl.n	2492 <_printf_i+0x46>
    24de:	1d11      	adds	r1, r2, #4
    24e0:	6019      	str	r1, [r3, #0]
    24e2:	2300      	movs	r3, #0
    24e4:	5ed5      	ldrsh	r5, [r2, r3]
    24e6:	2d00      	cmp	r5, #0
    24e8:	da03      	bge.n	24f2 <_printf_i+0xa6>
    24ea:	232d      	movs	r3, #45	; 0x2d
    24ec:	9a04      	ldr	r2, [sp, #16]
    24ee:	426d      	negs	r5, r5
    24f0:	7013      	strb	r3, [r2, #0]
    24f2:	4b62      	ldr	r3, [pc, #392]	; (267c <_printf_i+0x230>)
    24f4:	270a      	movs	r7, #10
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	e02f      	b.n	255a <_printf_i+0x10e>
    24fa:	6820      	ldr	r0, [r4, #0]
    24fc:	6819      	ldr	r1, [r3, #0]
    24fe:	0605      	lsls	r5, r0, #24
    2500:	d503      	bpl.n	250a <_printf_i+0xbe>
    2502:	1d08      	adds	r0, r1, #4
    2504:	6018      	str	r0, [r3, #0]
    2506:	680d      	ldr	r5, [r1, #0]
    2508:	e005      	b.n	2516 <_printf_i+0xca>
    250a:	0640      	lsls	r0, r0, #25
    250c:	d5f9      	bpl.n	2502 <_printf_i+0xb6>
    250e:	680d      	ldr	r5, [r1, #0]
    2510:	1d08      	adds	r0, r1, #4
    2512:	6018      	str	r0, [r3, #0]
    2514:	b2ad      	uxth	r5, r5
    2516:	4b59      	ldr	r3, [pc, #356]	; (267c <_printf_i+0x230>)
    2518:	2708      	movs	r7, #8
    251a:	9303      	str	r3, [sp, #12]
    251c:	2a6f      	cmp	r2, #111	; 0x6f
    251e:	d018      	beq.n	2552 <_printf_i+0x106>
    2520:	270a      	movs	r7, #10
    2522:	e016      	b.n	2552 <_printf_i+0x106>
    2524:	3145      	adds	r1, #69	; 0x45
    2526:	700a      	strb	r2, [r1, #0]
    2528:	4a54      	ldr	r2, [pc, #336]	; (267c <_printf_i+0x230>)
    252a:	9203      	str	r2, [sp, #12]
    252c:	681a      	ldr	r2, [r3, #0]
    252e:	6821      	ldr	r1, [r4, #0]
    2530:	1d10      	adds	r0, r2, #4
    2532:	6018      	str	r0, [r3, #0]
    2534:	6815      	ldr	r5, [r2, #0]
    2536:	0608      	lsls	r0, r1, #24
    2538:	d522      	bpl.n	2580 <_printf_i+0x134>
    253a:	07cb      	lsls	r3, r1, #31
    253c:	d502      	bpl.n	2544 <_printf_i+0xf8>
    253e:	2320      	movs	r3, #32
    2540:	4319      	orrs	r1, r3
    2542:	6021      	str	r1, [r4, #0]
    2544:	2710      	movs	r7, #16
    2546:	2d00      	cmp	r5, #0
    2548:	d103      	bne.n	2552 <_printf_i+0x106>
    254a:	2320      	movs	r3, #32
    254c:	6822      	ldr	r2, [r4, #0]
    254e:	439a      	bics	r2, r3
    2550:	6022      	str	r2, [r4, #0]
    2552:	0023      	movs	r3, r4
    2554:	2200      	movs	r2, #0
    2556:	3343      	adds	r3, #67	; 0x43
    2558:	701a      	strb	r2, [r3, #0]
    255a:	6863      	ldr	r3, [r4, #4]
    255c:	60a3      	str	r3, [r4, #8]
    255e:	2b00      	cmp	r3, #0
    2560:	db5c      	blt.n	261c <_printf_i+0x1d0>
    2562:	2204      	movs	r2, #4
    2564:	6821      	ldr	r1, [r4, #0]
    2566:	4391      	bics	r1, r2
    2568:	6021      	str	r1, [r4, #0]
    256a:	2d00      	cmp	r5, #0
    256c:	d158      	bne.n	2620 <_printf_i+0x1d4>
    256e:	9e04      	ldr	r6, [sp, #16]
    2570:	2b00      	cmp	r3, #0
    2572:	d064      	beq.n	263e <_printf_i+0x1f2>
    2574:	0026      	movs	r6, r4
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	3642      	adds	r6, #66	; 0x42
    257a:	781b      	ldrb	r3, [r3, #0]
    257c:	7033      	strb	r3, [r6, #0]
    257e:	e05e      	b.n	263e <_printf_i+0x1f2>
    2580:	0648      	lsls	r0, r1, #25
    2582:	d5da      	bpl.n	253a <_printf_i+0xee>
    2584:	b2ad      	uxth	r5, r5
    2586:	e7d8      	b.n	253a <_printf_i+0xee>
    2588:	6809      	ldr	r1, [r1, #0]
    258a:	681a      	ldr	r2, [r3, #0]
    258c:	0608      	lsls	r0, r1, #24
    258e:	d505      	bpl.n	259c <_printf_i+0x150>
    2590:	1d11      	adds	r1, r2, #4
    2592:	6019      	str	r1, [r3, #0]
    2594:	6813      	ldr	r3, [r2, #0]
    2596:	6962      	ldr	r2, [r4, #20]
    2598:	601a      	str	r2, [r3, #0]
    259a:	e006      	b.n	25aa <_printf_i+0x15e>
    259c:	0649      	lsls	r1, r1, #25
    259e:	d5f7      	bpl.n	2590 <_printf_i+0x144>
    25a0:	1d11      	adds	r1, r2, #4
    25a2:	6019      	str	r1, [r3, #0]
    25a4:	6813      	ldr	r3, [r2, #0]
    25a6:	8aa2      	ldrh	r2, [r4, #20]
    25a8:	801a      	strh	r2, [r3, #0]
    25aa:	2300      	movs	r3, #0
    25ac:	9e04      	ldr	r6, [sp, #16]
    25ae:	6123      	str	r3, [r4, #16]
    25b0:	e054      	b.n	265c <_printf_i+0x210>
    25b2:	681a      	ldr	r2, [r3, #0]
    25b4:	1d11      	adds	r1, r2, #4
    25b6:	6019      	str	r1, [r3, #0]
    25b8:	6816      	ldr	r6, [r2, #0]
    25ba:	2100      	movs	r1, #0
    25bc:	6862      	ldr	r2, [r4, #4]
    25be:	0030      	movs	r0, r6
    25c0:	f000 f870 	bl	26a4 <memchr>
    25c4:	2800      	cmp	r0, #0
    25c6:	d001      	beq.n	25cc <_printf_i+0x180>
    25c8:	1b80      	subs	r0, r0, r6
    25ca:	6060      	str	r0, [r4, #4]
    25cc:	6863      	ldr	r3, [r4, #4]
    25ce:	6123      	str	r3, [r4, #16]
    25d0:	2300      	movs	r3, #0
    25d2:	9a04      	ldr	r2, [sp, #16]
    25d4:	7013      	strb	r3, [r2, #0]
    25d6:	e041      	b.n	265c <_printf_i+0x210>
    25d8:	6923      	ldr	r3, [r4, #16]
    25da:	0032      	movs	r2, r6
    25dc:	9906      	ldr	r1, [sp, #24]
    25de:	9805      	ldr	r0, [sp, #20]
    25e0:	9d07      	ldr	r5, [sp, #28]
    25e2:	47a8      	blx	r5
    25e4:	1c43      	adds	r3, r0, #1
    25e6:	d043      	beq.n	2670 <_printf_i+0x224>
    25e8:	6823      	ldr	r3, [r4, #0]
    25ea:	2500      	movs	r5, #0
    25ec:	079b      	lsls	r3, r3, #30
    25ee:	d40f      	bmi.n	2610 <_printf_i+0x1c4>
    25f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25f2:	68e0      	ldr	r0, [r4, #12]
    25f4:	4298      	cmp	r0, r3
    25f6:	da3d      	bge.n	2674 <_printf_i+0x228>
    25f8:	0018      	movs	r0, r3
    25fa:	e03b      	b.n	2674 <_printf_i+0x228>
    25fc:	0022      	movs	r2, r4
    25fe:	2301      	movs	r3, #1
    2600:	3219      	adds	r2, #25
    2602:	9906      	ldr	r1, [sp, #24]
    2604:	9805      	ldr	r0, [sp, #20]
    2606:	9e07      	ldr	r6, [sp, #28]
    2608:	47b0      	blx	r6
    260a:	1c43      	adds	r3, r0, #1
    260c:	d030      	beq.n	2670 <_printf_i+0x224>
    260e:	3501      	adds	r5, #1
    2610:	68e3      	ldr	r3, [r4, #12]
    2612:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2614:	1a9b      	subs	r3, r3, r2
    2616:	429d      	cmp	r5, r3
    2618:	dbf0      	blt.n	25fc <_printf_i+0x1b0>
    261a:	e7e9      	b.n	25f0 <_printf_i+0x1a4>
    261c:	2d00      	cmp	r5, #0
    261e:	d0a9      	beq.n	2574 <_printf_i+0x128>
    2620:	9e04      	ldr	r6, [sp, #16]
    2622:	0028      	movs	r0, r5
    2624:	0039      	movs	r1, r7
    2626:	f7ff fbe5 	bl	1df4 <__aeabi_uidivmod>
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	3e01      	subs	r6, #1
    262e:	5c5b      	ldrb	r3, [r3, r1]
    2630:	0028      	movs	r0, r5
    2632:	7033      	strb	r3, [r6, #0]
    2634:	0039      	movs	r1, r7
    2636:	f7ff fb57 	bl	1ce8 <__udivsi3>
    263a:	1e05      	subs	r5, r0, #0
    263c:	d1f1      	bne.n	2622 <_printf_i+0x1d6>
    263e:	2f08      	cmp	r7, #8
    2640:	d109      	bne.n	2656 <_printf_i+0x20a>
    2642:	6823      	ldr	r3, [r4, #0]
    2644:	07db      	lsls	r3, r3, #31
    2646:	d506      	bpl.n	2656 <_printf_i+0x20a>
    2648:	6863      	ldr	r3, [r4, #4]
    264a:	6922      	ldr	r2, [r4, #16]
    264c:	4293      	cmp	r3, r2
    264e:	dc02      	bgt.n	2656 <_printf_i+0x20a>
    2650:	2330      	movs	r3, #48	; 0x30
    2652:	3e01      	subs	r6, #1
    2654:	7033      	strb	r3, [r6, #0]
    2656:	9b04      	ldr	r3, [sp, #16]
    2658:	1b9b      	subs	r3, r3, r6
    265a:	6123      	str	r3, [r4, #16]
    265c:	9b07      	ldr	r3, [sp, #28]
    265e:	aa09      	add	r2, sp, #36	; 0x24
    2660:	9300      	str	r3, [sp, #0]
    2662:	0021      	movs	r1, r4
    2664:	9b06      	ldr	r3, [sp, #24]
    2666:	9805      	ldr	r0, [sp, #20]
    2668:	f7ff fe82 	bl	2370 <_printf_common>
    266c:	1c43      	adds	r3, r0, #1
    266e:	d1b3      	bne.n	25d8 <_printf_i+0x18c>
    2670:	2001      	movs	r0, #1
    2672:	4240      	negs	r0, r0
    2674:	b00b      	add	sp, #44	; 0x2c
    2676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2678:	00002822 	.word	0x00002822
    267c:	00002811 	.word	0x00002811

00002680 <_sbrk_r>:
    2680:	2300      	movs	r3, #0
    2682:	b570      	push	{r4, r5, r6, lr}
    2684:	4c06      	ldr	r4, [pc, #24]	; (26a0 <_sbrk_r+0x20>)
    2686:	0005      	movs	r5, r0
    2688:	0008      	movs	r0, r1
    268a:	6023      	str	r3, [r4, #0]
    268c:	f7ff fb0a 	bl	1ca4 <_sbrk>
    2690:	1c43      	adds	r3, r0, #1
    2692:	d103      	bne.n	269c <_sbrk_r+0x1c>
    2694:	6823      	ldr	r3, [r4, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	d000      	beq.n	269c <_sbrk_r+0x1c>
    269a:	602b      	str	r3, [r5, #0]
    269c:	bd70      	pop	{r4, r5, r6, pc}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	200002b0 	.word	0x200002b0

000026a4 <memchr>:
    26a4:	b2c9      	uxtb	r1, r1
    26a6:	1882      	adds	r2, r0, r2
    26a8:	4290      	cmp	r0, r2
    26aa:	d101      	bne.n	26b0 <memchr+0xc>
    26ac:	2000      	movs	r0, #0
    26ae:	4770      	bx	lr
    26b0:	7803      	ldrb	r3, [r0, #0]
    26b2:	428b      	cmp	r3, r1
    26b4:	d0fb      	beq.n	26ae <memchr+0xa>
    26b6:	3001      	adds	r0, #1
    26b8:	e7f6      	b.n	26a8 <memchr+0x4>

000026ba <memmove>:
    26ba:	b510      	push	{r4, lr}
    26bc:	4288      	cmp	r0, r1
    26be:	d902      	bls.n	26c6 <memmove+0xc>
    26c0:	188b      	adds	r3, r1, r2
    26c2:	4298      	cmp	r0, r3
    26c4:	d308      	bcc.n	26d8 <memmove+0x1e>
    26c6:	2300      	movs	r3, #0
    26c8:	429a      	cmp	r2, r3
    26ca:	d007      	beq.n	26dc <memmove+0x22>
    26cc:	5ccc      	ldrb	r4, [r1, r3]
    26ce:	54c4      	strb	r4, [r0, r3]
    26d0:	3301      	adds	r3, #1
    26d2:	e7f9      	b.n	26c8 <memmove+0xe>
    26d4:	5c8b      	ldrb	r3, [r1, r2]
    26d6:	5483      	strb	r3, [r0, r2]
    26d8:	3a01      	subs	r2, #1
    26da:	d2fb      	bcs.n	26d4 <memmove+0x1a>
    26dc:	bd10      	pop	{r4, pc}

000026de <__malloc_lock>:
    26de:	4770      	bx	lr

000026e0 <__malloc_unlock>:
    26e0:	4770      	bx	lr

000026e2 <_realloc_r>:
    26e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26e4:	0007      	movs	r7, r0
    26e6:	000d      	movs	r5, r1
    26e8:	0016      	movs	r6, r2
    26ea:	2900      	cmp	r1, #0
    26ec:	d105      	bne.n	26fa <_realloc_r+0x18>
    26ee:	0011      	movs	r1, r2
    26f0:	f7ff fc7a 	bl	1fe8 <_malloc_r>
    26f4:	0004      	movs	r4, r0
    26f6:	0020      	movs	r0, r4
    26f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26fa:	2a00      	cmp	r2, #0
    26fc:	d103      	bne.n	2706 <_realloc_r+0x24>
    26fe:	f7ff fc29 	bl	1f54 <_free_r>
    2702:	0034      	movs	r4, r6
    2704:	e7f7      	b.n	26f6 <_realloc_r+0x14>
    2706:	f000 f812 	bl	272e <_malloc_usable_size_r>
    270a:	002c      	movs	r4, r5
    270c:	4286      	cmp	r6, r0
    270e:	d9f2      	bls.n	26f6 <_realloc_r+0x14>
    2710:	0031      	movs	r1, r6
    2712:	0038      	movs	r0, r7
    2714:	f7ff fc68 	bl	1fe8 <_malloc_r>
    2718:	1e04      	subs	r4, r0, #0
    271a:	d0ec      	beq.n	26f6 <_realloc_r+0x14>
    271c:	0029      	movs	r1, r5
    271e:	0032      	movs	r2, r6
    2720:	f7ff fbdc 	bl	1edc <memcpy>
    2724:	0029      	movs	r1, r5
    2726:	0038      	movs	r0, r7
    2728:	f7ff fc14 	bl	1f54 <_free_r>
    272c:	e7e3      	b.n	26f6 <_realloc_r+0x14>

0000272e <_malloc_usable_size_r>:
    272e:	1f0b      	subs	r3, r1, #4
    2730:	681b      	ldr	r3, [r3, #0]
    2732:	1f18      	subs	r0, r3, #4
    2734:	2b00      	cmp	r3, #0
    2736:	da01      	bge.n	273c <_malloc_usable_size_r+0xe>
    2738:	580b      	ldr	r3, [r1, r0]
    273a:	18c0      	adds	r0, r0, r3
    273c:	4770      	bx	lr
    273e:	0000      	movs	r0, r0
    2740:	00006325 	.word	0x00006325

00002744 <_usb_device_irq_bits>:
    2744:	00080004 00800070 01000001 00000200     ....p...........
    2754:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    2764:	42001800 42001c00 0000155a 00001572     ...B...BZ...r...
    2774:	00001572 0000151e 0000151e 00001524     r...........$...
    2784:	0000152a 00001538 00001560 6c6c6548     *...8...`...Hell
    2794:	6f57206f 0a646c72 00000000              o World.....

000027a0 <__sf_fake_stderr>:
	...

000027c0 <__sf_fake_stdin>:
	...

000027e0 <__sf_fake_stdout>:
	...
    2800:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2810:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2820:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2830:	00006665                                ef..

00002834 <_init>:
    2834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	bcf8      	pop	{r3, r4, r5, r6, r7}
    283a:	bc08      	pop	{r3}
    283c:	469e      	mov	lr, r3
    283e:	4770      	bx	lr

00002840 <__init_array_start>:
    2840:	000000dd 	.word	0x000000dd

00002844 <_fini>:
    2844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	bcf8      	pop	{r3, r4, r5, r6, r7}
    284a:	bc08      	pop	{r3}
    284c:	469e      	mov	lr, r3
    284e:	4770      	bx	lr

00002850 <__fini_array_start>:
    2850:	000000b5 	.word	0x000000b5
