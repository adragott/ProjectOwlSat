
ProjectOwlSat_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002088  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000100  20000068  000020f0  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000168  000021f0  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026f56  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038f2  00000000  00000000  0004703f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000004a0  00000000  00000000  0004a931  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000008e8  00000000  00000000  0004add1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00006949  00000000  00000000  0004b6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c673  00000000  00000000  00052002  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00092b38  00000000  00000000  0005e675  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000d70  00000000  00000000  000f11b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004002  00000000  00000000  000f1f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 21 00 20 4d 14 00 00 49 14 00 00 49 14 00 00     h!. M...I...I...
	...
      2c:	49 14 00 00 00 00 00 00 00 00 00 00 49 14 00 00     I...........I...
      3c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      4c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      5c:	49 14 00 00 49 14 00 00 51 05 00 00 61 05 00 00     I...I...Q...a...
      6c:	71 05 00 00 81 05 00 00 91 05 00 00 a1 05 00 00     q...............
      7c:	09 0c 00 00 19 0c 00 00 29 0c 00 00 49 14 00 00     ........)...I...
      8c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      9c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      ac:	49 14 00 00 00 00 00 00                             I.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002088 	.word	0x00002088

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002088 	.word	0x00002088
     10c:	00002088 	.word	0x00002088
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
     114:	4770      	bx	lr
     116:	46c0      	nop			; (mov r8, r8)

00000118 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     118:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     11a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     11c:	2340      	movs	r3, #64	; 0x40
     11e:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     120:	4281      	cmp	r1, r0
     122:	d202      	bcs.n	12a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     124:	0018      	movs	r0, r3
     126:	bd10      	pop	{r4, pc}
		baud_calculated++;
     128:	001c      	movs	r4, r3
     12a:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
     12c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     12e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     130:	4288      	cmp	r0, r1
     132:	d9f9      	bls.n	128 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     134:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     136:	2cff      	cmp	r4, #255	; 0xff
     138:	d8f4      	bhi.n	124 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     13a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     13c:	2300      	movs	r3, #0
     13e:	e7f1      	b.n	124 <_sercom_get_sync_baud_val+0xc>

00000140 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     140:	b5f0      	push	{r4, r5, r6, r7, lr}
     142:	4657      	mov	r7, sl
     144:	46de      	mov	lr, fp
     146:	464e      	mov	r6, r9
     148:	4645      	mov	r5, r8
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     14a:	0004      	movs	r4, r0
{
     14c:	468a      	mov	sl, r1
     14e:	b5e0      	push	{r5, r6, r7, lr}
     150:	b087      	sub	sp, #28
     152:	9203      	str	r2, [sp, #12]
     154:	aa10      	add	r2, sp, #64	; 0x40
     156:	7811      	ldrb	r1, [r2, #0]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     158:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     15a:	434c      	muls	r4, r1
     15c:	4554      	cmp	r4, sl
     15e:	d907      	bls.n	170 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     160:	0010      	movs	r0, r2
     162:	b007      	add	sp, #28
     164:	bc3c      	pop	{r2, r3, r4, r5}
     166:	4690      	mov	r8, r2
     168:	4699      	mov	r9, r3
     16a:	46a2      	mov	sl, r4
     16c:	46ab      	mov	fp, r5
     16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     170:	2b00      	cmp	r3, #0
     172:	d13e      	bne.n	1f2 <_sercom_get_async_baud_val+0xb2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     174:	0002      	movs	r2, r0
     176:	4c61      	ldr	r4, [pc, #388]	; (2fc <_sercom_get_async_baud_val+0x1bc>)
     178:	0008      	movs	r0, r1
     17a:	2100      	movs	r1, #0
     17c:	47a0      	blx	r4
	uint64_t q = 0, r = 0, bit_shift;
     17e:	2300      	movs	r3, #0
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     180:	4683      	mov	fp, r0
		bit_shift = (uint64_t)1 << i;
     182:	2001      	movs	r0, #1
		ratio = long_division(temp1, peripheral_clock);
     184:	4656      	mov	r6, sl
	uint64_t q = 0, r = 0, bit_shift;
     186:	4699      	mov	r9, r3
     188:	469a      	mov	sl, r3
		ratio = long_division(temp1, peripheral_clock);
     18a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     18c:	2200      	movs	r2, #0
     18e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     190:	213f      	movs	r1, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     192:	4684      	mov	ip, r0
     194:	e023      	b.n	1de <_sercom_get_async_baud_val+0x9e>
     196:	4664      	mov	r4, ip
     198:	4084      	lsls	r4, r0
     19a:	0020      	movs	r0, r4
     19c:	4664      	mov	r4, ip
		r = r << 1;
     19e:	1892      	adds	r2, r2, r2
     1a0:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
     1a2:	408c      	lsls	r4, r1
     1a4:	46a0      	mov	r8, r4
		r = r << 1;
     1a6:	001c      	movs	r4, r3
     1a8:	0013      	movs	r3, r2
     1aa:	9300      	str	r3, [sp, #0]
     1ac:	9401      	str	r4, [sp, #4]
     1ae:	0023      	movs	r3, r4
		if (n & bit_shift) {
     1b0:	465c      	mov	r4, fp
     1b2:	4204      	tst	r4, r0
     1b4:	d003      	beq.n	1be <_sercom_get_async_baud_val+0x7e>
			r |= 0x01;
     1b6:	4664      	mov	r4, ip
     1b8:	4314      	orrs	r4, r2
     1ba:	0022      	movs	r2, r4
     1bc:	9b01      	ldr	r3, [sp, #4]
		if (r >= d) {
     1be:	429f      	cmp	r7, r3
     1c0:	d80b      	bhi.n	1da <_sercom_get_async_baud_val+0x9a>
     1c2:	d101      	bne.n	1c8 <_sercom_get_async_baud_val+0x88>
     1c4:	4296      	cmp	r6, r2
     1c6:	d808      	bhi.n	1da <_sercom_get_async_baud_val+0x9a>
			q |= bit_shift;
     1c8:	464c      	mov	r4, r9
     1ca:	4645      	mov	r5, r8
     1cc:	432c      	orrs	r4, r5
     1ce:	4655      	mov	r5, sl
     1d0:	4305      	orrs	r5, r0
			r = r - d;
     1d2:	1b92      	subs	r2, r2, r6
     1d4:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     1d6:	46a1      	mov	r9, r4
     1d8:	46aa      	mov	sl, r5
	for (i = 63; i >= 0; i--) {
     1da:	3901      	subs	r1, #1
     1dc:	d310      	bcc.n	200 <_sercom_get_async_baud_val+0xc0>
		bit_shift = (uint64_t)1 << i;
     1de:	2020      	movs	r0, #32
     1e0:	4240      	negs	r0, r0
     1e2:	1808      	adds	r0, r1, r0
     1e4:	d5d7      	bpl.n	196 <_sercom_get_async_baud_val+0x56>
     1e6:	2020      	movs	r0, #32
     1e8:	4664      	mov	r4, ip
     1ea:	1a40      	subs	r0, r0, r1
     1ec:	40c4      	lsrs	r4, r0
     1ee:	0020      	movs	r0, r4
     1f0:	e7d4      	b.n	19c <_sercom_get_async_baud_val+0x5c>
     1f2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     1f4:	2b01      	cmp	r3, #1
     1f6:	d007      	beq.n	208 <_sercom_get_async_baud_val+0xc8>
	*baudval = baud_calculated;
     1f8:	9b03      	ldr	r3, [sp, #12]
     1fa:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     1fc:	2200      	movs	r2, #0
     1fe:	e7af      	b.n	160 <_sercom_get_async_baud_val+0x20>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     200:	464b      	mov	r3, r9
     202:	425a      	negs	r2, r3
     204:	0c12      	lsrs	r2, r2, #16
     206:	e7f7      	b.n	1f8 <_sercom_get_async_baud_val+0xb8>
		temp1 = ((uint64_t)baudrate * sample_num);
     208:	000a      	movs	r2, r1
     20a:	2300      	movs	r3, #0
     20c:	4c3b      	ldr	r4, [pc, #236]	; (2fc <_sercom_get_async_baud_val+0x1bc>)
     20e:	2100      	movs	r1, #0
     210:	47a0      	blx	r4
	uint64_t q = 0, r = 0, bit_shift;
     212:	2300      	movs	r3, #0
		temp1 = ((uint64_t)baudrate * sample_num);
     214:	000d      	movs	r5, r1
		bit_shift = (uint64_t)1 << i;
     216:	2101      	movs	r1, #1
	uint64_t q = 0, r = 0, bit_shift;
     218:	4698      	mov	r8, r3
		temp1 = ((uint64_t)baudrate * sample_num);
     21a:	0004      	movs	r4, r0
	uint64_t q = 0, r = 0, bit_shift;
     21c:	2200      	movs	r2, #0
     21e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     220:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     222:	468c      	mov	ip, r1
     224:	4667      	mov	r7, ip
		r = r << 1;
     226:	1892      	adds	r2, r2, r2
     228:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
     22a:	40b7      	lsls	r7, r6
		if (n & bit_shift) {
     22c:	4651      	mov	r1, sl
		r = r << 1;
     22e:	9200      	str	r2, [sp, #0]
     230:	9301      	str	r3, [sp, #4]
		if (n & bit_shift) {
     232:	420f      	tst	r7, r1
     234:	d003      	beq.n	23e <_sercom_get_async_baud_val+0xfe>
			r |= 0x01;
     236:	4660      	mov	r0, ip
     238:	4310      	orrs	r0, r2
     23a:	0002      	movs	r2, r0
     23c:	9b01      	ldr	r3, [sp, #4]
		if (r >= d) {
     23e:	429d      	cmp	r5, r3
     240:	d807      	bhi.n	252 <_sercom_get_async_baud_val+0x112>
     242:	d101      	bne.n	248 <_sercom_get_async_baud_val+0x108>
     244:	4294      	cmp	r4, r2
     246:	d804      	bhi.n	252 <_sercom_get_async_baud_val+0x112>
			q |= bit_shift;
     248:	4641      	mov	r1, r8
     24a:	4339      	orrs	r1, r7
			r = r - d;
     24c:	1b12      	subs	r2, r2, r4
     24e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     250:	4688      	mov	r8, r1
	for (i = 63; i >= 0; i--) {
     252:	3e01      	subs	r6, #1
     254:	d2e6      	bcs.n	224 <_sercom_get_async_baud_val+0xe4>
		if(baud_int > BAUD_INT_MAX) {
     256:	2380      	movs	r3, #128	; 0x80
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     258:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     25a:	019b      	lsls	r3, r3, #6
     25c:	4598      	cmp	r8, r3
     25e:	d900      	bls.n	262 <_sercom_get_async_baud_val+0x122>
     260:	e77e      	b.n	160 <_sercom_get_async_baud_val+0x20>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     262:	4653      	mov	r3, sl
     264:	0f5b      	lsrs	r3, r3, #29
     266:	469b      	mov	fp, r3
     268:	4653      	mov	r3, sl
     26a:	00db      	lsls	r3, r3, #3
     26c:	0019      	movs	r1, r3
		bit_shift = (uint64_t)1 << i;
     26e:	2001      	movs	r0, #1
	uint64_t q = 0, r = 0, bit_shift;
     270:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
     272:	468a      	mov	sl, r1
     274:	4641      	mov	r1, r8
	uint64_t q = 0, r = 0, bit_shift;
     276:	9304      	str	r3, [sp, #16]
     278:	2200      	movs	r2, #0
     27a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     27c:	273f      	movs	r7, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     27e:	4681      	mov	r9, r0
     280:	9400      	str	r4, [sp, #0]
     282:	9501      	str	r5, [sp, #4]
     284:	9105      	str	r1, [sp, #20]
     286:	e023      	b.n	2d0 <_sercom_get_async_baud_val+0x190>
     288:	4648      	mov	r0, r9
     28a:	4088      	lsls	r0, r1
     28c:	4680      	mov	r8, r0
     28e:	4649      	mov	r1, r9
     290:	40b9      	lsls	r1, r7
     292:	468c      	mov	ip, r1
		if (n & bit_shift) {
     294:	4656      	mov	r6, sl
     296:	4664      	mov	r4, ip
     298:	465d      	mov	r5, fp
     29a:	4026      	ands	r6, r4
     29c:	4644      	mov	r4, r8
     29e:	402c      	ands	r4, r5
		r = r << 1;
     2a0:	1892      	adds	r2, r2, r2
     2a2:	415b      	adcs	r3, r3
		if (n & bit_shift) {
     2a4:	4326      	orrs	r6, r4
     2a6:	d002      	beq.n	2ae <_sercom_get_async_baud_val+0x16e>
			r |= 0x01;
     2a8:	464c      	mov	r4, r9
     2aa:	4314      	orrs	r4, r2
     2ac:	0022      	movs	r2, r4
		if (r >= d) {
     2ae:	9800      	ldr	r0, [sp, #0]
     2b0:	9901      	ldr	r1, [sp, #4]
     2b2:	4299      	cmp	r1, r3
     2b4:	d80a      	bhi.n	2cc <_sercom_get_async_baud_val+0x18c>
     2b6:	d101      	bne.n	2bc <_sercom_get_async_baud_val+0x17c>
     2b8:	4290      	cmp	r0, r2
     2ba:	d807      	bhi.n	2cc <_sercom_get_async_baud_val+0x18c>
			r = r - d;
     2bc:	9800      	ldr	r0, [sp, #0]
     2be:	9901      	ldr	r1, [sp, #4]
     2c0:	1a12      	subs	r2, r2, r0
     2c2:	418b      	sbcs	r3, r1
			q |= bit_shift;
     2c4:	4660      	mov	r0, ip
     2c6:	9904      	ldr	r1, [sp, #16]
     2c8:	4301      	orrs	r1, r0
     2ca:	9104      	str	r1, [sp, #16]
	for (i = 63; i >= 0; i--) {
     2cc:	3f01      	subs	r7, #1
     2ce:	d309      	bcc.n	2e4 <_sercom_get_async_baud_val+0x1a4>
		bit_shift = (uint64_t)1 << i;
     2d0:	2120      	movs	r1, #32
     2d2:	4249      	negs	r1, r1
     2d4:	1879      	adds	r1, r7, r1
     2d6:	d5d7      	bpl.n	288 <_sercom_get_async_baud_val+0x148>
     2d8:	2120      	movs	r1, #32
     2da:	4648      	mov	r0, r9
     2dc:	1bc9      	subs	r1, r1, r7
     2de:	40c8      	lsrs	r0, r1
     2e0:	4680      	mov	r8, r0
     2e2:	e7d4      	b.n	28e <_sercom_get_async_baud_val+0x14e>
     2e4:	9b05      	ldr	r3, [sp, #20]
     2e6:	4698      	mov	r8, r3
		baud_fp = temp1 - 8 * baud_int;
     2e8:	00da      	lsls	r2, r3, #3
     2ea:	9b04      	ldr	r3, [sp, #16]
     2ec:	1a9a      	subs	r2, r3, r2
		baud_calculated = baud_int | (baud_fp << 13);
     2ee:	4643      	mov	r3, r8
     2f0:	b2d2      	uxtb	r2, r2
     2f2:	0352      	lsls	r2, r2, #13
     2f4:	431a      	orrs	r2, r3
     2f6:	b292      	uxth	r2, r2
     2f8:	e77e      	b.n	1f8 <_sercom_get_async_baud_val+0xb8>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	000016bd 	.word	0x000016bd

00000300 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     300:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     302:	4c0e      	ldr	r4, [pc, #56]	; (33c <sercom_set_gclk_generator+0x3c>)
{
     304:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
     306:	7823      	ldrb	r3, [r4, #0]
{
     308:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     30a:	2b00      	cmp	r3, #0
     30c:	d006      	beq.n	31c <sercom_set_gclk_generator+0x1c>
     30e:	2900      	cmp	r1, #0
     310:	d104      	bne.n	31c <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     312:	7863      	ldrb	r3, [r4, #1]
     314:	4283      	cmp	r3, r0
     316:	d00f      	beq.n	338 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     318:	201d      	movs	r0, #29
     31a:	e00b      	b.n	334 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
     31c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     31e:	2013      	movs	r0, #19
     320:	4b07      	ldr	r3, [pc, #28]	; (340 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
     322:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     324:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     326:	2013      	movs	r0, #19
     328:	4b06      	ldr	r3, [pc, #24]	; (344 <sercom_set_gclk_generator+0x44>)
     32a:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
     32c:	2301      	movs	r3, #1
		return STATUS_OK;
     32e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     330:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     332:	7023      	strb	r3, [r4, #0]
}
     334:	b003      	add	sp, #12
     336:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
     338:	2000      	movs	r0, #0
     33a:	e7fb      	b.n	334 <sercom_set_gclk_generator+0x34>
     33c:	20000084 	.word	0x20000084
     340:	000012e9 	.word	0x000012e9
     344:	00001261 	.word	0x00001261

00000348 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     348:	4b3a      	ldr	r3, [pc, #232]	; (434 <_sercom_get_default_pad+0xec>)
     34a:	4298      	cmp	r0, r3
     34c:	d043      	beq.n	3d6 <_sercom_get_default_pad+0x8e>
     34e:	d90a      	bls.n	366 <_sercom_get_default_pad+0x1e>
     350:	4b39      	ldr	r3, [pc, #228]	; (438 <_sercom_get_default_pad+0xf0>)
     352:	4298      	cmp	r0, r3
     354:	d017      	beq.n	386 <_sercom_get_default_pad+0x3e>
     356:	4b39      	ldr	r3, [pc, #228]	; (43c <_sercom_get_default_pad+0xf4>)
     358:	4298      	cmp	r0, r3
     35a:	d032      	beq.n	3c2 <_sercom_get_default_pad+0x7a>
     35c:	4b38      	ldr	r3, [pc, #224]	; (440 <_sercom_get_default_pad+0xf8>)
     35e:	4298      	cmp	r0, r3
     360:	d01b      	beq.n	39a <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     362:	2000      	movs	r0, #0
}
     364:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     366:	4b37      	ldr	r3, [pc, #220]	; (444 <_sercom_get_default_pad+0xfc>)
     368:	4298      	cmp	r0, r3
     36a:	d020      	beq.n	3ae <_sercom_get_default_pad+0x66>
     36c:	4b36      	ldr	r3, [pc, #216]	; (448 <_sercom_get_default_pad+0x100>)
     36e:	4298      	cmp	r0, r3
     370:	d1f7      	bne.n	362 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     372:	2901      	cmp	r1, #1
     374:	d043      	beq.n	3fe <_sercom_get_default_pad+0xb6>
     376:	2900      	cmp	r1, #0
     378:	d03f      	beq.n	3fa <_sercom_get_default_pad+0xb2>
     37a:	2902      	cmp	r1, #2
     37c:	d03b      	beq.n	3f6 <_sercom_get_default_pad+0xae>
     37e:	2903      	cmp	r1, #3
     380:	d1ef      	bne.n	362 <_sercom_get_default_pad+0x1a>
     382:	4832      	ldr	r0, [pc, #200]	; (44c <_sercom_get_default_pad+0x104>)
     384:	e7ee      	b.n	364 <_sercom_get_default_pad+0x1c>
     386:	2901      	cmp	r1, #1
     388:	d031      	beq.n	3ee <_sercom_get_default_pad+0xa6>
     38a:	2900      	cmp	r1, #0
     38c:	d02d      	beq.n	3ea <_sercom_get_default_pad+0xa2>
     38e:	2902      	cmp	r1, #2
     390:	d02f      	beq.n	3f2 <_sercom_get_default_pad+0xaa>
     392:	2903      	cmp	r1, #3
     394:	d1e5      	bne.n	362 <_sercom_get_default_pad+0x1a>
     396:	482e      	ldr	r0, [pc, #184]	; (450 <_sercom_get_default_pad+0x108>)
     398:	e7e4      	b.n	364 <_sercom_get_default_pad+0x1c>
     39a:	2901      	cmp	r1, #1
     39c:	d03f      	beq.n	41e <_sercom_get_default_pad+0xd6>
     39e:	2900      	cmp	r1, #0
     3a0:	d03b      	beq.n	41a <_sercom_get_default_pad+0xd2>
     3a2:	2902      	cmp	r1, #2
     3a4:	d037      	beq.n	416 <_sercom_get_default_pad+0xce>
     3a6:	2903      	cmp	r1, #3
     3a8:	d1db      	bne.n	362 <_sercom_get_default_pad+0x1a>
     3aa:	482a      	ldr	r0, [pc, #168]	; (454 <_sercom_get_default_pad+0x10c>)
     3ac:	e7da      	b.n	364 <_sercom_get_default_pad+0x1c>
     3ae:	2901      	cmp	r1, #1
     3b0:	d03d      	beq.n	42e <_sercom_get_default_pad+0xe6>
     3b2:	2900      	cmp	r1, #0
     3b4:	d039      	beq.n	42a <_sercom_get_default_pad+0xe2>
     3b6:	2902      	cmp	r1, #2
     3b8:	d02b      	beq.n	412 <_sercom_get_default_pad+0xca>
     3ba:	2903      	cmp	r1, #3
     3bc:	d1d1      	bne.n	362 <_sercom_get_default_pad+0x1a>
     3be:	4826      	ldr	r0, [pc, #152]	; (458 <_sercom_get_default_pad+0x110>)
     3c0:	e7d0      	b.n	364 <_sercom_get_default_pad+0x1c>
     3c2:	2901      	cmp	r1, #1
     3c4:	d023      	beq.n	40e <_sercom_get_default_pad+0xc6>
     3c6:	2900      	cmp	r1, #0
     3c8:	d01f      	beq.n	40a <_sercom_get_default_pad+0xc2>
     3ca:	2902      	cmp	r1, #2
     3cc:	d01b      	beq.n	406 <_sercom_get_default_pad+0xbe>
     3ce:	2903      	cmp	r1, #3
     3d0:	d1c7      	bne.n	362 <_sercom_get_default_pad+0x1a>
     3d2:	4822      	ldr	r0, [pc, #136]	; (45c <_sercom_get_default_pad+0x114>)
     3d4:	e7c6      	b.n	364 <_sercom_get_default_pad+0x1c>
     3d6:	2901      	cmp	r1, #1
     3d8:	d025      	beq.n	426 <_sercom_get_default_pad+0xde>
     3da:	2900      	cmp	r1, #0
     3dc:	d021      	beq.n	422 <_sercom_get_default_pad+0xda>
     3de:	2902      	cmp	r1, #2
     3e0:	d00f      	beq.n	402 <_sercom_get_default_pad+0xba>
     3e2:	2903      	cmp	r1, #3
     3e4:	d1bd      	bne.n	362 <_sercom_get_default_pad+0x1a>
     3e6:	481e      	ldr	r0, [pc, #120]	; (460 <_sercom_get_default_pad+0x118>)
     3e8:	e7bc      	b.n	364 <_sercom_get_default_pad+0x1c>
     3ea:	481e      	ldr	r0, [pc, #120]	; (464 <_sercom_get_default_pad+0x11c>)
     3ec:	e7ba      	b.n	364 <_sercom_get_default_pad+0x1c>
     3ee:	481e      	ldr	r0, [pc, #120]	; (468 <_sercom_get_default_pad+0x120>)
     3f0:	e7b8      	b.n	364 <_sercom_get_default_pad+0x1c>
     3f2:	481e      	ldr	r0, [pc, #120]	; (46c <_sercom_get_default_pad+0x124>)
     3f4:	e7b6      	b.n	364 <_sercom_get_default_pad+0x1c>
     3f6:	481e      	ldr	r0, [pc, #120]	; (470 <_sercom_get_default_pad+0x128>)
     3f8:	e7b4      	b.n	364 <_sercom_get_default_pad+0x1c>
     3fa:	2003      	movs	r0, #3
     3fc:	e7b2      	b.n	364 <_sercom_get_default_pad+0x1c>
     3fe:	481d      	ldr	r0, [pc, #116]	; (474 <_sercom_get_default_pad+0x12c>)
     400:	e7b0      	b.n	364 <_sercom_get_default_pad+0x1c>
     402:	481d      	ldr	r0, [pc, #116]	; (478 <_sercom_get_default_pad+0x130>)
     404:	e7ae      	b.n	364 <_sercom_get_default_pad+0x1c>
     406:	481d      	ldr	r0, [pc, #116]	; (47c <_sercom_get_default_pad+0x134>)
     408:	e7ac      	b.n	364 <_sercom_get_default_pad+0x1c>
     40a:	481d      	ldr	r0, [pc, #116]	; (480 <_sercom_get_default_pad+0x138>)
     40c:	e7aa      	b.n	364 <_sercom_get_default_pad+0x1c>
     40e:	481d      	ldr	r0, [pc, #116]	; (484 <_sercom_get_default_pad+0x13c>)
     410:	e7a8      	b.n	364 <_sercom_get_default_pad+0x1c>
     412:	481d      	ldr	r0, [pc, #116]	; (488 <_sercom_get_default_pad+0x140>)
     414:	e7a6      	b.n	364 <_sercom_get_default_pad+0x1c>
     416:	481d      	ldr	r0, [pc, #116]	; (48c <_sercom_get_default_pad+0x144>)
     418:	e7a4      	b.n	364 <_sercom_get_default_pad+0x1c>
     41a:	481d      	ldr	r0, [pc, #116]	; (490 <_sercom_get_default_pad+0x148>)
     41c:	e7a2      	b.n	364 <_sercom_get_default_pad+0x1c>
     41e:	481d      	ldr	r0, [pc, #116]	; (494 <_sercom_get_default_pad+0x14c>)
     420:	e7a0      	b.n	364 <_sercom_get_default_pad+0x1c>
     422:	481d      	ldr	r0, [pc, #116]	; (498 <_sercom_get_default_pad+0x150>)
     424:	e79e      	b.n	364 <_sercom_get_default_pad+0x1c>
     426:	481d      	ldr	r0, [pc, #116]	; (49c <_sercom_get_default_pad+0x154>)
     428:	e79c      	b.n	364 <_sercom_get_default_pad+0x1c>
     42a:	481d      	ldr	r0, [pc, #116]	; (4a0 <_sercom_get_default_pad+0x158>)
     42c:	e79a      	b.n	364 <_sercom_get_default_pad+0x1c>
     42e:	481d      	ldr	r0, [pc, #116]	; (4a4 <_sercom_get_default_pad+0x15c>)
     430:	e798      	b.n	364 <_sercom_get_default_pad+0x1c>
     432:	46c0      	nop			; (mov r8, r8)
     434:	42001000 	.word	0x42001000
     438:	42001800 	.word	0x42001800
     43c:	42001c00 	.word	0x42001c00
     440:	42001400 	.word	0x42001400
     444:	42000800 	.word	0x42000800
     448:	42000c00 	.word	0x42000c00
     44c:	001f0003 	.word	0x001f0003
     450:	000f0003 	.word	0x000f0003
     454:	00130003 	.word	0x00130003
     458:	00070003 	.word	0x00070003
     45c:	00190003 	.word	0x00190003
     460:	000b0003 	.word	0x000b0003
     464:	000c0003 	.word	0x000c0003
     468:	000d0003 	.word	0x000d0003
     46c:	000e0003 	.word	0x000e0003
     470:	001e0003 	.word	0x001e0003
     474:	00010003 	.word	0x00010003
     478:	000a0003 	.word	0x000a0003
     47c:	00180003 	.word	0x00180003
     480:	00160003 	.word	0x00160003
     484:	00170003 	.word	0x00170003
     488:	00060003 	.word	0x00060003
     48c:	00120003 	.word	0x00120003
     490:	00100003 	.word	0x00100003
     494:	00110003 	.word	0x00110003
     498:	00080003 	.word	0x00080003
     49c:	00090003 	.word	0x00090003
     4a0:	00040003 	.word	0x00040003
     4a4:	00050003 	.word	0x00050003

000004a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4a8:	b570      	push	{r4, r5, r6, lr}
     4aa:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4ac:	4669      	mov	r1, sp
     4ae:	4b09      	ldr	r3, [pc, #36]	; (4d4 <_sercom_get_sercom_inst_index+0x2c>)
     4b0:	466a      	mov	r2, sp
     4b2:	cb70      	ldmia	r3!, {r4, r5, r6}
     4b4:	c170      	stmia	r1!, {r4, r5, r6}
     4b6:	cb70      	ldmia	r3!, {r4, r5, r6}
     4b8:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4ba:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4bc:	0099      	lsls	r1, r3, #2
     4be:	5851      	ldr	r1, [r2, r1]
     4c0:	4281      	cmp	r1, r0
     4c2:	d005      	beq.n	4d0 <_sercom_get_sercom_inst_index+0x28>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4c4:	3301      	adds	r3, #1
     4c6:	2b06      	cmp	r3, #6
     4c8:	d1f8      	bne.n	4bc <_sercom_get_sercom_inst_index+0x14>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     4ca:	2000      	movs	r0, #0
}
     4cc:	b006      	add	sp, #24
     4ce:	bd70      	pop	{r4, r5, r6, pc}
			return i;
     4d0:	b2d8      	uxtb	r0, r3
     4d2:	e7fb      	b.n	4cc <_sercom_get_sercom_inst_index+0x24>
     4d4:	00001fbc 	.word	0x00001fbc

000004d8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     4d8:	4770      	bx	lr
     4da:	46c0      	nop			; (mov r8, r8)

000004dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	468c      	mov	ip, r1
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     4e0:	490b      	ldr	r1, [pc, #44]	; (510 <_sercom_set_handler+0x34>)
     4e2:	780b      	ldrb	r3, [r1, #0]
     4e4:	2b00      	cmp	r3, #0
     4e6:	d110      	bne.n	50a <_sercom_set_handler+0x2e>
     4e8:	2300      	movs	r3, #0
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     4ea:	2500      	movs	r5, #0
     4ec:	4c09      	ldr	r4, [pc, #36]	; (514 <_sercom_set_handler+0x38>)
     4ee:	4f0a      	ldr	r7, [pc, #40]	; (518 <_sercom_set_handler+0x3c>)
     4f0:	4e0a      	ldr	r6, [pc, #40]	; (51c <_sercom_set_handler+0x40>)
     4f2:	18f2      	adds	r2, r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     4f4:	50e7      	str	r7, [r4, r3]
     4f6:	3304      	adds	r3, #4
			_sercom_instances[i] = NULL;
     4f8:	6015      	str	r5, [r2, #0]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4fa:	2b18      	cmp	r3, #24
     4fc:	d1f9      	bne.n	4f2 <_sercom_set_handler+0x16>
		}

		_handler_table_initialized = true;
     4fe:	3b17      	subs	r3, #23
     500:	700b      	strb	r3, [r1, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     502:	4663      	mov	r3, ip
     504:	0080      	lsls	r0, r0, #2
     506:	5023      	str	r3, [r4, r0]
}
     508:	bdf0      	pop	{r4, r5, r6, r7, pc}
     50a:	4c02      	ldr	r4, [pc, #8]	; (514 <_sercom_set_handler+0x38>)
     50c:	e7f9      	b.n	502 <_sercom_set_handler+0x26>
     50e:	46c0      	nop			; (mov r8, r8)
     510:	20000086 	.word	0x20000086
     514:	20000088 	.word	0x20000088
     518:	000004d9 	.word	0x000004d9
     51c:	200000d8 	.word	0x200000d8

00000520 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     520:	b500      	push	{lr}
     522:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     524:	466a      	mov	r2, sp
     526:	2309      	movs	r3, #9
     528:	7013      	strb	r3, [r2, #0]
     52a:	3301      	adds	r3, #1
     52c:	7053      	strb	r3, [r2, #1]
     52e:	3301      	adds	r3, #1
     530:	7093      	strb	r3, [r2, #2]
     532:	3301      	adds	r3, #1
     534:	70d3      	strb	r3, [r2, #3]
     536:	3301      	adds	r3, #1
     538:	7113      	strb	r3, [r2, #4]
     53a:	3301      	adds	r3, #1
     53c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     53e:	4b03      	ldr	r3, [pc, #12]	; (54c <_sercom_get_interrupt_vector+0x2c>)
     540:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     542:	466b      	mov	r3, sp
     544:	5618      	ldrsb	r0, [r3, r0]
}
     546:	b003      	add	sp, #12
     548:	bd00      	pop	{pc}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	000004a9 	.word	0x000004a9

00000550 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     550:	b510      	push	{r4, lr}
     552:	4b02      	ldr	r3, [pc, #8]	; (55c <SERCOM0_Handler+0xc>)
     554:	2000      	movs	r0, #0
     556:	681b      	ldr	r3, [r3, #0]
     558:	4798      	blx	r3
     55a:	bd10      	pop	{r4, pc}
     55c:	20000088 	.word	0x20000088

00000560 <SERCOM1_Handler>:
     560:	b510      	push	{r4, lr}
     562:	4b02      	ldr	r3, [pc, #8]	; (56c <SERCOM1_Handler+0xc>)
     564:	2001      	movs	r0, #1
     566:	685b      	ldr	r3, [r3, #4]
     568:	4798      	blx	r3
     56a:	bd10      	pop	{r4, pc}
     56c:	20000088 	.word	0x20000088

00000570 <SERCOM2_Handler>:
     570:	b510      	push	{r4, lr}
     572:	4b02      	ldr	r3, [pc, #8]	; (57c <SERCOM2_Handler+0xc>)
     574:	2002      	movs	r0, #2
     576:	689b      	ldr	r3, [r3, #8]
     578:	4798      	blx	r3
     57a:	bd10      	pop	{r4, pc}
     57c:	20000088 	.word	0x20000088

00000580 <SERCOM3_Handler>:
     580:	b510      	push	{r4, lr}
     582:	4b02      	ldr	r3, [pc, #8]	; (58c <SERCOM3_Handler+0xc>)
     584:	2003      	movs	r0, #3
     586:	68db      	ldr	r3, [r3, #12]
     588:	4798      	blx	r3
     58a:	bd10      	pop	{r4, pc}
     58c:	20000088 	.word	0x20000088

00000590 <SERCOM4_Handler>:
     590:	b510      	push	{r4, lr}
     592:	4b02      	ldr	r3, [pc, #8]	; (59c <SERCOM4_Handler+0xc>)
     594:	2004      	movs	r0, #4
     596:	691b      	ldr	r3, [r3, #16]
     598:	4798      	blx	r3
     59a:	bd10      	pop	{r4, pc}
     59c:	20000088 	.word	0x20000088

000005a0 <SERCOM5_Handler>:
     5a0:	b510      	push	{r4, lr}
     5a2:	4b02      	ldr	r3, [pc, #8]	; (5ac <SERCOM5_Handler+0xc>)
     5a4:	2005      	movs	r0, #5
     5a6:	695b      	ldr	r3, [r3, #20]
     5a8:	4798      	blx	r3
     5aa:	bd10      	pop	{r4, pc}
     5ac:	20000088 	.word	0x20000088

000005b0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b2:	464e      	mov	r6, r9
     5b4:	4645      	mov	r5, r8
     5b6:	46de      	mov	lr, fp
     5b8:	4657      	mov	r7, sl
     5ba:	b5e0      	push	{r5, r6, r7, lr}
     5bc:	0005      	movs	r5, r0
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5be:	4bbd      	ldr	r3, [pc, #756]	; (8b4 <usart_init+0x304>)
{
     5c0:	000c      	movs	r4, r1
     5c2:	b091      	sub	sp, #68	; 0x44
	module->hw = hw;
     5c4:	6029      	str	r1, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5c6:	0008      	movs	r0, r1
{
     5c8:	4690      	mov	r8, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5ca:	4699      	mov	r9, r3
     5cc:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ce:	2301      	movs	r3, #1
     5d0:	6822      	ldr	r2, [r4, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5d2:	0006      	movs	r6, r0
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5d4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5d6:	4213      	tst	r3, r2
     5d8:	d006      	beq.n	5e8 <usart_init+0x38>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     5da:	b011      	add	sp, #68	; 0x44
     5dc:	bc3c      	pop	{r2, r3, r4, r5}
     5de:	4690      	mov	r8, r2
     5e0:	4699      	mov	r9, r3
     5e2:	46a2      	mov	sl, r4
     5e4:	46ab      	mov	fp, r5
     5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5e8:	2702      	movs	r7, #2
     5ea:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     5ec:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5ee:	4017      	ands	r7, r2
     5f0:	d1f3      	bne.n	5da <usart_init+0x2a>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5f2:	1cb0      	adds	r0, r6, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5f4:	4083      	lsls	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5f6:	4ab0      	ldr	r2, [pc, #704]	; (8b8 <usart_init+0x308>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5f8:	3614      	adds	r6, #20
     5fa:	6a11      	ldr	r1, [r2, #32]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5fc:	b2f6      	uxtb	r6, r6
     5fe:	430b      	orrs	r3, r1
     600:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     602:	232d      	movs	r3, #45	; 0x2d
     604:	469a      	mov	sl, r3
     606:	4643      	mov	r3, r8
     608:	4652      	mov	r2, sl
     60a:	5c9b      	ldrb	r3, [r3, r2]
     60c:	a90a      	add	r1, sp, #40	; 0x28
     60e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     610:	0030      	movs	r0, r6
     612:	4baa      	ldr	r3, [pc, #680]	; (8bc <usart_init+0x30c>)
     614:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     616:	0030      	movs	r0, r6
     618:	4ba9      	ldr	r3, [pc, #676]	; (8c0 <usart_init+0x310>)
     61a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     61c:	4652      	mov	r2, sl
     61e:	4643      	mov	r3, r8
     620:	2100      	movs	r1, #0
     622:	5c98      	ldrb	r0, [r3, r2]
     624:	4ba7      	ldr	r3, [pc, #668]	; (8c4 <usart_init+0x314>)
     626:	4798      	blx	r3
	module->character_size = config->character_size;
     628:	4643      	mov	r3, r8
     62a:	7adb      	ldrb	r3, [r3, #11]
	module->receiver_enabled = config->receiver_enable;
     62c:	4642      	mov	r2, r8
	module->character_size = config->character_size;
     62e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     630:	2324      	movs	r3, #36	; 0x24
     632:	5cd3      	ldrb	r3, [r2, r3]
	uint16_t baud  = 0;
     634:	ae0c      	add	r6, sp, #48	; 0x30
	module->receiver_enabled = config->receiver_enable;
     636:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     638:	2325      	movs	r3, #37	; 0x25
     63a:	5cd3      	ldrb	r3, [r2, r3]
     63c:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     63e:	7ed3      	ldrb	r3, [r2, #27]
     640:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     642:	7f13      	ldrb	r3, [r2, #28]
     644:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     646:	682b      	ldr	r3, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     648:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     64a:	469a      	mov	sl, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     64c:	47c8      	blx	r9
	switch (config->sample_rate) {
     64e:	4643      	mov	r3, r8
	uint16_t baud  = 0;
     650:	8037      	strh	r7, [r6, #0]
	switch (config->sample_rate) {
     652:	8a1a      	ldrh	r2, [r3, #16]
     654:	2380      	movs	r3, #128	; 0x80
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     656:	3014      	adds	r0, #20
	switch (config->sample_rate) {
     658:	9202      	str	r2, [sp, #8]
     65a:	01db      	lsls	r3, r3, #7
     65c:	429a      	cmp	r2, r3
     65e:	d100      	bne.n	662 <usart_init+0xb2>
     660:	e0b9      	b.n	7d6 <usart_init+0x226>
     662:	d800      	bhi.n	666 <usart_init+0xb6>
     664:	e0f1      	b.n	84a <usart_init+0x29a>
     666:	23c0      	movs	r3, #192	; 0xc0
     668:	9a02      	ldr	r2, [sp, #8]
     66a:	01db      	lsls	r3, r3, #7
     66c:	429a      	cmp	r2, r3
     66e:	d100      	bne.n	672 <usart_init+0xc2>
     670:	e0f9      	b.n	866 <usart_init+0x2b6>
     672:	2380      	movs	r3, #128	; 0x80
     674:	021b      	lsls	r3, r3, #8
     676:	429a      	cmp	r2, r3
     678:	d000      	beq.n	67c <usart_init+0xcc>
     67a:	e0ef      	b.n	85c <usart_init+0x2ac>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     67c:	2303      	movs	r3, #3
     67e:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     680:	2300      	movs	r3, #0
     682:	9308      	str	r3, [sp, #32]
	ctrla = (uint32_t)config->data_order |
     684:	4643      	mov	r3, r8
     686:	681b      	ldr	r3, [r3, #0]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     688:	4642      	mov	r2, r8
	ctrla = (uint32_t)config->data_order |
     68a:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     68c:	4643      	mov	r3, r8
     68e:	68db      	ldr	r3, [r3, #12]
     690:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     692:	4643      	mov	r3, r8
     694:	695b      	ldr	r3, [r3, #20]
     696:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     698:	4643      	mov	r3, r8
     69a:	7e1b      	ldrb	r3, [r3, #24]
     69c:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     69e:	2326      	movs	r3, #38	; 0x26
     6a0:	5cd3      	ldrb	r3, [r2, r3]
     6a2:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
     6a4:	6853      	ldr	r3, [r2, #4]
     6a6:	469b      	mov	fp, r3
	switch (transfer_mode)
     6a8:	2b00      	cmp	r3, #0
     6aa:	d100      	bne.n	6ae <usart_init+0xfe>
     6ac:	e0b9      	b.n	822 <usart_init+0x272>
     6ae:	2380      	movs	r3, #128	; 0x80
     6b0:	055b      	lsls	r3, r3, #21
     6b2:	459b      	cmp	fp, r3
     6b4:	d000      	beq.n	6b8 <usart_init+0x108>
     6b6:	e0b2      	b.n	81e <usart_init+0x26e>
			if (!config->use_external_clock) {
     6b8:	2327      	movs	r3, #39	; 0x27
     6ba:	5cd3      	ldrb	r3, [r2, r3]
     6bc:	2100      	movs	r1, #0
     6be:	2b00      	cmp	r3, #0
     6c0:	d100      	bne.n	6c4 <usart_init+0x114>
     6c2:	e0ec      	b.n	89e <usart_init+0x2ee>
	if(config->encoding_format_enable) {
     6c4:	4643      	mov	r3, r8
     6c6:	7e5b      	ldrb	r3, [r3, #25]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d003      	beq.n	6d4 <usart_init+0x124>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     6cc:	4643      	mov	r3, r8
     6ce:	4652      	mov	r2, sl
     6d0:	7e9b      	ldrb	r3, [r3, #26]
     6d2:	7393      	strb	r3, [r2, #14]
     6d4:	682a      	ldr	r2, [r5, #0]
     6d6:	9f02      	ldr	r7, [sp, #8]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6d8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6da:	2b00      	cmp	r3, #0
     6dc:	d1fc      	bne.n	6d8 <usart_init+0x128>
	usart_hw->BAUD.reg = baud;
     6de:	4653      	mov	r3, sl
	ctrla |= transfer_mode;
     6e0:	9a04      	ldr	r2, [sp, #16]
	usart_hw->BAUD.reg = baud;
     6e2:	8199      	strh	r1, [r3, #12]
	ctrla |= transfer_mode;
     6e4:	9b03      	ldr	r3, [sp, #12]
     6e6:	4313      	orrs	r3, r2
     6e8:	9a05      	ldr	r2, [sp, #20]
     6ea:	4313      	orrs	r3, r2
     6ec:	465a      	mov	r2, fp
     6ee:	4313      	orrs	r3, r2
     6f0:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6f2:	9b06      	ldr	r3, [sp, #24]
	if (config->use_external_clock == false) {
     6f4:	4642      	mov	r2, r8
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6f6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     6f8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6fa:	9b07      	ldr	r3, [sp, #28]
     6fc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     6fe:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     700:	2327      	movs	r3, #39	; 0x27
     702:	5cd3      	ldrb	r3, [r2, r3]
     704:	2b00      	cmp	r3, #0
     706:	d101      	bne.n	70c <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     708:	3304      	adds	r3, #4
     70a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     70c:	4643      	mov	r3, r8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     70e:	4642      	mov	r2, r8
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     710:	7e5b      	ldrb	r3, [r3, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     712:	7f12      	ldrb	r2, [r2, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     714:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     716:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     718:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     71a:	4642      	mov	r2, r8
     71c:	7f52      	ldrb	r2, [r2, #29]
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     71e:	4641      	mov	r1, r8
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     720:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     722:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     724:	2224      	movs	r2, #36	; 0x24
     726:	5c8a      	ldrb	r2, [r1, r2]
     728:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     72a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     72c:	2225      	movs	r2, #37	; 0x25
     72e:	5c8a      	ldrb	r2, [r1, r2]
	ctrlb |= (uint32_t)config->character_size;
     730:	7a89      	ldrb	r1, [r1, #10]
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     732:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     734:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     736:	4642      	mov	r2, r8
     738:	7ad2      	ldrb	r2, [r2, #11]
     73a:	4311      	orrs	r1, r2
     73c:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     73e:	4643      	mov	r3, r8
     740:	891b      	ldrh	r3, [r3, #8]
     742:	2bff      	cmp	r3, #255	; 0xff
     744:	d100      	bne.n	748 <usart_init+0x198>
     746:	e093      	b.n	870 <usart_init+0x2c0>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     748:	2280      	movs	r2, #128	; 0x80
     74a:	0452      	lsls	r2, r2, #17
     74c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     74e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     750:	232c      	movs	r3, #44	; 0x2c
     752:	4642      	mov	r2, r8
     754:	5cd3      	ldrb	r3, [r2, r3]
     756:	2b00      	cmp	r3, #0
     758:	d103      	bne.n	762 <usart_init+0x1b2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     75a:	4b5b      	ldr	r3, [pc, #364]	; (8c8 <usart_init+0x318>)
     75c:	789b      	ldrb	r3, [r3, #2]
     75e:	079b      	lsls	r3, r3, #30
     760:	d501      	bpl.n	766 <usart_init+0x1b6>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     762:	2380      	movs	r3, #128	; 0x80
     764:	431f      	orrs	r7, r3
     766:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     768:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     76a:	2b00      	cmp	r3, #0
     76c:	d1fc      	bne.n	768 <usart_init+0x1b8>
	usart_hw->CTRLB.reg = ctrlb;
     76e:	4653      	mov	r3, sl
     770:	6059      	str	r1, [r3, #4]
     772:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     774:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     776:	2b00      	cmp	r3, #0
     778:	d1fc      	bne.n	774 <usart_init+0x1c4>
	usart_hw->CTRLA.reg = ctrla;
     77a:	4652      	mov	r2, sl
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     77c:	a908      	add	r1, sp, #32
     77e:	6017      	str	r7, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     780:	734b      	strb	r3, [r1, #13]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     782:	73cb      	strb	r3, [r1, #15]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     784:	738b      	strb	r3, [r1, #14]
			config->pinmux_pad0, config->pinmux_pad1,
     786:	4643      	mov	r3, r8
     788:	6b18      	ldr	r0, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	config->mux_position = SYSTEM_PINMUX_GPIO;
     78c:	2280      	movs	r2, #128	; 0x80
     78e:	6073      	str	r3, [r6, #4]
     790:	4643      	mov	r3, r8
     792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     794:	2700      	movs	r7, #0
     796:	60b3      	str	r3, [r6, #8]
     798:	4643      	mov	r3, r8
     79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     79c:	730a      	strb	r2, [r1, #12]
     79e:	60f3      	str	r3, [r6, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7a0:	4b4a      	ldr	r3, [pc, #296]	; (8cc <usart_init+0x31c>)
	uint32_t pad_pinmuxes[] = {
     7a2:	900c      	str	r0, [sp, #48]	; 0x30
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7a4:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7a6:	4b4a      	ldr	r3, [pc, #296]	; (8d0 <usart_init+0x320>)
     7a8:	b2f9      	uxtb	r1, r7
     7aa:	469a      	mov	sl, r3
		if (current_pinmux == PINMUX_DEFAULT) {
     7ac:	2800      	cmp	r0, #0
     7ae:	d00f      	beq.n	7d0 <usart_init+0x220>
		if (current_pinmux != PINMUX_UNUSED) {
     7b0:	1c43      	adds	r3, r0, #1
     7b2:	d005      	beq.n	7c0 <usart_init+0x210>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7b4:	ab08      	add	r3, sp, #32
     7b6:	7318      	strb	r0, [r3, #12]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7b8:	0c00      	lsrs	r0, r0, #16
     7ba:	b2c0      	uxtb	r0, r0
     7bc:	a90b      	add	r1, sp, #44	; 0x2c
     7be:	47d0      	blx	sl
     7c0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     7c2:	2f04      	cmp	r7, #4
     7c4:	d00c      	beq.n	7e0 <usart_init+0x230>
     7c6:	00bb      	lsls	r3, r7, #2
     7c8:	58f0      	ldr	r0, [r6, r3]
     7ca:	b2f9      	uxtb	r1, r7
		if (current_pinmux == PINMUX_DEFAULT) {
     7cc:	2800      	cmp	r0, #0
     7ce:	d1ef      	bne.n	7b0 <usart_init+0x200>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7d0:	0020      	movs	r0, r4
     7d2:	47d8      	blx	fp
     7d4:	e7ec      	b.n	7b0 <usart_init+0x200>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     7d6:	2308      	movs	r3, #8
     7d8:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7da:	2300      	movs	r3, #0
     7dc:	9308      	str	r3, [sp, #32]
     7de:	e751      	b.n	684 <usart_init+0xd4>
		module->callback[i]            = NULL;
     7e0:	2300      	movs	r3, #0
	module->remaining_tx_buffer_length = 0x0000;
     7e2:	2200      	movs	r2, #0
     7e4:	85eb      	strh	r3, [r5, #46]	; 0x2e
		module->callback[i]            = NULL;
     7e6:	60eb      	str	r3, [r5, #12]
     7e8:	612b      	str	r3, [r5, #16]
     7ea:	616b      	str	r3, [r5, #20]
     7ec:	61ab      	str	r3, [r5, #24]
     7ee:	61eb      	str	r3, [r5, #28]
     7f0:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     7f2:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     7f4:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
     7f6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     7f8:	3330      	adds	r3, #48	; 0x30
     7fa:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     7fc:	3301      	adds	r3, #1
     7fe:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     800:	3301      	adds	r3, #1
     802:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     804:	3301      	adds	r3, #1
     806:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     808:	6828      	ldr	r0, [r5, #0]
     80a:	47c8      	blx	r9
     80c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     80e:	4b31      	ldr	r3, [pc, #196]	; (8d4 <usart_init+0x324>)
     810:	4931      	ldr	r1, [pc, #196]	; (8d8 <usart_init+0x328>)
     812:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     814:	4b31      	ldr	r3, [pc, #196]	; (8dc <usart_init+0x32c>)
     816:	00a4      	lsls	r4, r4, #2
     818:	50e5      	str	r5, [r4, r3]
	return status_code;
     81a:	2000      	movs	r0, #0
     81c:	e6dd      	b.n	5da <usart_init+0x2a>
	switch (transfer_mode)
     81e:	2100      	movs	r1, #0
     820:	e750      	b.n	6c4 <usart_init+0x114>
			if (config->use_external_clock) {
     822:	2327      	movs	r3, #39	; 0x27
     824:	4642      	mov	r2, r8
     826:	5cd3      	ldrb	r3, [r2, r3]
     828:	2b00      	cmp	r3, #0
     82a:	d02a      	beq.n	882 <usart_init+0x2d2>
				status_code =
     82c:	4641      	mov	r1, r8
     82e:	4640      	mov	r0, r8
     830:	9b09      	ldr	r3, [sp, #36]	; 0x24
     832:	0032      	movs	r2, r6
     834:	9300      	str	r3, [sp, #0]
     836:	6a89      	ldr	r1, [r1, #40]	; 0x28
     838:	9b08      	ldr	r3, [sp, #32]
     83a:	6a00      	ldr	r0, [r0, #32]
     83c:	4f28      	ldr	r7, [pc, #160]	; (8e0 <usart_init+0x330>)
     83e:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     840:	2800      	cmp	r0, #0
     842:	d000      	beq.n	846 <usart_init+0x296>
     844:	e6c9      	b.n	5da <usart_init+0x2a>
     846:	8831      	ldrh	r1, [r6, #0]
     848:	e73c      	b.n	6c4 <usart_init+0x114>
	switch (config->sample_rate) {
     84a:	2380      	movs	r3, #128	; 0x80
     84c:	019b      	lsls	r3, r3, #6
     84e:	429a      	cmp	r2, r3
     850:	d104      	bne.n	85c <usart_init+0x2ac>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     852:	2310      	movs	r3, #16
     854:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     856:	3b0f      	subs	r3, #15
     858:	9308      	str	r3, [sp, #32]
     85a:	e713      	b.n	684 <usart_init+0xd4>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     85c:	2310      	movs	r3, #16
     85e:	9309      	str	r3, [sp, #36]	; 0x24
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     860:	2300      	movs	r3, #0
     862:	9308      	str	r3, [sp, #32]
     864:	e70e      	b.n	684 <usart_init+0xd4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2308      	movs	r3, #8
     868:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     86a:	3b07      	subs	r3, #7
     86c:	9308      	str	r3, [sp, #32]
     86e:	e709      	b.n	684 <usart_init+0xd4>
		if(config->lin_slave_enable) {
     870:	4643      	mov	r3, r8
     872:	7edb      	ldrb	r3, [r3, #27]
     874:	2b00      	cmp	r3, #0
     876:	d100      	bne.n	87a <usart_init+0x2ca>
     878:	e76a      	b.n	750 <usart_init+0x1a0>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     87a:	2380      	movs	r3, #128	; 0x80
     87c:	04db      	lsls	r3, r3, #19
     87e:	431f      	orrs	r7, r3
     880:	e766      	b.n	750 <usart_init+0x1a0>
						_sercom_get_async_baud_val(config->baudrate,
     882:	6a13      	ldr	r3, [r2, #32]
     884:	b2c0      	uxtb	r0, r0
     886:	001f      	movs	r7, r3
     888:	4b16      	ldr	r3, [pc, #88]	; (8e4 <usart_init+0x334>)
     88a:	4798      	blx	r3
				status_code =
     88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
						_sercom_get_async_baud_val(config->baudrate,
     88e:	0001      	movs	r1, r0
				status_code =
     890:	9300      	str	r3, [sp, #0]
     892:	0032      	movs	r2, r6
     894:	9b08      	ldr	r3, [sp, #32]
     896:	0038      	movs	r0, r7
     898:	4f11      	ldr	r7, [pc, #68]	; (8e0 <usart_init+0x330>)
     89a:	47b8      	blx	r7
     89c:	e7d0      	b.n	840 <usart_init+0x290>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     89e:	6a13      	ldr	r3, [r2, #32]
     8a0:	b2c0      	uxtb	r0, r0
     8a2:	001f      	movs	r7, r3
     8a4:	4b0f      	ldr	r3, [pc, #60]	; (8e4 <usart_init+0x334>)
     8a6:	4798      	blx	r3
     8a8:	0032      	movs	r2, r6
     8aa:	0001      	movs	r1, r0
     8ac:	4b0e      	ldr	r3, [pc, #56]	; (8e8 <usart_init+0x338>)
     8ae:	0038      	movs	r0, r7
     8b0:	4798      	blx	r3
     8b2:	e7c5      	b.n	840 <usart_init+0x290>
     8b4:	000004a9 	.word	0x000004a9
     8b8:	40000400 	.word	0x40000400
     8bc:	000012e9 	.word	0x000012e9
     8c0:	00001261 	.word	0x00001261
     8c4:	00000301 	.word	0x00000301
     8c8:	41002000 	.word	0x41002000
     8cc:	00000349 	.word	0x00000349
     8d0:	000013e9 	.word	0x000013e9
     8d4:	000004dd 	.word	0x000004dd
     8d8:	00000a29 	.word	0x00000a29
     8dc:	200000d8 	.word	0x200000d8
     8e0:	00000141 	.word	0x00000141
     8e4:	00001305 	.word	0x00001305
     8e8:	00000119 	.word	0x00000119

000008ec <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ee:	46d6      	mov	lr, sl
     8f0:	464f      	mov	r7, r9
     8f2:	4646      	mov	r6, r8
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     8f4:	2317      	movs	r3, #23
{
     8f6:	b5c0      	push	{r6, r7, lr}
	if (length == 0) {
     8f8:	2a00      	cmp	r2, #0
     8fa:	d105      	bne.n	908 <usart_write_buffer_wait+0x1c>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     8fc:	0018      	movs	r0, r3
     8fe:	bc1c      	pop	{r2, r3, r4}
     900:	4690      	mov	r8, r2
     902:	4699      	mov	r9, r3
     904:	46a2      	mov	sl, r4
     906:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     908:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     90a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     90c:	2c00      	cmp	r4, #0
     90e:	d0f5      	beq.n	8fc <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
     910:	6804      	ldr	r4, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     912:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     914:	2b00      	cmp	r3, #0
     916:	d1fc      	bne.n	912 <usart_write_buffer_wait+0x26>
	while (length--) {
     918:	3a01      	subs	r2, #1
     91a:	b293      	uxth	r3, r2
     91c:	469a      	mov	sl, r3
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     91e:	2302      	movs	r3, #2
     920:	469c      	mov	ip, r3
	while (length--) {
     922:	4b22      	ldr	r3, [pc, #136]	; (9ac <usart_write_buffer_wait+0xc0>)
     924:	2700      	movs	r7, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     926:	2501      	movs	r5, #1
	while (length--) {
     928:	4698      	mov	r8, r3
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     92a:	7e23      	ldrb	r3, [r4, #24]
     92c:	421d      	tst	r5, r3
     92e:	d107      	bne.n	940 <usart_write_buffer_wait+0x54>
     930:	4b1e      	ldr	r3, [pc, #120]	; (9ac <usart_write_buffer_wait+0xc0>)
     932:	e002      	b.n	93a <usart_write_buffer_wait+0x4e>
     934:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     936:	2b00      	cmp	r3, #0
     938:	d036      	beq.n	9a8 <usart_write_buffer_wait+0xbc>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     93a:	7e22      	ldrb	r2, [r4, #24]
     93c:	4215      	tst	r5, r2
     93e:	d0f9      	beq.n	934 <usart_write_buffer_wait+0x48>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     940:	7946      	ldrb	r6, [r0, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
     942:	1c7b      	adds	r3, r7, #1
     944:	b29b      	uxth	r3, r3
     946:	5dca      	ldrb	r2, [r1, r7]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     948:	2e01      	cmp	r6, #1
     94a:	d026      	beq.n	99a <usart_write_buffer_wait+0xae>
		uint16_t data_to_send = tx_data[tx_pos++];
     94c:	b292      	uxth	r2, r2
     94e:	4691      	mov	r9, r2
     950:	001f      	movs	r7, r3
	if (!(module->transmitter_enabled)) {
     952:	79c3      	ldrb	r3, [r0, #7]
     954:	2b00      	cmp	r3, #0
     956:	d00c      	beq.n	972 <usart_write_buffer_wait+0x86>
	if (module->remaining_tx_buffer_length > 0) {
     958:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
     95a:	2b00      	cmp	r3, #0
     95c:	d109      	bne.n	972 <usart_write_buffer_wait+0x86>
	SercomUsart *const usart_hw = &(module->hw->USART);
     95e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     960:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     962:	2a00      	cmp	r2, #0
     964:	d1fc      	bne.n	960 <usart_write_buffer_wait+0x74>
	usart_hw->DATA.reg = tx_data;
     966:	464a      	mov	r2, r9
     968:	851a      	strh	r2, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     96a:	4666      	mov	r6, ip
     96c:	7e1a      	ldrb	r2, [r3, #24]
     96e:	4216      	tst	r6, r2
     970:	d0fb      	beq.n	96a <usart_write_buffer_wait+0x7e>
	while (length--) {
     972:	4656      	mov	r6, sl
     974:	3e01      	subs	r6, #1
     976:	b2b3      	uxth	r3, r6
     978:	469a      	mov	sl, r3
     97a:	4543      	cmp	r3, r8
     97c:	d1d5      	bne.n	92a <usart_write_buffer_wait+0x3e>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     97e:	7e23      	ldrb	r3, [r4, #24]
     980:	079b      	lsls	r3, r3, #30
     982:	d408      	bmi.n	996 <usart_write_buffer_wait+0xaa>
     984:	4656      	mov	r6, sl
     986:	2202      	movs	r2, #2
     988:	e002      	b.n	990 <usart_write_buffer_wait+0xa4>
     98a:	3e01      	subs	r6, #1
		} else if (i == USART_TIMEOUT) {
     98c:	2e00      	cmp	r6, #0
     98e:	d00b      	beq.n	9a8 <usart_write_buffer_wait+0xbc>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     990:	7e23      	ldrb	r3, [r4, #24]
     992:	421a      	tst	r2, r3
     994:	d0f9      	beq.n	98a <usart_write_buffer_wait+0x9e>
	return STATUS_OK;
     996:	2300      	movs	r3, #0
     998:	e7b0      	b.n	8fc <usart_write_buffer_wait+0x10>
			data_to_send |= (tx_data[tx_pos++] << 8);
     99a:	5ccb      	ldrb	r3, [r1, r3]
     99c:	3702      	adds	r7, #2
     99e:	021b      	lsls	r3, r3, #8
     9a0:	4313      	orrs	r3, r2
     9a2:	b2bf      	uxth	r7, r7
     9a4:	4699      	mov	r9, r3
     9a6:	e7d4      	b.n	952 <usart_write_buffer_wait+0x66>
				return STATUS_ERR_TIMEOUT;
     9a8:	2312      	movs	r3, #18
     9aa:	e7a7      	b.n	8fc <usart_write_buffer_wait+0x10>
     9ac:	0000ffff 	.word	0x0000ffff

000009b0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9b2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <_usart_read_buffer+0x48>)
     9b6:	000e      	movs	r6, r1
     9b8:	0017      	movs	r7, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9ba:	6805      	ldr	r5, [r0, #0]
     9bc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     9be:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     9c0:	2b00      	cmp	r3, #0
     9c2:	d003      	beq.n	9cc <_usart_read_buffer+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     9c4:	4b0d      	ldr	r3, [pc, #52]	; (9fc <_usart_read_buffer+0x4c>)
     9c6:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     9c8:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9cc:	4b0b      	ldr	r3, [pc, #44]	; (9fc <_usart_read_buffer+0x4c>)
	module->remaining_rx_buffer_length = length;
     9ce:	85a7      	strh	r7, [r4, #44]	; 0x2c
     9d0:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
     9d2:	2332      	movs	r3, #50	; 0x32
     9d4:	2205      	movs	r2, #5
	module->rx_buffer_ptr              = rx_data;
     9d6:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     9d8:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     9da:	3b2e      	subs	r3, #46	; 0x2e
     9dc:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
     9de:	7a23      	ldrb	r3, [r4, #8]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d106      	bne.n	9f2 <_usart_read_buffer+0x42>
	if(module->start_frame_detection_enabled) {
     9e4:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     9e6:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     9e8:	2b00      	cmp	r3, #0
     9ea:	d0ee      	beq.n	9ca <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     9ec:	2308      	movs	r3, #8
     9ee:	75ab      	strb	r3, [r5, #22]
     9f0:	e7eb      	b.n	9ca <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     9f2:	2320      	movs	r3, #32
     9f4:	75ab      	strb	r3, [r5, #22]
     9f6:	e7f5      	b.n	9e4 <_usart_read_buffer+0x34>
     9f8:	00000dad 	.word	0x00000dad
     9fc:	00000de9 	.word	0x00000de9

00000a00 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a00:	1c93      	adds	r3, r2, #2
     a02:	009b      	lsls	r3, r3, #2
     a04:	18c3      	adds	r3, r0, r3
     a06:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     a08:	2301      	movs	r3, #1
     a0a:	4093      	lsls	r3, r2
     a0c:	2130      	movs	r1, #48	; 0x30
     a0e:	001a      	movs	r2, r3
     a10:	5c43      	ldrb	r3, [r0, r1]
     a12:	4313      	orrs	r3, r2
     a14:	5443      	strb	r3, [r0, r1]
}
     a16:	4770      	bx	lr

00000a18 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     a18:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
     a1a:	2201      	movs	r2, #1
     a1c:	4b01      	ldr	r3, [pc, #4]	; (a24 <usart_read_job+0xc>)
     a1e:	4798      	blx	r3
}
     a20:	bd10      	pop	{r4, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	000009b1 	.word	0x000009b1

00000a28 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a2a:	4b62      	ldr	r3, [pc, #392]	; (bb4 <_usart_interrupt_handler+0x18c>)
     a2c:	0080      	lsls	r0, r0, #2
     a2e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a30:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a32:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a34:	2b00      	cmp	r3, #0
     a36:	d1fc      	bne.n	a32 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a38:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a3a:	7da6      	ldrb	r6, [r4, #22]
	callback_status = module->callback_reg_mask &
     a3c:	2231      	movs	r2, #49	; 0x31
     a3e:	401e      	ands	r6, r3
     a40:	2330      	movs	r3, #48	; 0x30
     a42:	5caf      	ldrb	r7, [r5, r2]
     a44:	5ceb      	ldrb	r3, [r5, r3]
     a46:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a48:	2301      	movs	r3, #1
     a4a:	4233      	tst	r3, r6
     a4c:	d019      	beq.n	a82 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
     a4e:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
     a50:	2a00      	cmp	r2, #0
     a52:	d04d      	beq.n	af0 <_usart_interrupt_handler+0xc8>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a56:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a58:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
     a5a:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a5c:	7969      	ldrb	r1, [r5, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a5e:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a60:	2901      	cmp	r1, #1
     a62:	d100      	bne.n	a66 <_usart_interrupt_handler+0x3e>
     a64:	e075      	b.n	b52 <_usart_interrupt_handler+0x12a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a66:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a68:	05db      	lsls	r3, r3, #23
     a6a:	0ddb      	lsrs	r3, r3, #23
     a6c:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a6e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a70:	3b01      	subs	r3, #1
     a72:	b29b      	uxth	r3, r3
     a74:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a76:	2b00      	cmp	r3, #0
     a78:	d103      	bne.n	a82 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a7a:	3301      	adds	r3, #1
     a7c:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a7e:	3301      	adds	r3, #1
     a80:	75a3      	strb	r3, [r4, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a82:	2302      	movs	r3, #2
     a84:	4233      	tst	r3, r6
     a86:	d005      	beq.n	a94 <_usart_interrupt_handler+0x6c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
     a88:	2200      	movs	r2, #0
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a8a:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a8c:	3331      	adds	r3, #49	; 0x31
     a8e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a90:	07fb      	lsls	r3, r7, #31
     a92:	d43b      	bmi.n	b0c <_usart_interrupt_handler+0xe4>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a94:	2304      	movs	r3, #4
     a96:	4233      	tst	r3, r6
     a98:	d012      	beq.n	ac0 <_usart_interrupt_handler+0x98>

		if (module->remaining_rx_buffer_length) {
     a9a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
     a9c:	2a00      	cmp	r2, #0
     a9e:	d025      	beq.n	aec <_usart_interrupt_handler+0xc4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     aa0:	8b63      	ldrh	r3, [r4, #26]
     aa2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     aa4:	071a      	lsls	r2, r3, #28
     aa6:	d535      	bpl.n	b14 <_usart_interrupt_handler+0xec>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     aa8:	2237      	movs	r2, #55	; 0x37
     aaa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     aac:	d035      	beq.n	b1a <_usart_interrupt_handler+0xf2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     aae:	2202      	movs	r2, #2
     ab0:	421a      	tst	r2, r3
     ab2:	d054      	beq.n	b5e <_usart_interrupt_handler+0x136>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ab4:	211a      	movs	r1, #26
     ab6:	2332      	movs	r3, #50	; 0x32
     ab8:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     aba:	8362      	strh	r2, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     abc:	077b      	lsls	r3, r7, #29
     abe:	d459      	bmi.n	b74 <_usart_interrupt_handler+0x14c>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ac0:	2310      	movs	r3, #16
     ac2:	4233      	tst	r3, r6
     ac4:	d003      	beq.n	ace <_usart_interrupt_handler+0xa6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ac6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ac8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     aca:	423b      	tst	r3, r7
     acc:	d116      	bne.n	afc <_usart_interrupt_handler+0xd4>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ace:	2320      	movs	r3, #32
     ad0:	4233      	tst	r3, r6
     ad2:	d003      	beq.n	adc <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ad4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ad6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ad8:	073b      	lsls	r3, r7, #28
     ada:	d413      	bmi.n	b04 <_usart_interrupt_handler+0xdc>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     adc:	2308      	movs	r3, #8
     ade:	4233      	tst	r3, r6
     ae0:	d003      	beq.n	aea <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ae2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ae4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     ae6:	06bb      	lsls	r3, r7, #26
     ae8:	d404      	bmi.n	af4 <_usart_interrupt_handler+0xcc>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     aec:	7523      	strb	r3, [r4, #20]
     aee:	e7e7      	b.n	ac0 <_usart_interrupt_handler+0x98>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     af0:	7523      	strb	r3, [r4, #20]
     af2:	e7c6      	b.n	a82 <_usart_interrupt_handler+0x5a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     af4:	6a2b      	ldr	r3, [r5, #32]
     af6:	0028      	movs	r0, r5
     af8:	4798      	blx	r3
}
     afa:	e7f6      	b.n	aea <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     afc:	0028      	movs	r0, r5
     afe:	69eb      	ldr	r3, [r5, #28]
     b00:	4798      	blx	r3
     b02:	e7e4      	b.n	ace <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b04:	0028      	movs	r0, r5
     b06:	69ab      	ldr	r3, [r5, #24]
     b08:	4798      	blx	r3
     b0a:	e7e7      	b.n	adc <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b0c:	0028      	movs	r0, r5
     b0e:	68eb      	ldr	r3, [r5, #12]
     b10:	4798      	blx	r3
     b12:	e7bf      	b.n	a94 <_usart_interrupt_handler+0x6c>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b14:	223f      	movs	r2, #63	; 0x3f
     b16:	4013      	ands	r3, r2
			if (error_code) {
     b18:	d1c9      	bne.n	aae <_usart_interrupt_handler+0x86>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     b1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b1e:	05db      	lsls	r3, r3, #23
     b20:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
     b22:	b2da      	uxtb	r2, r3
     b24:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
     b26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b28:	1c51      	adds	r1, r2, #1
     b2a:	6269      	str	r1, [r5, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b2c:	7969      	ldrb	r1, [r5, #5]
     b2e:	2901      	cmp	r1, #1
     b30:	d029      	beq.n	b86 <_usart_interrupt_handler+0x15e>
				if(--(module->remaining_rx_buffer_length) == 0) {
     b32:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b34:	3b01      	subs	r3, #1
     b36:	b29b      	uxth	r3, r3
     b38:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b3a:	2b00      	cmp	r3, #0
     b3c:	d1c0      	bne.n	ac0 <_usart_interrupt_handler+0x98>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b3e:	2204      	movs	r2, #4
     b40:	7522      	strb	r2, [r4, #20]
					module->rx_status = STATUS_OK;
     b42:	322e      	adds	r2, #46	; 0x2e
     b44:	54ab      	strb	r3, [r5, r2]
					if (callback_status
     b46:	07bb      	lsls	r3, r7, #30
     b48:	d5ba      	bpl.n	ac0 <_usart_interrupt_handler+0x98>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b4a:	0028      	movs	r0, r5
     b4c:	692b      	ldr	r3, [r5, #16]
     b4e:	4798      	blx	r3
     b50:	e7b6      	b.n	ac0 <_usart_interrupt_handler+0x98>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b52:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
     b54:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b56:	0209      	lsls	r1, r1, #8
     b58:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b5a:	62aa      	str	r2, [r5, #40]	; 0x28
     b5c:	e784      	b.n	a68 <_usart_interrupt_handler+0x40>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b5e:	2204      	movs	r2, #4
     b60:	421a      	tst	r2, r3
     b62:	d10b      	bne.n	b7c <_usart_interrupt_handler+0x154>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b64:	2201      	movs	r2, #1
     b66:	421a      	tst	r2, r3
     b68:	d013      	beq.n	b92 <_usart_interrupt_handler+0x16a>
					module->rx_status = STATUS_ERR_BAD_DATA;
     b6a:	2113      	movs	r1, #19
     b6c:	2332      	movs	r3, #50	; 0x32
     b6e:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b70:	8362      	strh	r2, [r4, #26]
     b72:	e7a3      	b.n	abc <_usart_interrupt_handler+0x94>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b74:	0028      	movs	r0, r5
     b76:	696b      	ldr	r3, [r5, #20]
     b78:	4798      	blx	r3
     b7a:	e7a1      	b.n	ac0 <_usart_interrupt_handler+0x98>
					module->rx_status = STATUS_ERR_OVERFLOW;
     b7c:	211e      	movs	r1, #30
     b7e:	2332      	movs	r3, #50	; 0x32
     b80:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b82:	8362      	strh	r2, [r4, #26]
     b84:	e79a      	b.n	abc <_usart_interrupt_handler+0x94>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b86:	0a1b      	lsrs	r3, r3, #8
     b88:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b8c:	3301      	adds	r3, #1
     b8e:	626b      	str	r3, [r5, #36]	; 0x24
     b90:	e7cf      	b.n	b32 <_usart_interrupt_handler+0x10a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b92:	2210      	movs	r2, #16
     b94:	421a      	tst	r2, r3
     b96:	d004      	beq.n	ba2 <_usart_interrupt_handler+0x17a>
					module->rx_status = STATUS_ERR_PROTOCOL;
     b98:	2142      	movs	r1, #66	; 0x42
     b9a:	2332      	movs	r3, #50	; 0x32
     b9c:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b9e:	8362      	strh	r2, [r4, #26]
     ba0:	e78c      	b.n	abc <_usart_interrupt_handler+0x94>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ba2:	2220      	movs	r2, #32
     ba4:	421a      	tst	r2, r3
     ba6:	d100      	bne.n	baa <_usart_interrupt_handler+0x182>
     ba8:	e788      	b.n	abc <_usart_interrupt_handler+0x94>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     baa:	2141      	movs	r1, #65	; 0x41
     bac:	2332      	movs	r3, #50	; 0x32
     bae:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bb0:	8362      	strh	r2, [r4, #26]
     bb2:	e783      	b.n	abc <_usart_interrupt_handler+0x94>
     bb4:	200000d8 	.word	0x200000d8

00000bb8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bba:	46c6      	mov	lr, r8
     bbc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     bbe:	4b10      	ldr	r3, [pc, #64]	; (c00 <_tcc_interrupt_handler+0x48>)
     bc0:	0080      	lsls	r0, r0, #2
     bc2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     bc4:	2404      	movs	r4, #4
     bc6:	683b      	ldr	r3, [r7, #0]
     bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     bca:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bce:	2501      	movs	r5, #1
     bd0:	4013      	ands	r3, r2
     bd2:	401e      	ands	r6, r3
     bd4:	4b0b      	ldr	r3, [pc, #44]	; (c04 <_tcc_interrupt_handler+0x4c>)
     bd6:	4698      	mov	r8, r3
     bd8:	e005      	b.n	be6 <_tcc_interrupt_handler+0x2e>
     bda:	1d23      	adds	r3, r4, #4
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     bdc:	2b34      	cmp	r3, #52	; 0x34
     bde:	d00c      	beq.n	bfa <_tcc_interrupt_handler+0x42>
     be0:	4642      	mov	r2, r8
     be2:	5915      	ldr	r5, [r2, r4]
     be4:	001c      	movs	r4, r3
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     be6:	4235      	tst	r5, r6
     be8:	d0f7      	beq.n	bda <_tcc_interrupt_handler+0x22>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     bea:	593b      	ldr	r3, [r7, r4]
     bec:	0038      	movs	r0, r7
     bee:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     bf0:	683b      	ldr	r3, [r7, #0]
     bf2:	62dd      	str	r5, [r3, #44]	; 0x2c
     bf4:	1d23      	adds	r3, r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     bf6:	2b34      	cmp	r3, #52	; 0x34
     bf8:	d1f2      	bne.n	be0 <_tcc_interrupt_handler+0x28>
		}
	}
}
     bfa:	bc04      	pop	{r2}
     bfc:	4690      	mov	r8, r2
     bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c00:	200000f0 	.word	0x200000f0
     c04:	00001fd4 	.word	0x00001fd4

00000c08 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     c08:	b510      	push	{r4, lr}
     c0a:	2000      	movs	r0, #0
     c0c:	4b01      	ldr	r3, [pc, #4]	; (c14 <TCC0_Handler+0xc>)
     c0e:	4798      	blx	r3
     c10:	bd10      	pop	{r4, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00000bb9 	.word	0x00000bb9

00000c18 <TCC1_Handler>:
     c18:	b510      	push	{r4, lr}
     c1a:	2001      	movs	r0, #1
     c1c:	4b01      	ldr	r3, [pc, #4]	; (c24 <TCC1_Handler+0xc>)
     c1e:	4798      	blx	r3
     c20:	bd10      	pop	{r4, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00000bb9 	.word	0x00000bb9

00000c28 <TCC2_Handler>:
     c28:	b510      	push	{r4, lr}
     c2a:	2002      	movs	r0, #2
     c2c:	4b01      	ldr	r3, [pc, #4]	; (c34 <TCC2_Handler+0xc>)
     c2e:	4798      	blx	r3
     c30:	bd10      	pop	{r4, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	00000bb9 	.word	0x00000bb9

00000c38 <os_usart_init>:

static void os_debug_init(void);
static void os_gps_init(void);

void os_usart_init(void)
{
     c38:	b570      	push	{r4, r5, r6, lr}
     c3a:	b090      	sub	sp, #64	; 0x40
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     c3c:	4669      	mov	r1, sp
     c3e:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     c40:	2380      	movs	r3, #128	; 0x80
	config->parity           = USART_PARITY_NONE;
     c42:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     c44:	2501      	movs	r5, #1
     c46:	2224      	movs	r2, #36	; 0x24
	config->data_order       = USART_DATAORDER_LSB;
     c48:	05db      	lsls	r3, r3, #23
     c4a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     c4c:	2300      	movs	r3, #0
	config->receiver_enable  = true;
     c4e:	548d      	strb	r5, [r1, r2]
	config->transmitter_enable = true;
     c50:	3201      	adds	r2, #1
     c52:	548d      	strb	r5, [r1, r2]
	config->clock_polarity_inverted = false;
     c54:	3201      	adds	r2, #1
     c56:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
     c58:	3201      	adds	r2, #1
     c5a:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     c5c:	3205      	adds	r2, #5
     c5e:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
     c60:	3201      	adds	r2, #1
     c62:	548b      	strb	r3, [r1, r2]
	config->stopbits         = USART_STOPBITS_1;
     c64:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     c66:	72cb      	strb	r3, [r1, #11]
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     c68:	820b      	strh	r3, [r1, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     c6a:	9301      	str	r3, [sp, #4]
	config->ext_clock_freq   = 0;
     c6c:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     c6e:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     c70:	2313      	movs	r3, #19
     c72:	768b      	strb	r3, [r1, #26]

static void os_debug_init(void)
{
	struct usart_config debug_conf;
	usart_get_config_defaults(&debug_conf);
	debug_conf.baudrate =		DEBUG_USART_BAUDRATE;
     c74:	23e1      	movs	r3, #225	; 0xe1
     c76:	025b      	lsls	r3, r3, #9
     c78:	9308      	str	r3, [sp, #32]
	debug_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	debug_conf.parity =			USART_PARITY_NONE;
	debug_conf.stopbits =		USART_STOPBITS_1;
	debug_conf.pinmux_pad0 =	DEBUG_USART_PINMUX_PAD0;
     c7a:	4b1a      	ldr	r3, [pc, #104]	; (ce4 <os_usart_init+0xac>)
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     c7c:	2200      	movs	r2, #0
     c7e:	930c      	str	r3, [sp, #48]	; 0x30
	debug_conf.pinmux_pad1 =	DEBUG_USART_PINMUX_PAD1;
     c80:	4b19      	ldr	r3, [pc, #100]	; (ce8 <os_usart_init+0xb0>)
	debug_conf.pinmux_pad2 =	DEBUG_USART_PINMUX_PAD2;
	debug_conf.pinmux_pad3 =	DEBUG_USART_PINMUX_PAD3;
	debug_conf.mux_setting =	DEBUG_USART_MUX_SETTING;
		
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
     c82:	4c1a      	ldr	r4, [pc, #104]	; (cec <os_usart_init+0xb4>)
	debug_conf.pinmux_pad1 =	DEBUG_USART_PINMUX_PAD1;
     c84:	930d      	str	r3, [sp, #52]	; 0x34
	debug_conf.pinmux_pad2 =	DEBUG_USART_PINMUX_PAD2;
     c86:	2301      	movs	r3, #1
     c88:	425b      	negs	r3, r3
     c8a:	930e      	str	r3, [sp, #56]	; 0x38
	debug_conf.pinmux_pad3 =	DEBUG_USART_PINMUX_PAD3;
     c8c:	930f      	str	r3, [sp, #60]	; 0x3c
	debug_conf.mux_setting =	DEBUG_USART_MUX_SETTING;
     c8e:	2380      	movs	r3, #128	; 0x80
     c90:	035b      	lsls	r3, r3, #13
	config->lin_slave_enable      = false;
     c92:	76ca      	strb	r2, [r1, #27]
	config->immediate_buffer_overflow_notification  = false;
     c94:	760a      	strb	r2, [r1, #24]
	config->start_frame_detection_enable            = false;
     c96:	770a      	strb	r2, [r1, #28]
	config->encoding_format_enable                  = false;
     c98:	764a      	strb	r2, [r1, #25]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     c9a:	774a      	strb	r2, [r1, #29]
     c9c:	9303      	str	r3, [sp, #12]
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
     c9e:	466a      	mov	r2, sp
     ca0:	4913      	ldr	r1, [pc, #76]	; (cf0 <os_usart_init+0xb8>)
     ca2:	4b14      	ldr	r3, [pc, #80]	; (cf4 <os_usart_init+0xbc>)
     ca4:	0020      	movs	r0, r4
     ca6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ca8:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     caa:	4b13      	ldr	r3, [pc, #76]	; (cf8 <os_usart_init+0xc0>)
     cac:	0030      	movs	r0, r6
     cae:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     cb0:	231f      	movs	r3, #31
     cb2:	4018      	ands	r0, r3
     cb4:	4085      	lsls	r5, r0
     cb6:	4b11      	ldr	r3, [pc, #68]	; (cfc <os_usart_init+0xc4>)
     cb8:	601d      	str	r5, [r3, #0]
     cba:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     cbc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     cbe:	2b00      	cmp	r3, #0
     cc0:	d1fc      	bne.n	cbc <os_usart_init+0x84>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     cc2:	2202      	movs	r2, #2
     cc4:	6833      	ldr	r3, [r6, #0]
	usart_enable(&debug_mod);
		
	usart_register_callback(&debug_mod, debug_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
     cc6:	490e      	ldr	r1, [pc, #56]	; (d00 <os_usart_init+0xc8>)
     cc8:	4313      	orrs	r3, r2
     cca:	6033      	str	r3, [r6, #0]
     ccc:	3a01      	subs	r2, #1
     cce:	0020      	movs	r0, r4
     cd0:	4b0c      	ldr	r3, [pc, #48]	; (d04 <os_usart_init+0xcc>)
     cd2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     cd4:	2231      	movs	r2, #49	; 0x31
     cd6:	2102      	movs	r1, #2
     cd8:	5ca3      	ldrb	r3, [r4, r2]
     cda:	430b      	orrs	r3, r1
     cdc:	54a3      	strb	r3, [r4, r2]
}
     cde:	b010      	add	sp, #64	; 0x40
     ce0:	bd70      	pop	{r4, r5, r6, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00160002 	.word	0x00160002
     ce8:	00170002 	.word	0x00170002
     cec:	200000fc 	.word	0x200000fc
     cf0:	42001400 	.word	0x42001400
     cf4:	000005b1 	.word	0x000005b1
     cf8:	00000521 	.word	0x00000521
     cfc:	e000e100 	.word	0xe000e100
     d00:	00000d65 	.word	0x00000d65
     d04:	00000a01 	.word	0x00000a01

00000d08 <os_print>:
	usart_register_callback(&gps_mod, gps_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&gps_mod, USART_CALLBACK_BUFFER_RECEIVED);
	
}
void os_print(struct usart_module* mod, const char* str, ...)
{
     d08:	b40e      	push	{r1, r2, r3}
	volatile uint8_t pprint_buffer[OS_PRINT_MAX_SIZE + 1];
	memset(pprint_buffer, '\0', OS_PRINT_MAX_SIZE + 1);
     d0a:	2202      	movs	r2, #2
{
     d0c:	b530      	push	{r4, r5, lr}
     d0e:	b0c2      	sub	sp, #264	; 0x108
     d10:	ac45      	add	r4, sp, #276	; 0x114
     d12:	cc20      	ldmia	r4!, {r5}
	memset(pprint_buffer, '\0', OS_PRINT_MAX_SIZE + 1);
     d14:	32ff      	adds	r2, #255	; 0xff
     d16:	2100      	movs	r1, #0
     d18:	4b0d      	ldr	r3, [pc, #52]	; (d50 <os_print+0x48>)
     d1a:	a801      	add	r0, sp, #4
     d1c:	4798      	blx	r3
	va_list args;
	va_start(args, str);
	vsprintf(pprint_buffer, str, args);
     d1e:	0022      	movs	r2, r4
     d20:	0029      	movs	r1, r5
     d22:	4b0c      	ldr	r3, [pc, #48]	; (d54 <os_print+0x4c>)
	va_start(args, str);
     d24:	9400      	str	r4, [sp, #0]
	vsprintf(pprint_buffer, str, args);
     d26:	a801      	add	r0, sp, #4
     d28:	4798      	blx	r3
	va_end(args);
	uint16_t strsize = (uint16_t)strlen(pprint_buffer);
     d2a:	4b0b      	ldr	r3, [pc, #44]	; (d58 <os_print+0x50>)
     d2c:	a801      	add	r0, sp, #4
     d2e:	4798      	blx	r3
	if(strsize > OS_PRINT_MAX_SIZE)
     d30:	2380      	movs	r3, #128	; 0x80
	uint16_t strsize = (uint16_t)strlen(pprint_buffer);
     d32:	b282      	uxth	r2, r0
	if(strsize > OS_PRINT_MAX_SIZE)
     d34:	005b      	lsls	r3, r3, #1
     d36:	429a      	cmp	r2, r3
     d38:	d904      	bls.n	d44 <os_print+0x3c>
	{
		// return error
		return;
	}
	usart_write_buffer_wait(&debug_mod, pprint_buffer, strsize);
}
     d3a:	b042      	add	sp, #264	; 0x108
     d3c:	bc30      	pop	{r4, r5}
     d3e:	bc08      	pop	{r3}
     d40:	b003      	add	sp, #12
     d42:	4718      	bx	r3
	usart_write_buffer_wait(&debug_mod, pprint_buffer, strsize);
     d44:	a901      	add	r1, sp, #4
     d46:	4b05      	ldr	r3, [pc, #20]	; (d5c <os_print+0x54>)
     d48:	4805      	ldr	r0, [pc, #20]	; (d60 <os_print+0x58>)
     d4a:	4798      	blx	r3
     d4c:	e7f5      	b.n	d3a <os_print+0x32>
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	0000176b 	.word	0x0000176b
     d54:	000017b9 	.word	0x000017b9
     d58:	0000177b 	.word	0x0000177b
     d5c:	000008ed 	.word	0x000008ed
     d60:	200000fc 	.word	0x200000fc

00000d64 <debug_rx_cb>:
{
	usart_read_job(&debug_mod, &debug_rx_val);
}

void debug_rx_cb(struct usart_module* const mod)
{
     d64:	b570      	push	{r4, r5, r6, lr}
	os_print(&debug_mod, "%c", debug_rx_val);
     d66:	4d06      	ldr	r5, [pc, #24]	; (d80 <debug_rx_cb+0x1c>)
     d68:	4c06      	ldr	r4, [pc, #24]	; (d84 <debug_rx_cb+0x20>)
     d6a:	782a      	ldrb	r2, [r5, #0]
     d6c:	0020      	movs	r0, r4
     d6e:	b2d2      	uxtb	r2, r2
     d70:	4905      	ldr	r1, [pc, #20]	; (d88 <debug_rx_cb+0x24>)
     d72:	4b06      	ldr	r3, [pc, #24]	; (d8c <debug_rx_cb+0x28>)
     d74:	4798      	blx	r3
	usart_read_job(&debug_mod, &debug_rx_val);
     d76:	0029      	movs	r1, r5
     d78:	0020      	movs	r0, r4
     d7a:	4b05      	ldr	r3, [pc, #20]	; (d90 <debug_rx_cb+0x2c>)
     d7c:	4798      	blx	r3
}
     d7e:	bd70      	pop	{r4, r5, r6, pc}
     d80:	200000a0 	.word	0x200000a0
     d84:	200000fc 	.word	0x200000fc
     d88:	00002004 	.word	0x00002004
     d8c:	00000d09 	.word	0x00000d09
     d90:	00000a19 	.word	0x00000a19

00000d94 <os_usart_service_start>:
{
     d94:	b510      	push	{r4, lr}
	usart_read_job(&debug_mod, &debug_rx_val);
     d96:	4902      	ldr	r1, [pc, #8]	; (da0 <os_usart_service_start+0xc>)
     d98:	4802      	ldr	r0, [pc, #8]	; (da4 <os_usart_service_start+0x10>)
     d9a:	4b03      	ldr	r3, [pc, #12]	; (da8 <os_usart_service_start+0x14>)
     d9c:	4798      	blx	r3
}
     d9e:	bd10      	pop	{r4, pc}
     da0:	200000a0 	.word	0x200000a0
     da4:	200000fc 	.word	0x200000fc
     da8:	00000a19 	.word	0x00000a19

00000dac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     dac:	4b0b      	ldr	r3, [pc, #44]	; (ddc <cpu_irq_enter_critical+0x30>)
     dae:	681a      	ldr	r2, [r3, #0]
     db0:	2a00      	cmp	r2, #0
     db2:	d105      	bne.n	dc0 <cpu_irq_enter_critical+0x14>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     db4:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
     db8:	2900      	cmp	r1, #0
     dba:	d005      	beq.n	dc8 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     dbc:	4908      	ldr	r1, [pc, #32]	; (de0 <cpu_irq_enter_critical+0x34>)
     dbe:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     dc0:	681a      	ldr	r2, [r3, #0]
     dc2:	3201      	adds	r2, #1
     dc4:	601a      	str	r2, [r3, #0]
}
     dc6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     dc8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     dca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     dce:	4a05      	ldr	r2, [pc, #20]	; (de4 <cpu_irq_enter_critical+0x38>)
     dd0:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
     dd2:	4a03      	ldr	r2, [pc, #12]	; (de0 <cpu_irq_enter_critical+0x34>)
     dd4:	3101      	adds	r1, #1
     dd6:	7011      	strb	r1, [r2, #0]
     dd8:	e7f2      	b.n	dc0 <cpu_irq_enter_critical+0x14>
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	200000a4 	.word	0x200000a4
     de0:	200000a8 	.word	0x200000a8
     de4:	20000000 	.word	0x20000000

00000de8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     de8:	4b08      	ldr	r3, [pc, #32]	; (e0c <cpu_irq_leave_critical+0x24>)
     dea:	681a      	ldr	r2, [r3, #0]
     dec:	3a01      	subs	r2, #1
     dee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	2b00      	cmp	r3, #0
     df4:	d109      	bne.n	e0a <cpu_irq_leave_critical+0x22>
     df6:	4b06      	ldr	r3, [pc, #24]	; (e10 <cpu_irq_leave_critical+0x28>)
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d005      	beq.n	e0a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     dfe:	2201      	movs	r2, #1
     e00:	4b04      	ldr	r3, [pc, #16]	; (e14 <cpu_irq_leave_critical+0x2c>)
     e02:	701a      	strb	r2, [r3, #0]
     e04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     e08:	b662      	cpsie	i
	}
}
     e0a:	4770      	bx	lr
     e0c:	200000a4 	.word	0x200000a4
     e10:	200000a8 	.word	0x200000a8
     e14:	20000000 	.word	0x20000000

00000e18 <system_board_init>:
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     e18:	2301      	movs	r3, #1
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     e1a:	b510      	push	{r4, lr}
	config->powersave  = false;
     e1c:	2400      	movs	r4, #0
     e1e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     e20:	a901      	add	r1, sp, #4
     e22:	704b      	strb	r3, [r1, #1]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     e24:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     e26:	20ff      	movs	r0, #255	; 0xff
     e28:	4b02      	ldr	r3, [pc, #8]	; (e34 <system_board_init+0x1c>)
	config->powersave  = false;
     e2a:	708c      	strb	r4, [r1, #2]
     e2c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e2e:	61a4      	str	r4, [r4, #24]
     e30:	deff      	udf	#255	; 0xff
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	00000e39 	.word	0x00000e39

00000e38 <port_pin_set_config>:
     e38:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e3a:	b500      	push	{lr}
     e3c:	b083      	sub	sp, #12
     e3e:	ab01      	add	r3, sp, #4
     e40:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e42:	780a      	ldrb	r2, [r1, #0]
     e44:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e46:	784a      	ldrb	r2, [r1, #1]
     e48:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e4a:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e4c:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     e4e:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e50:	4b01      	ldr	r3, [pc, #4]	; (e58 <port_pin_set_config+0x20>)
     e52:	4798      	blx	r3
}
     e54:	b003      	add	sp, #12
     e56:	bd00      	pop	{pc}
     e58:	000013e9 	.word	0x000013e9

00000e5c <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e5c:	2102      	movs	r1, #2
     e5e:	480d      	ldr	r0, [pc, #52]	; (e94 <system_clock_source_enable.part.0+0x38>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     e60:	4a0d      	ldr	r2, [pc, #52]	; (e98 <system_clock_source_enable.part.0+0x3c>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e62:	6803      	ldr	r3, [r0, #0]
     e64:	430b      	orrs	r3, r1
     e66:	6003      	str	r3, [r0, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     e68:	8491      	strh	r1, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e6a:	310e      	adds	r1, #14
     e6c:	68d3      	ldr	r3, [r2, #12]
     e6e:	4219      	tst	r1, r3
     e70:	d0fc      	beq.n	e6c <system_clock_source_enable.part.0+0x10>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e72:	6883      	ldr	r3, [r0, #8]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e74:	2110      	movs	r1, #16
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e76:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e78:	6843      	ldr	r3, [r0, #4]
     e7a:	6293      	str	r3, [r2, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e7c:	2300      	movs	r3, #0
     e7e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e80:	4a05      	ldr	r2, [pc, #20]	; (e98 <system_clock_source_enable.part.0+0x3c>)
     e82:	68d3      	ldr	r3, [r2, #12]
     e84:	4219      	tst	r1, r3
     e86:	d0fc      	beq.n	e82 <system_clock_source_enable.part.0+0x26>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e88:	6803      	ldr	r3, [r0, #0]
     e8a:	b29b      	uxth	r3, r3
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     e8c:	2000      	movs	r0, #0
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e8e:	8493      	strh	r3, [r2, #36]	; 0x24
}
     e90:	4770      	bx	lr
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	200000ac 	.word	0x200000ac
     e98:	40000800 	.word	0x40000800

00000e9c <system_clock_source_get_hz>:
{
     e9c:	b510      	push	{r4, lr}
	switch (clock_source) {
     e9e:	2808      	cmp	r0, #8
     ea0:	d82d      	bhi.n	efe <system_clock_source_get_hz+0x62>
     ea2:	4b1c      	ldr	r3, [pc, #112]	; (f14 <system_clock_source_get_hz+0x78>)
     ea4:	0080      	lsls	r0, r0, #2
     ea6:	581b      	ldr	r3, [r3, r0]
     ea8:	469f      	mov	pc, r3
		return 32768UL;
     eaa:	2080      	movs	r0, #128	; 0x80
     eac:	0200      	lsls	r0, r0, #8
}
     eae:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
     eb0:	4b19      	ldr	r3, [pc, #100]	; (f18 <system_clock_source_get_hz+0x7c>)
     eb2:	6958      	ldr	r0, [r3, #20]
     eb4:	e7fb      	b.n	eae <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     eb6:	4b19      	ldr	r3, [pc, #100]	; (f1c <system_clock_source_get_hz+0x80>)
     eb8:	4819      	ldr	r0, [pc, #100]	; (f20 <system_clock_source_get_hz+0x84>)
     eba:	6a1b      	ldr	r3, [r3, #32]
     ebc:	059b      	lsls	r3, r3, #22
     ebe:	0f9b      	lsrs	r3, r3, #30
     ec0:	40d8      	lsrs	r0, r3
     ec2:	e7f4      	b.n	eae <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ec4:	4c14      	ldr	r4, [pc, #80]	; (f18 <system_clock_source_get_hz+0x7c>)
			return 0;
     ec6:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ec8:	6823      	ldr	r3, [r4, #0]
     eca:	079b      	lsls	r3, r3, #30
     ecc:	d5ef      	bpl.n	eae <system_clock_source_get_hz+0x12>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ece:	2210      	movs	r2, #16
     ed0:	4912      	ldr	r1, [pc, #72]	; (f1c <system_clock_source_get_hz+0x80>)
     ed2:	68cb      	ldr	r3, [r1, #12]
     ed4:	421a      	tst	r2, r3
     ed6:	d0fc      	beq.n	ed2 <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
     ed8:	2324      	movs	r3, #36	; 0x24
     eda:	6822      	ldr	r2, [r4, #0]
     edc:	4013      	ands	r3, r2
     ede:	2b04      	cmp	r3, #4
     ee0:	d00f      	beq.n	f02 <system_clock_source_get_hz+0x66>
			return 48000000UL;
     ee2:	4810      	ldr	r0, [pc, #64]	; (f24 <system_clock_source_get_hz+0x88>)
     ee4:	e7e3      	b.n	eae <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
     ee6:	4b0c      	ldr	r3, [pc, #48]	; (f18 <system_clock_source_get_hz+0x7c>)
     ee8:	6918      	ldr	r0, [r3, #16]
     eea:	e7e0      	b.n	eae <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     eec:	2350      	movs	r3, #80	; 0x50
     eee:	4a0b      	ldr	r2, [pc, #44]	; (f1c <system_clock_source_get_hz+0x80>)
			return 0;
     ef0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ef2:	5cd3      	ldrb	r3, [r2, r3]
     ef4:	075b      	lsls	r3, r3, #29
     ef6:	d5da      	bpl.n	eae <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
     ef8:	4b07      	ldr	r3, [pc, #28]	; (f18 <system_clock_source_get_hz+0x7c>)
     efa:	68d8      	ldr	r0, [r3, #12]
     efc:	e7d7      	b.n	eae <system_clock_source_get_hz+0x12>
		return 0;
     efe:	2000      	movs	r0, #0
     f00:	e7d5      	b.n	eae <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f02:	4b09      	ldr	r3, [pc, #36]	; (f28 <system_clock_source_get_hz+0x8c>)
     f04:	2000      	movs	r0, #0
     f06:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f08:	68a3      	ldr	r3, [r4, #8]
     f0a:	041b      	lsls	r3, r3, #16
     f0c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f0e:	4358      	muls	r0, r3
     f10:	e7cd      	b.n	eae <system_clock_source_get_hz+0x12>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00002008 	.word	0x00002008
     f18:	200000ac 	.word	0x200000ac
     f1c:	40000800 	.word	0x40000800
     f20:	007a1200 	.word	0x007a1200
     f24:	02dc6c00 	.word	0x02dc6c00
     f28:	00001305 	.word	0x00001305

00000f2c <system_clock_source_dfll_set_config>:
{
     f2c:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f2e:	7a03      	ldrb	r3, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f30:	8942      	ldrh	r2, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f32:	069b      	lsls	r3, r3, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f34:	0592      	lsls	r2, r2, #22
     f36:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f38:	0c1b      	lsrs	r3, r3, #16
     f3a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     f3c:	4a17      	ldr	r2, [pc, #92]	; (f9c <system_clock_source_dfll_set_config+0x70>)
     f3e:	6053      	str	r3, [r2, #4]
			(uint32_t)config->wakeup_lock     |
     f40:	79c1      	ldrb	r1, [r0, #7]
     f42:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->quick_lock      |
     f44:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     f46:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
     f48:	8841      	ldrh	r1, [r0, #2]
     f4a:	4321      	orrs	r1, r4
     f4c:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     f4e:	7841      	ldrb	r1, [r0, #1]
     f50:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     f52:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
     f54:	6013      	str	r3, [r2, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     f56:	7803      	ldrb	r3, [r0, #0]
     f58:	2b04      	cmp	r3, #4
     f5a:	d010      	beq.n	f7e <system_clock_source_dfll_set_config+0x52>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     f5c:	2b20      	cmp	r3, #32
     f5e:	d10d      	bne.n	f7c <system_clock_source_dfll_set_config+0x50>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f60:	7b03      	ldrb	r3, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f62:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f64:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f66:	430b      	orrs	r3, r1
     f68:	89c1      	ldrh	r1, [r0, #14]
     f6a:	480d      	ldr	r0, [pc, #52]	; (fa0 <system_clock_source_dfll_set_config+0x74>)
     f6c:	0409      	lsls	r1, r1, #16
     f6e:	4001      	ands	r1, r0
     f70:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
     f72:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     f74:	6811      	ldr	r1, [r2, #0]
     f76:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <system_clock_source_dfll_set_config+0x78>)
     f78:	430b      	orrs	r3, r1
     f7a:	6013      	str	r3, [r2, #0]
}
     f7c:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f7e:	7b01      	ldrb	r1, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f80:	8a04      	ldrh	r4, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f82:	0689      	lsls	r1, r1, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f84:	89c0      	ldrh	r0, [r0, #14]
     f86:	4321      	orrs	r1, r4
     f88:	4c05      	ldr	r4, [pc, #20]	; (fa0 <system_clock_source_dfll_set_config+0x74>)
     f8a:	0400      	lsls	r0, r0, #16
     f8c:	4020      	ands	r0, r4
     f8e:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
     f90:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     f92:	6811      	ldr	r1, [r2, #0]
     f94:	430b      	orrs	r3, r1
     f96:	6013      	str	r3, [r2, #0]
     f98:	e7f0      	b.n	f7c <system_clock_source_dfll_set_config+0x50>
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	200000ac 	.word	0x200000ac
     fa0:	03ff0000 	.word	0x03ff0000
     fa4:	00000424 	.word	0x00000424

00000fa8 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fa8:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     faa:	211e      	movs	r1, #30
{
     fac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fae:	4b37      	ldr	r3, [pc, #220]	; (108c <system_clock_init+0xe4>)
     fb0:	00d2      	lsls	r2, r2, #3
     fb2:	609a      	str	r2, [r3, #8]
     fb4:	4a36      	ldr	r2, [pc, #216]	; (1090 <system_clock_init+0xe8>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fb6:	2400      	movs	r4, #0
     fb8:	6853      	ldr	r3, [r2, #4]
{
     fba:	b088      	sub	sp, #32
     fbc:	438b      	bics	r3, r1
     fbe:	391a      	subs	r1, #26
     fc0:	430b      	orrs	r3, r1
     fc2:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     fc4:	2301      	movs	r3, #1
     fc6:	ad03      	add	r5, sp, #12
     fc8:	4e32      	ldr	r6, [pc, #200]	; (1094 <system_clock_init+0xec>)
     fca:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fcc:	b2e0      	uxtb	r0, r4
     fce:	0029      	movs	r1, r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fd0:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fd2:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fd4:	2c25      	cmp	r4, #37	; 0x25
     fd6:	d1f9      	bne.n	fcc <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     fd8:	2300      	movs	r3, #0
     fda:	2200      	movs	r2, #0
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     fdc:	71ab      	strb	r3, [r5, #6]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     fde:	806a      	strh	r2, [r5, #2]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     fe0:	71eb      	strb	r3, [r5, #7]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
     fe2:	706b      	strb	r3, [r5, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     fe4:	3220      	adds	r2, #32
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fe6:	4b2c      	ldr	r3, [pc, #176]	; (1098 <system_clock_init+0xf0>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     fe8:	702a      	strb	r2, [r5, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     fee:	2b3f      	cmp	r3, #63	; 0x3f
     ff0:	d04a      	beq.n	1088 <system_clock_init+0xe0>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     ff2:	722b      	strb	r3, [r5, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     ff4:	2307      	movs	r3, #7
     ff6:	732b      	strb	r3, [r5, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
     ff8:	3303      	adds	r3, #3
     ffa:	81eb      	strh	r3, [r5, #14]
		dfll_conf.fine_value   = 0x1ff;
     ffc:	4b27      	ldr	r3, [pc, #156]	; (109c <system_clock_init+0xf4>)
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     ffe:	0028      	movs	r0, r5
		dfll_conf.fine_value   = 0x1ff;
    1000:	816b      	strh	r3, [r5, #10]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    1002:	3bff      	subs	r3, #255	; 0xff
    1004:	80ab      	strh	r3, [r5, #4]
		dfll_conf.multiply_factor = 48000;
    1006:	4b26      	ldr	r3, [pc, #152]	; (10a0 <system_clock_init+0xf8>)
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1008:	4c20      	ldr	r4, [pc, #128]	; (108c <system_clock_init+0xe4>)
		dfll_conf.multiply_factor = 48000;
    100a:	822b      	strh	r3, [r5, #16]
	system_clock_source_dfll_set_config(&dfll_conf);
    100c:	4b25      	ldr	r3, [pc, #148]	; (10a4 <system_clock_init+0xfc>)
    100e:	4798      	blx	r3
	SYSCTRL->OSC8M = temp;
    1010:	2240      	movs	r2, #64	; 0x40
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1012:	6a23      	ldr	r3, [r4, #32]
	SYSCTRL->OSC8M = temp;
    1014:	4393      	bics	r3, r2
    1016:	3240      	adds	r2, #64	; 0x40
    1018:	4313      	orrs	r3, r2
    101a:	4a23      	ldr	r2, [pc, #140]	; (10a8 <system_clock_init+0x100>)
    101c:	4013      	ands	r3, r2
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    101e:	2202      	movs	r2, #2
	SYSCTRL->OSC8M = temp;
    1020:	6223      	str	r3, [r4, #32]
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1022:	6a23      	ldr	r3, [r4, #32]
    1024:	4313      	orrs	r3, r2
    1026:	6223      	str	r3, [r4, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1028:	4b20      	ldr	r3, [pc, #128]	; (10ac <system_clock_init+0x104>)
    102a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    102c:	2301      	movs	r3, #1
	config->high_when_disabled = false;
    102e:	466a      	mov	r2, sp
	config->division_factor    = 1;
    1030:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    1032:	2300      	movs	r3, #0
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1034:	4669      	mov	r1, sp
	config->high_when_disabled = false;
    1036:	7053      	strb	r3, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1038:	2206      	movs	r2, #6

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    103a:	2003      	movs	r0, #3
    103c:	4e1c      	ldr	r6, [pc, #112]	; (10b0 <system_clock_init+0x108>)
#endif
	config->run_in_standby     = false;
    103e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1040:	724b      	strb	r3, [r1, #9]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1042:	700a      	strb	r2, [r1, #0]
    1044:	47b0      	blx	r6
    1046:	2003      	movs	r0, #3
    1048:	4d1a      	ldr	r5, [pc, #104]	; (10b4 <system_clock_init+0x10c>)
    104a:	47a8      	blx	r5
    104c:	4b1a      	ldr	r3, [pc, #104]	; (10b8 <system_clock_init+0x110>)
    104e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1050:	2110      	movs	r1, #16
    1052:	68e3      	ldr	r3, [r4, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1054:	4219      	tst	r1, r3
    1056:	d0fc      	beq.n	1052 <system_clock_init+0xaa>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1058:	2180      	movs	r1, #128	; 0x80
    105a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    105c:	4a17      	ldr	r2, [pc, #92]	; (10bc <system_clock_init+0x114>)
    105e:	430b      	orrs	r3, r1
    1060:	84a3      	strh	r3, [r4, #36]	; 0x24
    1062:	2300      	movs	r3, #0
	config->high_when_disabled = false;
    1064:	4669      	mov	r1, sp
    1066:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1068:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    106a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    106c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    106e:	2201      	movs	r2, #1
	config->high_when_disabled = false;
    1070:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    1072:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1074:	2000      	movs	r0, #0
    1076:	3307      	adds	r3, #7
	config->division_factor    = 1;
    1078:	9201      	str	r2, [sp, #4]
    107a:	700b      	strb	r3, [r1, #0]
    107c:	720a      	strb	r2, [r1, #8]
    107e:	47b0      	blx	r6
    1080:	2000      	movs	r0, #0
    1082:	47a8      	blx	r5
#endif
}
    1084:	b008      	add	sp, #32
    1086:	bd70      	pop	{r4, r5, r6, pc}
	if (coarse == 0x3f) {
    1088:	3b20      	subs	r3, #32
    108a:	e7b2      	b.n	ff2 <system_clock_init+0x4a>
    108c:	40000800 	.word	0x40000800
    1090:	41004000 	.word	0x41004000
    1094:	000012e9 	.word	0x000012e9
    1098:	00806024 	.word	0x00806024
    109c:	000001ff 	.word	0x000001ff
    10a0:	ffffbb80 	.word	0xffffbb80
    10a4:	00000f2d 	.word	0x00000f2d
    10a8:	fffffcff 	.word	0xfffffcff
    10ac:	000010c1 	.word	0x000010c1
    10b0:	000010e5 	.word	0x000010e5
    10b4:	00001199 	.word	0x00001199
    10b8:	00000e5d 	.word	0x00000e5d
    10bc:	40000400 	.word	0x40000400

000010c0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    10c0:	2108      	movs	r1, #8
    10c2:	4a06      	ldr	r2, [pc, #24]	; (10dc <system_gclk_init+0x1c>)
    10c4:	6993      	ldr	r3, [r2, #24]
    10c6:	430b      	orrs	r3, r1
    10c8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10ca:	2301      	movs	r3, #1
    10cc:	4a04      	ldr	r2, [pc, #16]	; (10e0 <system_gclk_init+0x20>)
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10ce:	3907      	subs	r1, #7
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10d0:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10d2:	7813      	ldrb	r3, [r2, #0]
    10d4:	4219      	tst	r1, r3
    10d6:	d1fc      	bne.n	10d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10d8:	4770      	bx	lr
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	40000400 	.word	0x40000400
    10e0:	40000c00 	.word	0x40000c00

000010e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10e4:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10e6:	780b      	ldrb	r3, [r1, #0]
{
    10e8:	0006      	movs	r6, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10ea:	021b      	lsls	r3, r3, #8
    10ec:	4303      	orrs	r3, r0
    10ee:	001d      	movs	r5, r3

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    10f0:	784b      	ldrb	r3, [r1, #1]
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    10f2:	0004      	movs	r4, r0
	if (config->high_when_disabled) {
    10f4:	2b00      	cmp	r3, #0
    10f6:	d002      	beq.n	10fe <system_gclk_gen_set_config+0x1a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    10f8:	2380      	movs	r3, #128	; 0x80
    10fa:	02db      	lsls	r3, r3, #11
    10fc:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    10fe:	7a4b      	ldrb	r3, [r1, #9]
    1100:	2b00      	cmp	r3, #0
    1102:	d002      	beq.n	110a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1104:	2380      	movs	r3, #128	; 0x80
    1106:	031b      	lsls	r3, r3, #12
    1108:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    110a:	6848      	ldr	r0, [r1, #4]
    110c:	2801      	cmp	r0, #1
    110e:	d90f      	bls.n	1130 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1110:	1e43      	subs	r3, r0, #1
    1112:	4218      	tst	r0, r3
    1114:	d12f      	bne.n	1176 <system_gclk_gen_set_config+0x92>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1116:	2802      	cmp	r0, #2
    1118:	d033      	beq.n	1182 <system_gclk_gen_set_config+0x9e>
    111a:	2302      	movs	r3, #2
    111c:	2400      	movs	r4, #0
						mask <<= 1) {
				div2_count++;
    111e:	3401      	adds	r4, #1
						mask <<= 1) {
    1120:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1122:	4298      	cmp	r0, r3
    1124:	d8fb      	bhi.n	111e <system_gclk_gen_set_config+0x3a>
    1126:	0224      	lsls	r4, r4, #8
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1128:	2380      	movs	r3, #128	; 0x80
    112a:	035b      	lsls	r3, r3, #13
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    112c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    112e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1130:	7a0b      	ldrb	r3, [r1, #8]
    1132:	2b00      	cmp	r3, #0
    1134:	d002      	beq.n	113c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1136:	2380      	movs	r3, #128	; 0x80
    1138:	039b      	lsls	r3, r3, #14
    113a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    113c:	4a12      	ldr	r2, [pc, #72]	; (1188 <system_gclk_gen_set_config+0xa4>)
    113e:	7853      	ldrb	r3, [r2, #1]
    1140:	b25b      	sxtb	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	dbfb      	blt.n	113e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1146:	4b11      	ldr	r3, [pc, #68]	; (118c <system_gclk_gen_set_config+0xa8>)
    1148:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    114a:	4b11      	ldr	r3, [pc, #68]	; (1190 <system_gclk_gen_set_config+0xac>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    114c:	4a0e      	ldr	r2, [pc, #56]	; (1188 <system_gclk_gen_set_config+0xa4>)
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    114e:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1150:	7853      	ldrb	r3, [r2, #1]
    1152:	b25b      	sxtb	r3, r3
    1154:	2b00      	cmp	r3, #0
    1156:	dbfb      	blt.n	1150 <system_gclk_gen_set_config+0x6c>
    1158:	490b      	ldr	r1, [pc, #44]	; (1188 <system_gclk_gen_set_config+0xa4>)

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    115a:	6094      	str	r4, [r2, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    115c:	784a      	ldrb	r2, [r1, #1]
    115e:	b252      	sxtb	r2, r2
    1160:	2a00      	cmp	r2, #0
    1162:	dbfb      	blt.n	115c <system_gclk_gen_set_config+0x78>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1164:	2280      	movs	r2, #128	; 0x80
    1166:	684b      	ldr	r3, [r1, #4]
    1168:	0252      	lsls	r2, r2, #9
    116a:	4013      	ands	r3, r2
    116c:	432b      	orrs	r3, r5
    116e:	604b      	str	r3, [r1, #4]
	cpu_irq_leave_critical();
    1170:	4b08      	ldr	r3, [pc, #32]	; (1194 <system_gclk_gen_set_config+0xb0>)
    1172:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1174:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1176:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1178:	0204      	lsls	r4, r0, #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    117a:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |=
    117c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    117e:	431d      	orrs	r5, r3
    1180:	e7d6      	b.n	1130 <system_gclk_gen_set_config+0x4c>
			for (mask = (1UL << 1); mask < config->division_factor;
    1182:	2400      	movs	r4, #0
    1184:	e7d0      	b.n	1128 <system_gclk_gen_set_config+0x44>
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	40000c00 	.word	0x40000c00
    118c:	00000dad 	.word	0x00000dad
    1190:	40000c08 	.word	0x40000c08
    1194:	00000de9 	.word	0x00000de9

00001198 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1198:	b510      	push	{r4, lr}
    119a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    119c:	4a0a      	ldr	r2, [pc, #40]	; (11c8 <system_gclk_gen_enable+0x30>)
    119e:	7853      	ldrb	r3, [r2, #1]
    11a0:	b25b      	sxtb	r3, r3
    11a2:	2b00      	cmp	r3, #0
    11a4:	dbfb      	blt.n	119e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <system_gclk_gen_enable+0x34>)
    11a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11aa:	4b09      	ldr	r3, [pc, #36]	; (11d0 <system_gclk_gen_enable+0x38>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ac:	4a06      	ldr	r2, [pc, #24]	; (11c8 <system_gclk_gen_enable+0x30>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11ae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11b0:	7853      	ldrb	r3, [r2, #1]
    11b2:	b25b      	sxtb	r3, r3
    11b4:	2b00      	cmp	r3, #0
    11b6:	dbfb      	blt.n	11b0 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    11b8:	2380      	movs	r3, #128	; 0x80
    11ba:	6851      	ldr	r1, [r2, #4]
    11bc:	025b      	lsls	r3, r3, #9
    11be:	430b      	orrs	r3, r1
    11c0:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    11c2:	4b04      	ldr	r3, [pc, #16]	; (11d4 <system_gclk_gen_enable+0x3c>)
    11c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11c6:	bd10      	pop	{r4, pc}
    11c8:	40000c00 	.word	0x40000c00
    11cc:	00000dad 	.word	0x00000dad
    11d0:	40000c04 	.word	0x40000c04
    11d4:	00000de9 	.word	0x00000de9

000011d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    11d8:	b570      	push	{r4, r5, r6, lr}
    11da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11dc:	4a19      	ldr	r2, [pc, #100]	; (1244 <system_gclk_gen_get_hz+0x6c>)
    11de:	7853      	ldrb	r3, [r2, #1]
    11e0:	b25b      	sxtb	r3, r3
    11e2:	2b00      	cmp	r3, #0
    11e4:	dbfb      	blt.n	11de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    11e6:	4b18      	ldr	r3, [pc, #96]	; (1248 <system_gclk_gen_get_hz+0x70>)
    11e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11ea:	4b18      	ldr	r3, [pc, #96]	; (124c <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ec:	4d15      	ldr	r5, [pc, #84]	; (1244 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11ee:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11f0:	786b      	ldrb	r3, [r5, #1]
    11f2:	b25b      	sxtb	r3, r3
    11f4:	2b00      	cmp	r3, #0
    11f6:	dbfb      	blt.n	11f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    11f8:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
    11fa:	4b15      	ldr	r3, [pc, #84]	; (1250 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    11fc:	04c0      	lsls	r0, r0, #19
    11fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1200:	4798      	blx	r3
    1202:	0006      	movs	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1204:	4b11      	ldr	r3, [pc, #68]	; (124c <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1206:	4a0f      	ldr	r2, [pc, #60]	; (1244 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1208:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    120a:	686d      	ldr	r5, [r5, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    120c:	4b11      	ldr	r3, [pc, #68]	; (1254 <system_gclk_gen_get_hz+0x7c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    120e:	02ed      	lsls	r5, r5, #11
    1210:	0fed      	lsrs	r5, r5, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1212:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1214:	7853      	ldrb	r3, [r2, #1]
    1216:	b25b      	sxtb	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	dbfb      	blt.n	1214 <system_gclk_gen_get_hz+0x3c>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    121c:	6891      	ldr	r1, [r2, #8]
	cpu_irq_leave_critical();
    121e:	4b0e      	ldr	r3, [pc, #56]	; (1258 <system_gclk_gen_get_hz+0x80>)
    1220:	0209      	lsls	r1, r1, #8
    1222:	0c0c      	lsrs	r4, r1, #16
    1224:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1226:	2d00      	cmp	r5, #0
    1228:	d003      	beq.n	1232 <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    122a:	3401      	adds	r4, #1
    122c:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    122e:	0030      	movs	r0, r6
    1230:	bd70      	pop	{r4, r5, r6, pc}
	if (!divsel && divider > 1) {
    1232:	2c01      	cmp	r4, #1
    1234:	d9fb      	bls.n	122e <system_gclk_gen_get_hz+0x56>
		gen_input_hz /= divider;
    1236:	0030      	movs	r0, r6
    1238:	0021      	movs	r1, r4
    123a:	4b08      	ldr	r3, [pc, #32]	; (125c <system_gclk_gen_get_hz+0x84>)
    123c:	4798      	blx	r3
    123e:	0006      	movs	r6, r0
    1240:	e7f5      	b.n	122e <system_gclk_gen_get_hz+0x56>
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	40000c00 	.word	0x40000c00
    1248:	00000dad 	.word	0x00000dad
    124c:	40000c04 	.word	0x40000c04
    1250:	00000e9d 	.word	0x00000e9d
    1254:	40000c08 	.word	0x40000c08
    1258:	00000de9 	.word	0x00000de9
    125c:	000015a5 	.word	0x000015a5

00001260 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1260:	b510      	push	{r4, lr}
    1262:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <system_gclk_chan_enable+0x20>)
    1266:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1268:	4b06      	ldr	r3, [pc, #24]	; (1284 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    126a:	4a07      	ldr	r2, [pc, #28]	; (1288 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    126c:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    126e:	2380      	movs	r3, #128	; 0x80
    1270:	8851      	ldrh	r1, [r2, #2]
    1272:	01db      	lsls	r3, r3, #7
    1274:	430b      	orrs	r3, r1
    1276:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1278:	4b04      	ldr	r3, [pc, #16]	; (128c <system_gclk_chan_enable+0x2c>)
    127a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    127c:	bd10      	pop	{r4, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00000dad 	.word	0x00000dad
    1284:	40000c02 	.word	0x40000c02
    1288:	40000c00 	.word	0x40000c00
    128c:	00000de9 	.word	0x00000de9

00001290 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1290:	b510      	push	{r4, lr}
    1292:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1294:	4b0e      	ldr	r3, [pc, #56]	; (12d0 <system_gclk_chan_disable+0x40>)
    1296:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1298:	4b0e      	ldr	r3, [pc, #56]	; (12d4 <system_gclk_chan_disable+0x44>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    129a:	4a0f      	ldr	r2, [pc, #60]	; (12d8 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    129c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    129e:	8853      	ldrh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    12a0:	490e      	ldr	r1, [pc, #56]	; (12dc <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12a2:	051b      	lsls	r3, r3, #20
    12a4:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    12a6:	8853      	ldrh	r3, [r2, #2]
    12a8:	400b      	ands	r3, r1
    12aa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12ac:	8853      	ldrh	r3, [r2, #2]
    12ae:	490c      	ldr	r1, [pc, #48]	; (12e0 <system_gclk_chan_disable+0x50>)
    12b0:	400b      	ands	r3, r1
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    12b2:	2180      	movs	r1, #128	; 0x80
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12b4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    12b6:	01c9      	lsls	r1, r1, #7
    12b8:	8853      	ldrh	r3, [r2, #2]
    12ba:	420b      	tst	r3, r1
    12bc:	d1fc      	bne.n	12b8 <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    12be:	8851      	ldrh	r1, [r2, #2]
    12c0:	0203      	lsls	r3, r0, #8
    12c2:	4806      	ldr	r0, [pc, #24]	; (12dc <system_gclk_chan_disable+0x4c>)
    12c4:	4001      	ands	r1, r0
    12c6:	430b      	orrs	r3, r1
    12c8:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    12ca:	4b06      	ldr	r3, [pc, #24]	; (12e4 <system_gclk_chan_disable+0x54>)
    12cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12ce:	bd10      	pop	{r4, pc}
    12d0:	00000dad 	.word	0x00000dad
    12d4:	40000c02 	.word	0x40000c02
    12d8:	40000c00 	.word	0x40000c00
    12dc:	fffff0ff 	.word	0xfffff0ff
    12e0:	ffffbfff 	.word	0xffffbfff
    12e4:	00000de9 	.word	0x00000de9

000012e8 <system_gclk_chan_set_config>:
{
    12e8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    12ea:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    12ec:	4b03      	ldr	r3, [pc, #12]	; (12fc <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    12ee:	0224      	lsls	r4, r4, #8
    12f0:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    12f2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    12f4:	4b02      	ldr	r3, [pc, #8]	; (1300 <system_gclk_chan_set_config+0x18>)
    12f6:	b2a4      	uxth	r4, r4
    12f8:	805c      	strh	r4, [r3, #2]
}
    12fa:	bd10      	pop	{r4, pc}
    12fc:	00001291 	.word	0x00001291
    1300:	40000c00 	.word	0x40000c00

00001304 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1304:	b510      	push	{r4, lr}
    1306:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1308:	4b06      	ldr	r3, [pc, #24]	; (1324 <system_gclk_chan_get_hz+0x20>)
    130a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    130c:	4b06      	ldr	r3, [pc, #24]	; (1328 <system_gclk_chan_get_hz+0x24>)
    130e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1310:	4b06      	ldr	r3, [pc, #24]	; (132c <system_gclk_chan_get_hz+0x28>)
    1312:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <system_gclk_chan_get_hz+0x2c>)
    1316:	0524      	lsls	r4, r4, #20
    1318:	0f24      	lsrs	r4, r4, #28
    131a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    131c:	0020      	movs	r0, r4
    131e:	4b05      	ldr	r3, [pc, #20]	; (1334 <system_gclk_chan_get_hz+0x30>)
    1320:	4798      	blx	r3
}
    1322:	bd10      	pop	{r4, pc}
    1324:	00000dad 	.word	0x00000dad
    1328:	40000c02 	.word	0x40000c02
    132c:	40000c00 	.word	0x40000c00
    1330:	00000de9 	.word	0x00000de9
    1334:	000011d9 	.word	0x000011d9

00001338 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1338:	78d3      	ldrb	r3, [r2, #3]
{
    133a:	b570      	push	{r4, r5, r6, lr}
	if (!config->powersave) {
    133c:	2b00      	cmp	r3, #0
    133e:	d131      	bne.n	13a4 <_system_pinmux_config+0x6c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1340:	7813      	ldrb	r3, [r2, #0]
    1342:	2b80      	cmp	r3, #128	; 0x80
    1344:	d047      	beq.n	13d6 <_system_pinmux_config+0x9e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1346:	2480      	movs	r4, #128	; 0x80
    1348:	061b      	lsls	r3, r3, #24
    134a:	0264      	lsls	r4, r4, #9
    134c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    134e:	7854      	ldrb	r4, [r2, #1]
    1350:	2502      	movs	r5, #2
    1352:	0026      	movs	r6, r4
    1354:	43ae      	bics	r6, r5
    1356:	d107      	bne.n	1368 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1358:	7894      	ldrb	r4, [r2, #2]
    135a:	2c00      	cmp	r4, #0
    135c:	d137      	bne.n	13ce <_system_pinmux_config+0x96>
			pin_cfg |= PORT_WRCONFIG_INEN;
    135e:	2480      	movs	r4, #128	; 0x80
    1360:	02a4      	lsls	r4, r4, #10
    1362:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1364:	6041      	str	r1, [r0, #4]
    1366:	7854      	ldrb	r4, [r2, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1368:	3c01      	subs	r4, #1
    136a:	2c01      	cmp	r4, #1
    136c:	d935      	bls.n	13da <_system_pinmux_config+0xa2>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    136e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1370:	040d      	lsls	r5, r1, #16
    1372:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1374:	05e4      	lsls	r4, r4, #23
    1376:	432c      	orrs	r4, r5
    1378:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    137a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    137c:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    137e:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1380:	0624      	lsls	r4, r4, #24
    1382:	432c      	orrs	r4, r5
    1384:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1386:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1388:	78d4      	ldrb	r4, [r2, #3]
    138a:	2c00      	cmp	r4, #0
    138c:	d109      	bne.n	13a2 <_system_pinmux_config+0x6a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    138e:	035b      	lsls	r3, r3, #13
    1390:	d503      	bpl.n	139a <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1392:	7893      	ldrb	r3, [r2, #2]
    1394:	2b01      	cmp	r3, #1
    1396:	d023      	beq.n	13e0 <_system_pinmux_config+0xa8>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1398:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    139a:	7853      	ldrb	r3, [r2, #1]
    139c:	3b01      	subs	r3, #1
    139e:	2b01      	cmp	r3, #1
    13a0:	d913      	bls.n	13ca <_system_pinmux_config+0x92>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    13a2:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13a4:	23a0      	movs	r3, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13a6:	040c      	lsls	r4, r1, #16
    13a8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13aa:	05db      	lsls	r3, r3, #23
    13ac:	4323      	orrs	r3, r4
		port->DIRCLR.reg = pin_mask;
    13ae:	6041      	str	r1, [r0, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13b0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13b2:	23d0      	movs	r3, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13b4:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13b6:	061b      	lsls	r3, r3, #24
    13b8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13ba:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    13bc:	78d3      	ldrb	r3, [r2, #3]
    13be:	2b00      	cmp	r3, #0
    13c0:	d1ef      	bne.n	13a2 <_system_pinmux_config+0x6a>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13c2:	7853      	ldrb	r3, [r2, #1]
    13c4:	3b01      	subs	r3, #1
    13c6:	2b01      	cmp	r3, #1
    13c8:	d8eb      	bhi.n	13a2 <_system_pinmux_config+0x6a>
			port->DIRSET.reg = pin_mask;
    13ca:	6081      	str	r1, [r0, #8]
}
    13cc:	e7e9      	b.n	13a2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13ce:	24c0      	movs	r4, #192	; 0xc0
    13d0:	02e4      	lsls	r4, r4, #11
    13d2:	4323      	orrs	r3, r4
    13d4:	e7c6      	b.n	1364 <_system_pinmux_config+0x2c>
	uint32_t pin_cfg = 0;
    13d6:	2300      	movs	r3, #0
    13d8:	e7b9      	b.n	134e <_system_pinmux_config+0x16>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13da:	4c02      	ldr	r4, [pc, #8]	; (13e4 <_system_pinmux_config+0xac>)
    13dc:	4023      	ands	r3, r4
    13de:	e7c6      	b.n	136e <_system_pinmux_config+0x36>
				port->OUTSET.reg = pin_mask;
    13e0:	6181      	str	r1, [r0, #24]
    13e2:	e7da      	b.n	139a <_system_pinmux_config+0x62>
    13e4:	fffbffff 	.word	0xfffbffff

000013e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    13e8:	000a      	movs	r2, r1
    13ea:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13f0:	2900      	cmp	r1, #0
    13f2:	d104      	bne.n	13fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    13f4:	4906      	ldr	r1, [pc, #24]	; (1410 <system_pinmux_pin_set_config+0x28>)
    13f6:	0943      	lsrs	r3, r0, #5
    13f8:	468c      	mov	ip, r1
    13fa:	01db      	lsls	r3, r3, #7
    13fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    13fe:	241f      	movs	r4, #31
    1400:	2101      	movs	r1, #1
    1402:	4020      	ands	r0, r4
    1404:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1406:	0018      	movs	r0, r3
    1408:	4b02      	ldr	r3, [pc, #8]	; (1414 <system_pinmux_pin_set_config+0x2c>)
    140a:	4798      	blx	r3
}
    140c:	bd10      	pop	{r4, pc}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	41004400 	.word	0x41004400
    1414:	00001339 	.word	0x00001339

00001418 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1418:	4770      	bx	lr
    141a:	46c0      	nop			; (mov r8, r8)

0000141c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    141c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    141e:	4b05      	ldr	r3, [pc, #20]	; (1434 <system_init+0x18>)
    1420:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1422:	4b05      	ldr	r3, [pc, #20]	; (1438 <system_init+0x1c>)
    1424:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1426:	4b05      	ldr	r3, [pc, #20]	; (143c <system_init+0x20>)
    1428:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    142a:	4b05      	ldr	r3, [pc, #20]	; (1440 <system_init+0x24>)
    142c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    142e:	4b05      	ldr	r3, [pc, #20]	; (1444 <system_init+0x28>)
    1430:	4798      	blx	r3
}
    1432:	bd10      	pop	{r4, pc}
    1434:	00000fa9 	.word	0x00000fa9
    1438:	00000e19 	.word	0x00000e19
    143c:	00001419 	.word	0x00001419
    1440:	00001419 	.word	0x00001419
    1444:	00001419 	.word	0x00001419

00001448 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1448:	e7fe      	b.n	1448 <Dummy_Handler>
    144a:	46c0      	nop			; (mov r8, r8)

0000144c <Reset_Handler>:
        if (pSrc != pDest) {
    144c:	4828      	ldr	r0, [pc, #160]	; (14f0 <Reset_Handler+0xa4>)
    144e:	4929      	ldr	r1, [pc, #164]	; (14f4 <Reset_Handler+0xa8>)
{
    1450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1452:	4288      	cmp	r0, r1
    1454:	d00d      	beq.n	1472 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
    1456:	4a28      	ldr	r2, [pc, #160]	; (14f8 <Reset_Handler+0xac>)
    1458:	4291      	cmp	r1, r2
    145a:	d20a      	bcs.n	1472 <Reset_Handler+0x26>
    145c:	43cb      	mvns	r3, r1
    145e:	189b      	adds	r3, r3, r2
    1460:	2200      	movs	r2, #0
    1462:	089b      	lsrs	r3, r3, #2
    1464:	3301      	adds	r3, #1
    1466:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
    1468:	5884      	ldr	r4, [r0, r2]
    146a:	508c      	str	r4, [r1, r2]
    146c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    146e:	429a      	cmp	r2, r3
    1470:	d1fa      	bne.n	1468 <Reset_Handler+0x1c>
        for (pDest = &_szero; pDest < &_ezero;) {
    1472:	4a22      	ldr	r2, [pc, #136]	; (14fc <Reset_Handler+0xb0>)
    1474:	4922      	ldr	r1, [pc, #136]	; (1500 <Reset_Handler+0xb4>)
    1476:	428a      	cmp	r2, r1
    1478:	d209      	bcs.n	148e <Reset_Handler+0x42>
    147a:	43d3      	mvns	r3, r2
    147c:	185b      	adds	r3, r3, r1
    147e:	2103      	movs	r1, #3
    1480:	438b      	bics	r3, r1
                *pDest++ = 0;
    1482:	2100      	movs	r1, #0
    1484:	3304      	adds	r3, #4
    1486:	18d3      	adds	r3, r2, r3
    1488:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    148a:	429a      	cmp	r2, r3
    148c:	d1fc      	bne.n	1488 <Reset_Handler+0x3c>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    148e:	21ff      	movs	r1, #255	; 0xff
    1490:	4b1c      	ldr	r3, [pc, #112]	; (1504 <Reset_Handler+0xb8>)
    1492:	4a1d      	ldr	r2, [pc, #116]	; (1508 <Reset_Handler+0xbc>)
    1494:	438b      	bics	r3, r1
    1496:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1498:	2390      	movs	r3, #144	; 0x90
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    149a:	2503      	movs	r5, #3
    149c:	2402      	movs	r4, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    149e:	270c      	movs	r7, #12
    14a0:	2608      	movs	r6, #8
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14a2:	4a1a      	ldr	r2, [pc, #104]	; (150c <Reset_Handler+0xc0>)
    14a4:	39fd      	subs	r1, #253	; 0xfd
    14a6:	005b      	lsls	r3, r3, #1
    14a8:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14aa:	4a19      	ldr	r2, [pc, #100]	; (1510 <Reset_Handler+0xc4>)
    14ac:	78d3      	ldrb	r3, [r2, #3]
    14ae:	43ab      	bics	r3, r5
    14b0:	4323      	orrs	r3, r4
    14b2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14b4:	78d3      	ldrb	r3, [r2, #3]
    14b6:	43bb      	bics	r3, r7
    14b8:	4333      	orrs	r3, r6
    14ba:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14bc:	2230      	movs	r2, #48	; 0x30
    14be:	4b15      	ldr	r3, [pc, #84]	; (1514 <Reset_Handler+0xc8>)
    14c0:	7b98      	ldrb	r0, [r3, #14]
    14c2:	4390      	bics	r0, r2
    14c4:	2220      	movs	r2, #32
    14c6:	4310      	orrs	r0, r2
    14c8:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14ca:	7b99      	ldrb	r1, [r3, #14]
    14cc:	43b9      	bics	r1, r7
    14ce:	4331      	orrs	r1, r6
    14d0:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    14d2:	2180      	movs	r1, #128	; 0x80
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14d4:	7b9a      	ldrb	r2, [r3, #14]
    14d6:	43aa      	bics	r2, r5
    14d8:	4322      	orrs	r2, r4
    14da:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    14dc:	4a0e      	ldr	r2, [pc, #56]	; (1518 <Reset_Handler+0xcc>)
    14de:	6853      	ldr	r3, [r2, #4]
    14e0:	430b      	orrs	r3, r1
    14e2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    14e4:	4b0d      	ldr	r3, [pc, #52]	; (151c <Reset_Handler+0xd0>)
    14e6:	4798      	blx	r3
        main();
    14e8:	4b0d      	ldr	r3, [pc, #52]	; (1520 <Reset_Handler+0xd4>)
    14ea:	4798      	blx	r3
    14ec:	e7fe      	b.n	14ec <Reset_Handler+0xa0>
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	00002088 	.word	0x00002088
    14f4:	20000000 	.word	0x20000000
    14f8:	20000068 	.word	0x20000068
    14fc:	20000068 	.word	0x20000068
    1500:	20000168 	.word	0x20000168
    1504:	00000000 	.word	0x00000000
    1508:	e000ed00 	.word	0xe000ed00
    150c:	41007000 	.word	0x41007000
    1510:	41005000 	.word	0x41005000
    1514:	41004800 	.word	0x41004800
    1518:	41004000 	.word	0x41004000
    151c:	00001711 	.word	0x00001711
    1520:	00001541 	.word	0x00001541

00001524 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1524:	4a04      	ldr	r2, [pc, #16]	; (1538 <_sbrk+0x14>)
    1526:	6813      	ldr	r3, [r2, #0]
    1528:	2b00      	cmp	r3, #0
    152a:	d003      	beq.n	1534 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    152c:	1818      	adds	r0, r3, r0
    152e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1530:	0018      	movs	r0, r3
    1532:	4770      	bx	lr
    1534:	4b01      	ldr	r3, [pc, #4]	; (153c <_sbrk+0x18>)
    1536:	e7f9      	b.n	152c <_sbrk+0x8>
    1538:	200000c4 	.word	0x200000c4
    153c:	20002168 	.word	0x20002168

00001540 <main>:
#include "main21.h"
#include "os_usart.h"
#include "os_i2c.h"

int main(void)
{
    1540:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    1542:	2401      	movs	r4, #1
    1544:	4d0e      	ldr	r5, [pc, #56]	; (1580 <main+0x40>)
    1546:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1548:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    154c:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    154e:	2200      	movs	r2, #0
    1550:	4b0c      	ldr	r3, [pc, #48]	; (1584 <main+0x44>)
    1552:	701a      	strb	r2, [r3, #0]
    1554:	705a      	strb	r2, [r3, #1]
    1556:	709a      	strb	r2, [r3, #2]
    1558:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    155a:	711c      	strb	r4, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();
	system_init();
    155c:	4b0a      	ldr	r3, [pc, #40]	; (1588 <main+0x48>)
    155e:	4798      	blx	r3
	cpu_irq_enable();
    1560:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1562:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1566:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    1568:	4b08      	ldr	r3, [pc, #32]	; (158c <main+0x4c>)
    156a:	4798      	blx	r3
	os_usart_init();
    156c:	4b08      	ldr	r3, [pc, #32]	; (1590 <main+0x50>)
    156e:	4798      	blx	r3
	os_usart_service_start();
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <main+0x54>)
    1572:	4798      	blx	r3
	PDEBUG("hi\r\n");
    1574:	4908      	ldr	r1, [pc, #32]	; (1598 <main+0x58>)
    1576:	4809      	ldr	r0, [pc, #36]	; (159c <main+0x5c>)
    1578:	4b09      	ldr	r3, [pc, #36]	; (15a0 <main+0x60>)
    157a:	4798      	blx	r3
    157c:	e7fe      	b.n	157c <main+0x3c>
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	20000000 	.word	0x20000000
    1584:	200000d0 	.word	0x200000d0
    1588:	0000141d 	.word	0x0000141d
    158c:	00000115 	.word	0x00000115
    1590:	00000c39 	.word	0x00000c39
    1594:	00000d95 	.word	0x00000d95
    1598:	0000202c 	.word	0x0000202c
    159c:	200000fc 	.word	0x200000fc
    15a0:	00000d09 	.word	0x00000d09

000015a4 <__udivsi3>:
    15a4:	2200      	movs	r2, #0
    15a6:	0843      	lsrs	r3, r0, #1
    15a8:	428b      	cmp	r3, r1
    15aa:	d374      	bcc.n	1696 <__udivsi3+0xf2>
    15ac:	0903      	lsrs	r3, r0, #4
    15ae:	428b      	cmp	r3, r1
    15b0:	d35f      	bcc.n	1672 <__udivsi3+0xce>
    15b2:	0a03      	lsrs	r3, r0, #8
    15b4:	428b      	cmp	r3, r1
    15b6:	d344      	bcc.n	1642 <__udivsi3+0x9e>
    15b8:	0b03      	lsrs	r3, r0, #12
    15ba:	428b      	cmp	r3, r1
    15bc:	d328      	bcc.n	1610 <__udivsi3+0x6c>
    15be:	0c03      	lsrs	r3, r0, #16
    15c0:	428b      	cmp	r3, r1
    15c2:	d30d      	bcc.n	15e0 <__udivsi3+0x3c>
    15c4:	22ff      	movs	r2, #255	; 0xff
    15c6:	0209      	lsls	r1, r1, #8
    15c8:	ba12      	rev	r2, r2
    15ca:	0c03      	lsrs	r3, r0, #16
    15cc:	428b      	cmp	r3, r1
    15ce:	d302      	bcc.n	15d6 <__udivsi3+0x32>
    15d0:	1212      	asrs	r2, r2, #8
    15d2:	0209      	lsls	r1, r1, #8
    15d4:	d065      	beq.n	16a2 <__udivsi3+0xfe>
    15d6:	0b03      	lsrs	r3, r0, #12
    15d8:	428b      	cmp	r3, r1
    15da:	d319      	bcc.n	1610 <__udivsi3+0x6c>
    15dc:	e000      	b.n	15e0 <__udivsi3+0x3c>
    15de:	0a09      	lsrs	r1, r1, #8
    15e0:	0bc3      	lsrs	r3, r0, #15
    15e2:	428b      	cmp	r3, r1
    15e4:	d301      	bcc.n	15ea <__udivsi3+0x46>
    15e6:	03cb      	lsls	r3, r1, #15
    15e8:	1ac0      	subs	r0, r0, r3
    15ea:	4152      	adcs	r2, r2
    15ec:	0b83      	lsrs	r3, r0, #14
    15ee:	428b      	cmp	r3, r1
    15f0:	d301      	bcc.n	15f6 <__udivsi3+0x52>
    15f2:	038b      	lsls	r3, r1, #14
    15f4:	1ac0      	subs	r0, r0, r3
    15f6:	4152      	adcs	r2, r2
    15f8:	0b43      	lsrs	r3, r0, #13
    15fa:	428b      	cmp	r3, r1
    15fc:	d301      	bcc.n	1602 <__udivsi3+0x5e>
    15fe:	034b      	lsls	r3, r1, #13
    1600:	1ac0      	subs	r0, r0, r3
    1602:	4152      	adcs	r2, r2
    1604:	0b03      	lsrs	r3, r0, #12
    1606:	428b      	cmp	r3, r1
    1608:	d301      	bcc.n	160e <__udivsi3+0x6a>
    160a:	030b      	lsls	r3, r1, #12
    160c:	1ac0      	subs	r0, r0, r3
    160e:	4152      	adcs	r2, r2
    1610:	0ac3      	lsrs	r3, r0, #11
    1612:	428b      	cmp	r3, r1
    1614:	d301      	bcc.n	161a <__udivsi3+0x76>
    1616:	02cb      	lsls	r3, r1, #11
    1618:	1ac0      	subs	r0, r0, r3
    161a:	4152      	adcs	r2, r2
    161c:	0a83      	lsrs	r3, r0, #10
    161e:	428b      	cmp	r3, r1
    1620:	d301      	bcc.n	1626 <__udivsi3+0x82>
    1622:	028b      	lsls	r3, r1, #10
    1624:	1ac0      	subs	r0, r0, r3
    1626:	4152      	adcs	r2, r2
    1628:	0a43      	lsrs	r3, r0, #9
    162a:	428b      	cmp	r3, r1
    162c:	d301      	bcc.n	1632 <__udivsi3+0x8e>
    162e:	024b      	lsls	r3, r1, #9
    1630:	1ac0      	subs	r0, r0, r3
    1632:	4152      	adcs	r2, r2
    1634:	0a03      	lsrs	r3, r0, #8
    1636:	428b      	cmp	r3, r1
    1638:	d301      	bcc.n	163e <__udivsi3+0x9a>
    163a:	020b      	lsls	r3, r1, #8
    163c:	1ac0      	subs	r0, r0, r3
    163e:	4152      	adcs	r2, r2
    1640:	d2cd      	bcs.n	15de <__udivsi3+0x3a>
    1642:	09c3      	lsrs	r3, r0, #7
    1644:	428b      	cmp	r3, r1
    1646:	d301      	bcc.n	164c <__udivsi3+0xa8>
    1648:	01cb      	lsls	r3, r1, #7
    164a:	1ac0      	subs	r0, r0, r3
    164c:	4152      	adcs	r2, r2
    164e:	0983      	lsrs	r3, r0, #6
    1650:	428b      	cmp	r3, r1
    1652:	d301      	bcc.n	1658 <__udivsi3+0xb4>
    1654:	018b      	lsls	r3, r1, #6
    1656:	1ac0      	subs	r0, r0, r3
    1658:	4152      	adcs	r2, r2
    165a:	0943      	lsrs	r3, r0, #5
    165c:	428b      	cmp	r3, r1
    165e:	d301      	bcc.n	1664 <__udivsi3+0xc0>
    1660:	014b      	lsls	r3, r1, #5
    1662:	1ac0      	subs	r0, r0, r3
    1664:	4152      	adcs	r2, r2
    1666:	0903      	lsrs	r3, r0, #4
    1668:	428b      	cmp	r3, r1
    166a:	d301      	bcc.n	1670 <__udivsi3+0xcc>
    166c:	010b      	lsls	r3, r1, #4
    166e:	1ac0      	subs	r0, r0, r3
    1670:	4152      	adcs	r2, r2
    1672:	08c3      	lsrs	r3, r0, #3
    1674:	428b      	cmp	r3, r1
    1676:	d301      	bcc.n	167c <__udivsi3+0xd8>
    1678:	00cb      	lsls	r3, r1, #3
    167a:	1ac0      	subs	r0, r0, r3
    167c:	4152      	adcs	r2, r2
    167e:	0883      	lsrs	r3, r0, #2
    1680:	428b      	cmp	r3, r1
    1682:	d301      	bcc.n	1688 <__udivsi3+0xe4>
    1684:	008b      	lsls	r3, r1, #2
    1686:	1ac0      	subs	r0, r0, r3
    1688:	4152      	adcs	r2, r2
    168a:	0843      	lsrs	r3, r0, #1
    168c:	428b      	cmp	r3, r1
    168e:	d301      	bcc.n	1694 <__udivsi3+0xf0>
    1690:	004b      	lsls	r3, r1, #1
    1692:	1ac0      	subs	r0, r0, r3
    1694:	4152      	adcs	r2, r2
    1696:	1a41      	subs	r1, r0, r1
    1698:	d200      	bcs.n	169c <__udivsi3+0xf8>
    169a:	4601      	mov	r1, r0
    169c:	4152      	adcs	r2, r2
    169e:	4610      	mov	r0, r2
    16a0:	4770      	bx	lr
    16a2:	e7ff      	b.n	16a4 <__udivsi3+0x100>
    16a4:	b501      	push	{r0, lr}
    16a6:	2000      	movs	r0, #0
    16a8:	f000 f806 	bl	16b8 <__aeabi_idiv0>
    16ac:	bd02      	pop	{r1, pc}
    16ae:	46c0      	nop			; (mov r8, r8)

000016b0 <__aeabi_uidivmod>:
    16b0:	2900      	cmp	r1, #0
    16b2:	d0f7      	beq.n	16a4 <__udivsi3+0x100>
    16b4:	e776      	b.n	15a4 <__udivsi3>
    16b6:	4770      	bx	lr

000016b8 <__aeabi_idiv0>:
    16b8:	4770      	bx	lr
    16ba:	46c0      	nop			; (mov r8, r8)

000016bc <__aeabi_lmul>:
    16bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16be:	46ce      	mov	lr, r9
    16c0:	4647      	mov	r7, r8
    16c2:	0415      	lsls	r5, r2, #16
    16c4:	0c2d      	lsrs	r5, r5, #16
    16c6:	002e      	movs	r6, r5
    16c8:	b580      	push	{r7, lr}
    16ca:	0407      	lsls	r7, r0, #16
    16cc:	0c14      	lsrs	r4, r2, #16
    16ce:	0c3f      	lsrs	r7, r7, #16
    16d0:	4699      	mov	r9, r3
    16d2:	0c03      	lsrs	r3, r0, #16
    16d4:	437e      	muls	r6, r7
    16d6:	435d      	muls	r5, r3
    16d8:	4367      	muls	r7, r4
    16da:	4363      	muls	r3, r4
    16dc:	197f      	adds	r7, r7, r5
    16de:	0c34      	lsrs	r4, r6, #16
    16e0:	19e4      	adds	r4, r4, r7
    16e2:	469c      	mov	ip, r3
    16e4:	42a5      	cmp	r5, r4
    16e6:	d903      	bls.n	16f0 <__aeabi_lmul+0x34>
    16e8:	2380      	movs	r3, #128	; 0x80
    16ea:	025b      	lsls	r3, r3, #9
    16ec:	4698      	mov	r8, r3
    16ee:	44c4      	add	ip, r8
    16f0:	464b      	mov	r3, r9
    16f2:	4351      	muls	r1, r2
    16f4:	4343      	muls	r3, r0
    16f6:	0436      	lsls	r6, r6, #16
    16f8:	0c36      	lsrs	r6, r6, #16
    16fa:	0c25      	lsrs	r5, r4, #16
    16fc:	0424      	lsls	r4, r4, #16
    16fe:	4465      	add	r5, ip
    1700:	19a4      	adds	r4, r4, r6
    1702:	1859      	adds	r1, r3, r1
    1704:	1949      	adds	r1, r1, r5
    1706:	0020      	movs	r0, r4
    1708:	bc0c      	pop	{r2, r3}
    170a:	4690      	mov	r8, r2
    170c:	4699      	mov	r9, r3
    170e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001710 <__libc_init_array>:
    1710:	b570      	push	{r4, r5, r6, lr}
    1712:	2600      	movs	r6, #0
    1714:	4d0c      	ldr	r5, [pc, #48]	; (1748 <__libc_init_array+0x38>)
    1716:	4c0d      	ldr	r4, [pc, #52]	; (174c <__libc_init_array+0x3c>)
    1718:	1b64      	subs	r4, r4, r5
    171a:	10a4      	asrs	r4, r4, #2
    171c:	42a6      	cmp	r6, r4
    171e:	d109      	bne.n	1734 <__libc_init_array+0x24>
    1720:	2600      	movs	r6, #0
    1722:	f000 fca1 	bl	2068 <_init>
    1726:	4d0a      	ldr	r5, [pc, #40]	; (1750 <__libc_init_array+0x40>)
    1728:	4c0a      	ldr	r4, [pc, #40]	; (1754 <__libc_init_array+0x44>)
    172a:	1b64      	subs	r4, r4, r5
    172c:	10a4      	asrs	r4, r4, #2
    172e:	42a6      	cmp	r6, r4
    1730:	d105      	bne.n	173e <__libc_init_array+0x2e>
    1732:	bd70      	pop	{r4, r5, r6, pc}
    1734:	00b3      	lsls	r3, r6, #2
    1736:	58eb      	ldr	r3, [r5, r3]
    1738:	4798      	blx	r3
    173a:	3601      	adds	r6, #1
    173c:	e7ee      	b.n	171c <__libc_init_array+0xc>
    173e:	00b3      	lsls	r3, r6, #2
    1740:	58eb      	ldr	r3, [r5, r3]
    1742:	4798      	blx	r3
    1744:	3601      	adds	r6, #1
    1746:	e7f2      	b.n	172e <__libc_init_array+0x1e>
    1748:	00002074 	.word	0x00002074
    174c:	00002074 	.word	0x00002074
    1750:	00002074 	.word	0x00002074
    1754:	00002078 	.word	0x00002078

00001758 <memcpy>:
    1758:	2300      	movs	r3, #0
    175a:	b510      	push	{r4, lr}
    175c:	429a      	cmp	r2, r3
    175e:	d100      	bne.n	1762 <memcpy+0xa>
    1760:	bd10      	pop	{r4, pc}
    1762:	5ccc      	ldrb	r4, [r1, r3]
    1764:	54c4      	strb	r4, [r0, r3]
    1766:	3301      	adds	r3, #1
    1768:	e7f8      	b.n	175c <memcpy+0x4>

0000176a <memset>:
    176a:	0003      	movs	r3, r0
    176c:	1882      	adds	r2, r0, r2
    176e:	4293      	cmp	r3, r2
    1770:	d100      	bne.n	1774 <memset+0xa>
    1772:	4770      	bx	lr
    1774:	7019      	strb	r1, [r3, #0]
    1776:	3301      	adds	r3, #1
    1778:	e7f9      	b.n	176e <memset+0x4>

0000177a <strlen>:
    177a:	2300      	movs	r3, #0
    177c:	5cc2      	ldrb	r2, [r0, r3]
    177e:	3301      	adds	r3, #1
    1780:	2a00      	cmp	r2, #0
    1782:	d1fb      	bne.n	177c <strlen+0x2>
    1784:	1e58      	subs	r0, r3, #1
    1786:	4770      	bx	lr

00001788 <_vsiprintf_r>:
    1788:	b530      	push	{r4, r5, lr}
    178a:	b09b      	sub	sp, #108	; 0x6c
    178c:	9100      	str	r1, [sp, #0]
    178e:	9104      	str	r1, [sp, #16]
    1790:	4908      	ldr	r1, [pc, #32]	; (17b4 <_vsiprintf_r+0x2c>)
    1792:	466d      	mov	r5, sp
    1794:	9102      	str	r1, [sp, #8]
    1796:	9105      	str	r1, [sp, #20]
    1798:	2101      	movs	r1, #1
    179a:	2482      	movs	r4, #130	; 0x82
    179c:	4249      	negs	r1, r1
    179e:	81e9      	strh	r1, [r5, #14]
    17a0:	00a4      	lsls	r4, r4, #2
    17a2:	4669      	mov	r1, sp
    17a4:	81ac      	strh	r4, [r5, #12]
    17a6:	f000 f875 	bl	1894 <_svfiprintf_r>
    17aa:	2300      	movs	r3, #0
    17ac:	9a00      	ldr	r2, [sp, #0]
    17ae:	7013      	strb	r3, [r2, #0]
    17b0:	b01b      	add	sp, #108	; 0x6c
    17b2:	bd30      	pop	{r4, r5, pc}
    17b4:	7fffffff 	.word	0x7fffffff

000017b8 <vsiprintf>:
    17b8:	b510      	push	{r4, lr}
    17ba:	0013      	movs	r3, r2
    17bc:	000a      	movs	r2, r1
    17be:	0001      	movs	r1, r0
    17c0:	4802      	ldr	r0, [pc, #8]	; (17cc <vsiprintf+0x14>)
    17c2:	6800      	ldr	r0, [r0, #0]
    17c4:	f7ff ffe0 	bl	1788 <_vsiprintf_r>
    17c8:	bd10      	pop	{r4, pc}
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	20000004 	.word	0x20000004

000017d0 <__ssputs_r>:
    17d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d2:	688e      	ldr	r6, [r1, #8]
    17d4:	b085      	sub	sp, #20
    17d6:	0007      	movs	r7, r0
    17d8:	000c      	movs	r4, r1
    17da:	9203      	str	r2, [sp, #12]
    17dc:	9301      	str	r3, [sp, #4]
    17de:	429e      	cmp	r6, r3
    17e0:	d839      	bhi.n	1856 <__ssputs_r+0x86>
    17e2:	2390      	movs	r3, #144	; 0x90
    17e4:	898a      	ldrh	r2, [r1, #12]
    17e6:	00db      	lsls	r3, r3, #3
    17e8:	421a      	tst	r2, r3
    17ea:	d034      	beq.n	1856 <__ssputs_r+0x86>
    17ec:	2503      	movs	r5, #3
    17ee:	6909      	ldr	r1, [r1, #16]
    17f0:	6823      	ldr	r3, [r4, #0]
    17f2:	1a5b      	subs	r3, r3, r1
    17f4:	9302      	str	r3, [sp, #8]
    17f6:	6963      	ldr	r3, [r4, #20]
    17f8:	9802      	ldr	r0, [sp, #8]
    17fa:	435d      	muls	r5, r3
    17fc:	0feb      	lsrs	r3, r5, #31
    17fe:	195d      	adds	r5, r3, r5
    1800:	9b01      	ldr	r3, [sp, #4]
    1802:	106d      	asrs	r5, r5, #1
    1804:	3301      	adds	r3, #1
    1806:	181b      	adds	r3, r3, r0
    1808:	42ab      	cmp	r3, r5
    180a:	d900      	bls.n	180e <__ssputs_r+0x3e>
    180c:	001d      	movs	r5, r3
    180e:	0553      	lsls	r3, r2, #21
    1810:	d532      	bpl.n	1878 <__ssputs_r+0xa8>
    1812:	0029      	movs	r1, r5
    1814:	0038      	movs	r0, r7
    1816:	f000 fb31 	bl	1e7c <_malloc_r>
    181a:	1e06      	subs	r6, r0, #0
    181c:	d109      	bne.n	1832 <__ssputs_r+0x62>
    181e:	230c      	movs	r3, #12
    1820:	603b      	str	r3, [r7, #0]
    1822:	2340      	movs	r3, #64	; 0x40
    1824:	2001      	movs	r0, #1
    1826:	89a2      	ldrh	r2, [r4, #12]
    1828:	4240      	negs	r0, r0
    182a:	4313      	orrs	r3, r2
    182c:	81a3      	strh	r3, [r4, #12]
    182e:	b005      	add	sp, #20
    1830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1832:	9a02      	ldr	r2, [sp, #8]
    1834:	6921      	ldr	r1, [r4, #16]
    1836:	f7ff ff8f 	bl	1758 <memcpy>
    183a:	89a3      	ldrh	r3, [r4, #12]
    183c:	4a14      	ldr	r2, [pc, #80]	; (1890 <__ssputs_r+0xc0>)
    183e:	401a      	ands	r2, r3
    1840:	2380      	movs	r3, #128	; 0x80
    1842:	4313      	orrs	r3, r2
    1844:	81a3      	strh	r3, [r4, #12]
    1846:	9b02      	ldr	r3, [sp, #8]
    1848:	6126      	str	r6, [r4, #16]
    184a:	18f6      	adds	r6, r6, r3
    184c:	6026      	str	r6, [r4, #0]
    184e:	6165      	str	r5, [r4, #20]
    1850:	9e01      	ldr	r6, [sp, #4]
    1852:	1aed      	subs	r5, r5, r3
    1854:	60a5      	str	r5, [r4, #8]
    1856:	9b01      	ldr	r3, [sp, #4]
    1858:	42b3      	cmp	r3, r6
    185a:	d200      	bcs.n	185e <__ssputs_r+0x8e>
    185c:	001e      	movs	r6, r3
    185e:	0032      	movs	r2, r6
    1860:	9903      	ldr	r1, [sp, #12]
    1862:	6820      	ldr	r0, [r4, #0]
    1864:	f000 faad 	bl	1dc2 <memmove>
    1868:	68a3      	ldr	r3, [r4, #8]
    186a:	2000      	movs	r0, #0
    186c:	1b9b      	subs	r3, r3, r6
    186e:	60a3      	str	r3, [r4, #8]
    1870:	6823      	ldr	r3, [r4, #0]
    1872:	199e      	adds	r6, r3, r6
    1874:	6026      	str	r6, [r4, #0]
    1876:	e7da      	b.n	182e <__ssputs_r+0x5e>
    1878:	002a      	movs	r2, r5
    187a:	0038      	movs	r0, r7
    187c:	f000 fb5c 	bl	1f38 <_realloc_r>
    1880:	1e06      	subs	r6, r0, #0
    1882:	d1e0      	bne.n	1846 <__ssputs_r+0x76>
    1884:	6921      	ldr	r1, [r4, #16]
    1886:	0038      	movs	r0, r7
    1888:	f000 faae 	bl	1de8 <_free_r>
    188c:	e7c7      	b.n	181e <__ssputs_r+0x4e>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	fffffb7f 	.word	0xfffffb7f

00001894 <_svfiprintf_r>:
    1894:	b5f0      	push	{r4, r5, r6, r7, lr}
    1896:	b09f      	sub	sp, #124	; 0x7c
    1898:	9002      	str	r0, [sp, #8]
    189a:	9305      	str	r3, [sp, #20]
    189c:	898b      	ldrh	r3, [r1, #12]
    189e:	000f      	movs	r7, r1
    18a0:	0016      	movs	r6, r2
    18a2:	061b      	lsls	r3, r3, #24
    18a4:	d511      	bpl.n	18ca <_svfiprintf_r+0x36>
    18a6:	690b      	ldr	r3, [r1, #16]
    18a8:	2b00      	cmp	r3, #0
    18aa:	d10e      	bne.n	18ca <_svfiprintf_r+0x36>
    18ac:	2140      	movs	r1, #64	; 0x40
    18ae:	f000 fae5 	bl	1e7c <_malloc_r>
    18b2:	6038      	str	r0, [r7, #0]
    18b4:	6138      	str	r0, [r7, #16]
    18b6:	2800      	cmp	r0, #0
    18b8:	d105      	bne.n	18c6 <_svfiprintf_r+0x32>
    18ba:	230c      	movs	r3, #12
    18bc:	9a02      	ldr	r2, [sp, #8]
    18be:	3801      	subs	r0, #1
    18c0:	6013      	str	r3, [r2, #0]
    18c2:	b01f      	add	sp, #124	; 0x7c
    18c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18c6:	2340      	movs	r3, #64	; 0x40
    18c8:	617b      	str	r3, [r7, #20]
    18ca:	2300      	movs	r3, #0
    18cc:	ad06      	add	r5, sp, #24
    18ce:	616b      	str	r3, [r5, #20]
    18d0:	3320      	adds	r3, #32
    18d2:	766b      	strb	r3, [r5, #25]
    18d4:	3310      	adds	r3, #16
    18d6:	76ab      	strb	r3, [r5, #26]
    18d8:	0034      	movs	r4, r6
    18da:	7823      	ldrb	r3, [r4, #0]
    18dc:	2b00      	cmp	r3, #0
    18de:	d147      	bne.n	1970 <_svfiprintf_r+0xdc>
    18e0:	1ba3      	subs	r3, r4, r6
    18e2:	9304      	str	r3, [sp, #16]
    18e4:	d00d      	beq.n	1902 <_svfiprintf_r+0x6e>
    18e6:	1ba3      	subs	r3, r4, r6
    18e8:	0032      	movs	r2, r6
    18ea:	0039      	movs	r1, r7
    18ec:	9802      	ldr	r0, [sp, #8]
    18ee:	f7ff ff6f 	bl	17d0 <__ssputs_r>
    18f2:	1c43      	adds	r3, r0, #1
    18f4:	d100      	bne.n	18f8 <_svfiprintf_r+0x64>
    18f6:	e0b5      	b.n	1a64 <_svfiprintf_r+0x1d0>
    18f8:	696a      	ldr	r2, [r5, #20]
    18fa:	9b04      	ldr	r3, [sp, #16]
    18fc:	4694      	mov	ip, r2
    18fe:	4463      	add	r3, ip
    1900:	616b      	str	r3, [r5, #20]
    1902:	7823      	ldrb	r3, [r4, #0]
    1904:	2b00      	cmp	r3, #0
    1906:	d100      	bne.n	190a <_svfiprintf_r+0x76>
    1908:	e0ac      	b.n	1a64 <_svfiprintf_r+0x1d0>
    190a:	2201      	movs	r2, #1
    190c:	2300      	movs	r3, #0
    190e:	4252      	negs	r2, r2
    1910:	606a      	str	r2, [r5, #4]
    1912:	a902      	add	r1, sp, #8
    1914:	3254      	adds	r2, #84	; 0x54
    1916:	1852      	adds	r2, r2, r1
    1918:	3401      	adds	r4, #1
    191a:	602b      	str	r3, [r5, #0]
    191c:	60eb      	str	r3, [r5, #12]
    191e:	60ab      	str	r3, [r5, #8]
    1920:	7013      	strb	r3, [r2, #0]
    1922:	65ab      	str	r3, [r5, #88]	; 0x58
    1924:	4e58      	ldr	r6, [pc, #352]	; (1a88 <_svfiprintf_r+0x1f4>)
    1926:	2205      	movs	r2, #5
    1928:	7821      	ldrb	r1, [r4, #0]
    192a:	0030      	movs	r0, r6
    192c:	f000 fa3e 	bl	1dac <memchr>
    1930:	1c62      	adds	r2, r4, #1
    1932:	2800      	cmp	r0, #0
    1934:	d120      	bne.n	1978 <_svfiprintf_r+0xe4>
    1936:	6829      	ldr	r1, [r5, #0]
    1938:	06cb      	lsls	r3, r1, #27
    193a:	d504      	bpl.n	1946 <_svfiprintf_r+0xb2>
    193c:	2353      	movs	r3, #83	; 0x53
    193e:	ae02      	add	r6, sp, #8
    1940:	3020      	adds	r0, #32
    1942:	199b      	adds	r3, r3, r6
    1944:	7018      	strb	r0, [r3, #0]
    1946:	070b      	lsls	r3, r1, #28
    1948:	d504      	bpl.n	1954 <_svfiprintf_r+0xc0>
    194a:	2353      	movs	r3, #83	; 0x53
    194c:	202b      	movs	r0, #43	; 0x2b
    194e:	ae02      	add	r6, sp, #8
    1950:	199b      	adds	r3, r3, r6
    1952:	7018      	strb	r0, [r3, #0]
    1954:	7823      	ldrb	r3, [r4, #0]
    1956:	2b2a      	cmp	r3, #42	; 0x2a
    1958:	d016      	beq.n	1988 <_svfiprintf_r+0xf4>
    195a:	2000      	movs	r0, #0
    195c:	210a      	movs	r1, #10
    195e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1960:	7822      	ldrb	r2, [r4, #0]
    1962:	3a30      	subs	r2, #48	; 0x30
    1964:	2a09      	cmp	r2, #9
    1966:	d955      	bls.n	1a14 <_svfiprintf_r+0x180>
    1968:	2800      	cmp	r0, #0
    196a:	d015      	beq.n	1998 <_svfiprintf_r+0x104>
    196c:	9309      	str	r3, [sp, #36]	; 0x24
    196e:	e013      	b.n	1998 <_svfiprintf_r+0x104>
    1970:	2b25      	cmp	r3, #37	; 0x25
    1972:	d0b5      	beq.n	18e0 <_svfiprintf_r+0x4c>
    1974:	3401      	adds	r4, #1
    1976:	e7b0      	b.n	18da <_svfiprintf_r+0x46>
    1978:	2301      	movs	r3, #1
    197a:	1b80      	subs	r0, r0, r6
    197c:	4083      	lsls	r3, r0
    197e:	6829      	ldr	r1, [r5, #0]
    1980:	0014      	movs	r4, r2
    1982:	430b      	orrs	r3, r1
    1984:	602b      	str	r3, [r5, #0]
    1986:	e7cd      	b.n	1924 <_svfiprintf_r+0x90>
    1988:	9b05      	ldr	r3, [sp, #20]
    198a:	1d18      	adds	r0, r3, #4
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	9005      	str	r0, [sp, #20]
    1990:	2b00      	cmp	r3, #0
    1992:	db39      	blt.n	1a08 <_svfiprintf_r+0x174>
    1994:	9309      	str	r3, [sp, #36]	; 0x24
    1996:	0014      	movs	r4, r2
    1998:	7823      	ldrb	r3, [r4, #0]
    199a:	2b2e      	cmp	r3, #46	; 0x2e
    199c:	d10b      	bne.n	19b6 <_svfiprintf_r+0x122>
    199e:	7863      	ldrb	r3, [r4, #1]
    19a0:	1c62      	adds	r2, r4, #1
    19a2:	2b2a      	cmp	r3, #42	; 0x2a
    19a4:	d13e      	bne.n	1a24 <_svfiprintf_r+0x190>
    19a6:	9b05      	ldr	r3, [sp, #20]
    19a8:	3402      	adds	r4, #2
    19aa:	1d1a      	adds	r2, r3, #4
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	9205      	str	r2, [sp, #20]
    19b0:	2b00      	cmp	r3, #0
    19b2:	db34      	blt.n	1a1e <_svfiprintf_r+0x18a>
    19b4:	9307      	str	r3, [sp, #28]
    19b6:	4e35      	ldr	r6, [pc, #212]	; (1a8c <_svfiprintf_r+0x1f8>)
    19b8:	7821      	ldrb	r1, [r4, #0]
    19ba:	2203      	movs	r2, #3
    19bc:	0030      	movs	r0, r6
    19be:	f000 f9f5 	bl	1dac <memchr>
    19c2:	2800      	cmp	r0, #0
    19c4:	d006      	beq.n	19d4 <_svfiprintf_r+0x140>
    19c6:	2340      	movs	r3, #64	; 0x40
    19c8:	1b80      	subs	r0, r0, r6
    19ca:	4083      	lsls	r3, r0
    19cc:	682a      	ldr	r2, [r5, #0]
    19ce:	3401      	adds	r4, #1
    19d0:	4313      	orrs	r3, r2
    19d2:	602b      	str	r3, [r5, #0]
    19d4:	7821      	ldrb	r1, [r4, #0]
    19d6:	2206      	movs	r2, #6
    19d8:	482d      	ldr	r0, [pc, #180]	; (1a90 <_svfiprintf_r+0x1fc>)
    19da:	1c66      	adds	r6, r4, #1
    19dc:	7629      	strb	r1, [r5, #24]
    19de:	f000 f9e5 	bl	1dac <memchr>
    19e2:	2800      	cmp	r0, #0
    19e4:	d046      	beq.n	1a74 <_svfiprintf_r+0x1e0>
    19e6:	4b2b      	ldr	r3, [pc, #172]	; (1a94 <_svfiprintf_r+0x200>)
    19e8:	2b00      	cmp	r3, #0
    19ea:	d12f      	bne.n	1a4c <_svfiprintf_r+0x1b8>
    19ec:	6829      	ldr	r1, [r5, #0]
    19ee:	9b05      	ldr	r3, [sp, #20]
    19f0:	2207      	movs	r2, #7
    19f2:	05c9      	lsls	r1, r1, #23
    19f4:	d528      	bpl.n	1a48 <_svfiprintf_r+0x1b4>
    19f6:	189b      	adds	r3, r3, r2
    19f8:	4393      	bics	r3, r2
    19fa:	3308      	adds	r3, #8
    19fc:	9305      	str	r3, [sp, #20]
    19fe:	696b      	ldr	r3, [r5, #20]
    1a00:	9a03      	ldr	r2, [sp, #12]
    1a02:	189b      	adds	r3, r3, r2
    1a04:	616b      	str	r3, [r5, #20]
    1a06:	e767      	b.n	18d8 <_svfiprintf_r+0x44>
    1a08:	425b      	negs	r3, r3
    1a0a:	60eb      	str	r3, [r5, #12]
    1a0c:	2302      	movs	r3, #2
    1a0e:	430b      	orrs	r3, r1
    1a10:	602b      	str	r3, [r5, #0]
    1a12:	e7c0      	b.n	1996 <_svfiprintf_r+0x102>
    1a14:	434b      	muls	r3, r1
    1a16:	3401      	adds	r4, #1
    1a18:	189b      	adds	r3, r3, r2
    1a1a:	2001      	movs	r0, #1
    1a1c:	e7a0      	b.n	1960 <_svfiprintf_r+0xcc>
    1a1e:	2301      	movs	r3, #1
    1a20:	425b      	negs	r3, r3
    1a22:	e7c7      	b.n	19b4 <_svfiprintf_r+0x120>
    1a24:	2300      	movs	r3, #0
    1a26:	0014      	movs	r4, r2
    1a28:	200a      	movs	r0, #10
    1a2a:	001a      	movs	r2, r3
    1a2c:	606b      	str	r3, [r5, #4]
    1a2e:	7821      	ldrb	r1, [r4, #0]
    1a30:	3930      	subs	r1, #48	; 0x30
    1a32:	2909      	cmp	r1, #9
    1a34:	d903      	bls.n	1a3e <_svfiprintf_r+0x1aa>
    1a36:	2b00      	cmp	r3, #0
    1a38:	d0bd      	beq.n	19b6 <_svfiprintf_r+0x122>
    1a3a:	9207      	str	r2, [sp, #28]
    1a3c:	e7bb      	b.n	19b6 <_svfiprintf_r+0x122>
    1a3e:	4342      	muls	r2, r0
    1a40:	3401      	adds	r4, #1
    1a42:	1852      	adds	r2, r2, r1
    1a44:	2301      	movs	r3, #1
    1a46:	e7f2      	b.n	1a2e <_svfiprintf_r+0x19a>
    1a48:	3307      	adds	r3, #7
    1a4a:	e7d5      	b.n	19f8 <_svfiprintf_r+0x164>
    1a4c:	ab05      	add	r3, sp, #20
    1a4e:	9300      	str	r3, [sp, #0]
    1a50:	003a      	movs	r2, r7
    1a52:	4b11      	ldr	r3, [pc, #68]	; (1a98 <_svfiprintf_r+0x204>)
    1a54:	0029      	movs	r1, r5
    1a56:	9802      	ldr	r0, [sp, #8]
    1a58:	e000      	b.n	1a5c <_svfiprintf_r+0x1c8>
    1a5a:	bf00      	nop
    1a5c:	9003      	str	r0, [sp, #12]
    1a5e:	9b03      	ldr	r3, [sp, #12]
    1a60:	3301      	adds	r3, #1
    1a62:	d1cc      	bne.n	19fe <_svfiprintf_r+0x16a>
    1a64:	89bb      	ldrh	r3, [r7, #12]
    1a66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1a68:	065b      	lsls	r3, r3, #25
    1a6a:	d400      	bmi.n	1a6e <_svfiprintf_r+0x1da>
    1a6c:	e729      	b.n	18c2 <_svfiprintf_r+0x2e>
    1a6e:	2001      	movs	r0, #1
    1a70:	4240      	negs	r0, r0
    1a72:	e726      	b.n	18c2 <_svfiprintf_r+0x2e>
    1a74:	ab05      	add	r3, sp, #20
    1a76:	9300      	str	r3, [sp, #0]
    1a78:	003a      	movs	r2, r7
    1a7a:	4b07      	ldr	r3, [pc, #28]	; (1a98 <_svfiprintf_r+0x204>)
    1a7c:	0029      	movs	r1, r5
    1a7e:	9802      	ldr	r0, [sp, #8]
    1a80:	f000 f87a 	bl	1b78 <_printf_i>
    1a84:	e7ea      	b.n	1a5c <_svfiprintf_r+0x1c8>
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	00002034 	.word	0x00002034
    1a8c:	0000203a 	.word	0x0000203a
    1a90:	0000203e 	.word	0x0000203e
    1a94:	00000000 	.word	0x00000000
    1a98:	000017d1 	.word	0x000017d1

00001a9c <_printf_common>:
    1a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a9e:	0015      	movs	r5, r2
    1aa0:	9301      	str	r3, [sp, #4]
    1aa2:	688a      	ldr	r2, [r1, #8]
    1aa4:	690b      	ldr	r3, [r1, #16]
    1aa6:	9000      	str	r0, [sp, #0]
    1aa8:	000c      	movs	r4, r1
    1aaa:	4293      	cmp	r3, r2
    1aac:	da00      	bge.n	1ab0 <_printf_common+0x14>
    1aae:	0013      	movs	r3, r2
    1ab0:	0022      	movs	r2, r4
    1ab2:	602b      	str	r3, [r5, #0]
    1ab4:	3243      	adds	r2, #67	; 0x43
    1ab6:	7812      	ldrb	r2, [r2, #0]
    1ab8:	2a00      	cmp	r2, #0
    1aba:	d001      	beq.n	1ac0 <_printf_common+0x24>
    1abc:	3301      	adds	r3, #1
    1abe:	602b      	str	r3, [r5, #0]
    1ac0:	6823      	ldr	r3, [r4, #0]
    1ac2:	069b      	lsls	r3, r3, #26
    1ac4:	d502      	bpl.n	1acc <_printf_common+0x30>
    1ac6:	682b      	ldr	r3, [r5, #0]
    1ac8:	3302      	adds	r3, #2
    1aca:	602b      	str	r3, [r5, #0]
    1acc:	2706      	movs	r7, #6
    1ace:	6823      	ldr	r3, [r4, #0]
    1ad0:	401f      	ands	r7, r3
    1ad2:	d027      	beq.n	1b24 <_printf_common+0x88>
    1ad4:	0023      	movs	r3, r4
    1ad6:	3343      	adds	r3, #67	; 0x43
    1ad8:	781b      	ldrb	r3, [r3, #0]
    1ada:	1e5a      	subs	r2, r3, #1
    1adc:	4193      	sbcs	r3, r2
    1ade:	6822      	ldr	r2, [r4, #0]
    1ae0:	0692      	lsls	r2, r2, #26
    1ae2:	d430      	bmi.n	1b46 <_printf_common+0xaa>
    1ae4:	0022      	movs	r2, r4
    1ae6:	9901      	ldr	r1, [sp, #4]
    1ae8:	3243      	adds	r2, #67	; 0x43
    1aea:	9800      	ldr	r0, [sp, #0]
    1aec:	9e08      	ldr	r6, [sp, #32]
    1aee:	47b0      	blx	r6
    1af0:	1c43      	adds	r3, r0, #1
    1af2:	d025      	beq.n	1b40 <_printf_common+0xa4>
    1af4:	2306      	movs	r3, #6
    1af6:	6820      	ldr	r0, [r4, #0]
    1af8:	682a      	ldr	r2, [r5, #0]
    1afa:	68e1      	ldr	r1, [r4, #12]
    1afc:	4003      	ands	r3, r0
    1afe:	2500      	movs	r5, #0
    1b00:	2b04      	cmp	r3, #4
    1b02:	d103      	bne.n	1b0c <_printf_common+0x70>
    1b04:	1a8d      	subs	r5, r1, r2
    1b06:	43eb      	mvns	r3, r5
    1b08:	17db      	asrs	r3, r3, #31
    1b0a:	401d      	ands	r5, r3
    1b0c:	68a3      	ldr	r3, [r4, #8]
    1b0e:	6922      	ldr	r2, [r4, #16]
    1b10:	4293      	cmp	r3, r2
    1b12:	dd01      	ble.n	1b18 <_printf_common+0x7c>
    1b14:	1a9b      	subs	r3, r3, r2
    1b16:	18ed      	adds	r5, r5, r3
    1b18:	2700      	movs	r7, #0
    1b1a:	42bd      	cmp	r5, r7
    1b1c:	d120      	bne.n	1b60 <_printf_common+0xc4>
    1b1e:	2000      	movs	r0, #0
    1b20:	e010      	b.n	1b44 <_printf_common+0xa8>
    1b22:	3701      	adds	r7, #1
    1b24:	68e3      	ldr	r3, [r4, #12]
    1b26:	682a      	ldr	r2, [r5, #0]
    1b28:	1a9b      	subs	r3, r3, r2
    1b2a:	429f      	cmp	r7, r3
    1b2c:	dad2      	bge.n	1ad4 <_printf_common+0x38>
    1b2e:	0022      	movs	r2, r4
    1b30:	2301      	movs	r3, #1
    1b32:	3219      	adds	r2, #25
    1b34:	9901      	ldr	r1, [sp, #4]
    1b36:	9800      	ldr	r0, [sp, #0]
    1b38:	9e08      	ldr	r6, [sp, #32]
    1b3a:	47b0      	blx	r6
    1b3c:	1c43      	adds	r3, r0, #1
    1b3e:	d1f0      	bne.n	1b22 <_printf_common+0x86>
    1b40:	2001      	movs	r0, #1
    1b42:	4240      	negs	r0, r0
    1b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b46:	2030      	movs	r0, #48	; 0x30
    1b48:	18e1      	adds	r1, r4, r3
    1b4a:	3143      	adds	r1, #67	; 0x43
    1b4c:	7008      	strb	r0, [r1, #0]
    1b4e:	0021      	movs	r1, r4
    1b50:	1c5a      	adds	r2, r3, #1
    1b52:	3145      	adds	r1, #69	; 0x45
    1b54:	7809      	ldrb	r1, [r1, #0]
    1b56:	18a2      	adds	r2, r4, r2
    1b58:	3243      	adds	r2, #67	; 0x43
    1b5a:	3302      	adds	r3, #2
    1b5c:	7011      	strb	r1, [r2, #0]
    1b5e:	e7c1      	b.n	1ae4 <_printf_common+0x48>
    1b60:	0022      	movs	r2, r4
    1b62:	2301      	movs	r3, #1
    1b64:	321a      	adds	r2, #26
    1b66:	9901      	ldr	r1, [sp, #4]
    1b68:	9800      	ldr	r0, [sp, #0]
    1b6a:	9e08      	ldr	r6, [sp, #32]
    1b6c:	47b0      	blx	r6
    1b6e:	1c43      	adds	r3, r0, #1
    1b70:	d0e6      	beq.n	1b40 <_printf_common+0xa4>
    1b72:	3701      	adds	r7, #1
    1b74:	e7d1      	b.n	1b1a <_printf_common+0x7e>
	...

00001b78 <_printf_i>:
    1b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7a:	b08b      	sub	sp, #44	; 0x2c
    1b7c:	9206      	str	r2, [sp, #24]
    1b7e:	000a      	movs	r2, r1
    1b80:	3243      	adds	r2, #67	; 0x43
    1b82:	9307      	str	r3, [sp, #28]
    1b84:	9005      	str	r0, [sp, #20]
    1b86:	9204      	str	r2, [sp, #16]
    1b88:	7e0a      	ldrb	r2, [r1, #24]
    1b8a:	000c      	movs	r4, r1
    1b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1b8e:	2a6e      	cmp	r2, #110	; 0x6e
    1b90:	d100      	bne.n	1b94 <_printf_i+0x1c>
    1b92:	e08f      	b.n	1cb4 <_printf_i+0x13c>
    1b94:	d817      	bhi.n	1bc6 <_printf_i+0x4e>
    1b96:	2a63      	cmp	r2, #99	; 0x63
    1b98:	d02c      	beq.n	1bf4 <_printf_i+0x7c>
    1b9a:	d808      	bhi.n	1bae <_printf_i+0x36>
    1b9c:	2a00      	cmp	r2, #0
    1b9e:	d100      	bne.n	1ba2 <_printf_i+0x2a>
    1ba0:	e099      	b.n	1cd6 <_printf_i+0x15e>
    1ba2:	2a58      	cmp	r2, #88	; 0x58
    1ba4:	d054      	beq.n	1c50 <_printf_i+0xd8>
    1ba6:	0026      	movs	r6, r4
    1ba8:	3642      	adds	r6, #66	; 0x42
    1baa:	7032      	strb	r2, [r6, #0]
    1bac:	e029      	b.n	1c02 <_printf_i+0x8a>
    1bae:	2a64      	cmp	r2, #100	; 0x64
    1bb0:	d001      	beq.n	1bb6 <_printf_i+0x3e>
    1bb2:	2a69      	cmp	r2, #105	; 0x69
    1bb4:	d1f7      	bne.n	1ba6 <_printf_i+0x2e>
    1bb6:	6821      	ldr	r1, [r4, #0]
    1bb8:	681a      	ldr	r2, [r3, #0]
    1bba:	0608      	lsls	r0, r1, #24
    1bbc:	d523      	bpl.n	1c06 <_printf_i+0x8e>
    1bbe:	1d11      	adds	r1, r2, #4
    1bc0:	6019      	str	r1, [r3, #0]
    1bc2:	6815      	ldr	r5, [r2, #0]
    1bc4:	e025      	b.n	1c12 <_printf_i+0x9a>
    1bc6:	2a73      	cmp	r2, #115	; 0x73
    1bc8:	d100      	bne.n	1bcc <_printf_i+0x54>
    1bca:	e088      	b.n	1cde <_printf_i+0x166>
    1bcc:	d808      	bhi.n	1be0 <_printf_i+0x68>
    1bce:	2a6f      	cmp	r2, #111	; 0x6f
    1bd0:	d029      	beq.n	1c26 <_printf_i+0xae>
    1bd2:	2a70      	cmp	r2, #112	; 0x70
    1bd4:	d1e7      	bne.n	1ba6 <_printf_i+0x2e>
    1bd6:	2220      	movs	r2, #32
    1bd8:	6809      	ldr	r1, [r1, #0]
    1bda:	430a      	orrs	r2, r1
    1bdc:	6022      	str	r2, [r4, #0]
    1bde:	e003      	b.n	1be8 <_printf_i+0x70>
    1be0:	2a75      	cmp	r2, #117	; 0x75
    1be2:	d020      	beq.n	1c26 <_printf_i+0xae>
    1be4:	2a78      	cmp	r2, #120	; 0x78
    1be6:	d1de      	bne.n	1ba6 <_printf_i+0x2e>
    1be8:	0022      	movs	r2, r4
    1bea:	2178      	movs	r1, #120	; 0x78
    1bec:	3245      	adds	r2, #69	; 0x45
    1bee:	7011      	strb	r1, [r2, #0]
    1bf0:	4a6c      	ldr	r2, [pc, #432]	; (1da4 <_printf_i+0x22c>)
    1bf2:	e030      	b.n	1c56 <_printf_i+0xde>
    1bf4:	000e      	movs	r6, r1
    1bf6:	681a      	ldr	r2, [r3, #0]
    1bf8:	3642      	adds	r6, #66	; 0x42
    1bfa:	1d11      	adds	r1, r2, #4
    1bfc:	6019      	str	r1, [r3, #0]
    1bfe:	6813      	ldr	r3, [r2, #0]
    1c00:	7033      	strb	r3, [r6, #0]
    1c02:	2301      	movs	r3, #1
    1c04:	e079      	b.n	1cfa <_printf_i+0x182>
    1c06:	0649      	lsls	r1, r1, #25
    1c08:	d5d9      	bpl.n	1bbe <_printf_i+0x46>
    1c0a:	1d11      	adds	r1, r2, #4
    1c0c:	6019      	str	r1, [r3, #0]
    1c0e:	2300      	movs	r3, #0
    1c10:	5ed5      	ldrsh	r5, [r2, r3]
    1c12:	2d00      	cmp	r5, #0
    1c14:	da03      	bge.n	1c1e <_printf_i+0xa6>
    1c16:	232d      	movs	r3, #45	; 0x2d
    1c18:	9a04      	ldr	r2, [sp, #16]
    1c1a:	426d      	negs	r5, r5
    1c1c:	7013      	strb	r3, [r2, #0]
    1c1e:	4b62      	ldr	r3, [pc, #392]	; (1da8 <_printf_i+0x230>)
    1c20:	270a      	movs	r7, #10
    1c22:	9303      	str	r3, [sp, #12]
    1c24:	e02f      	b.n	1c86 <_printf_i+0x10e>
    1c26:	6820      	ldr	r0, [r4, #0]
    1c28:	6819      	ldr	r1, [r3, #0]
    1c2a:	0605      	lsls	r5, r0, #24
    1c2c:	d503      	bpl.n	1c36 <_printf_i+0xbe>
    1c2e:	1d08      	adds	r0, r1, #4
    1c30:	6018      	str	r0, [r3, #0]
    1c32:	680d      	ldr	r5, [r1, #0]
    1c34:	e005      	b.n	1c42 <_printf_i+0xca>
    1c36:	0640      	lsls	r0, r0, #25
    1c38:	d5f9      	bpl.n	1c2e <_printf_i+0xb6>
    1c3a:	680d      	ldr	r5, [r1, #0]
    1c3c:	1d08      	adds	r0, r1, #4
    1c3e:	6018      	str	r0, [r3, #0]
    1c40:	b2ad      	uxth	r5, r5
    1c42:	4b59      	ldr	r3, [pc, #356]	; (1da8 <_printf_i+0x230>)
    1c44:	2708      	movs	r7, #8
    1c46:	9303      	str	r3, [sp, #12]
    1c48:	2a6f      	cmp	r2, #111	; 0x6f
    1c4a:	d018      	beq.n	1c7e <_printf_i+0x106>
    1c4c:	270a      	movs	r7, #10
    1c4e:	e016      	b.n	1c7e <_printf_i+0x106>
    1c50:	3145      	adds	r1, #69	; 0x45
    1c52:	700a      	strb	r2, [r1, #0]
    1c54:	4a54      	ldr	r2, [pc, #336]	; (1da8 <_printf_i+0x230>)
    1c56:	9203      	str	r2, [sp, #12]
    1c58:	681a      	ldr	r2, [r3, #0]
    1c5a:	6821      	ldr	r1, [r4, #0]
    1c5c:	1d10      	adds	r0, r2, #4
    1c5e:	6018      	str	r0, [r3, #0]
    1c60:	6815      	ldr	r5, [r2, #0]
    1c62:	0608      	lsls	r0, r1, #24
    1c64:	d522      	bpl.n	1cac <_printf_i+0x134>
    1c66:	07cb      	lsls	r3, r1, #31
    1c68:	d502      	bpl.n	1c70 <_printf_i+0xf8>
    1c6a:	2320      	movs	r3, #32
    1c6c:	4319      	orrs	r1, r3
    1c6e:	6021      	str	r1, [r4, #0]
    1c70:	2710      	movs	r7, #16
    1c72:	2d00      	cmp	r5, #0
    1c74:	d103      	bne.n	1c7e <_printf_i+0x106>
    1c76:	2320      	movs	r3, #32
    1c78:	6822      	ldr	r2, [r4, #0]
    1c7a:	439a      	bics	r2, r3
    1c7c:	6022      	str	r2, [r4, #0]
    1c7e:	0023      	movs	r3, r4
    1c80:	2200      	movs	r2, #0
    1c82:	3343      	adds	r3, #67	; 0x43
    1c84:	701a      	strb	r2, [r3, #0]
    1c86:	6863      	ldr	r3, [r4, #4]
    1c88:	60a3      	str	r3, [r4, #8]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	db5c      	blt.n	1d48 <_printf_i+0x1d0>
    1c8e:	2204      	movs	r2, #4
    1c90:	6821      	ldr	r1, [r4, #0]
    1c92:	4391      	bics	r1, r2
    1c94:	6021      	str	r1, [r4, #0]
    1c96:	2d00      	cmp	r5, #0
    1c98:	d158      	bne.n	1d4c <_printf_i+0x1d4>
    1c9a:	9e04      	ldr	r6, [sp, #16]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d064      	beq.n	1d6a <_printf_i+0x1f2>
    1ca0:	0026      	movs	r6, r4
    1ca2:	9b03      	ldr	r3, [sp, #12]
    1ca4:	3642      	adds	r6, #66	; 0x42
    1ca6:	781b      	ldrb	r3, [r3, #0]
    1ca8:	7033      	strb	r3, [r6, #0]
    1caa:	e05e      	b.n	1d6a <_printf_i+0x1f2>
    1cac:	0648      	lsls	r0, r1, #25
    1cae:	d5da      	bpl.n	1c66 <_printf_i+0xee>
    1cb0:	b2ad      	uxth	r5, r5
    1cb2:	e7d8      	b.n	1c66 <_printf_i+0xee>
    1cb4:	6809      	ldr	r1, [r1, #0]
    1cb6:	681a      	ldr	r2, [r3, #0]
    1cb8:	0608      	lsls	r0, r1, #24
    1cba:	d505      	bpl.n	1cc8 <_printf_i+0x150>
    1cbc:	1d11      	adds	r1, r2, #4
    1cbe:	6019      	str	r1, [r3, #0]
    1cc0:	6813      	ldr	r3, [r2, #0]
    1cc2:	6962      	ldr	r2, [r4, #20]
    1cc4:	601a      	str	r2, [r3, #0]
    1cc6:	e006      	b.n	1cd6 <_printf_i+0x15e>
    1cc8:	0649      	lsls	r1, r1, #25
    1cca:	d5f7      	bpl.n	1cbc <_printf_i+0x144>
    1ccc:	1d11      	adds	r1, r2, #4
    1cce:	6019      	str	r1, [r3, #0]
    1cd0:	6813      	ldr	r3, [r2, #0]
    1cd2:	8aa2      	ldrh	r2, [r4, #20]
    1cd4:	801a      	strh	r2, [r3, #0]
    1cd6:	2300      	movs	r3, #0
    1cd8:	9e04      	ldr	r6, [sp, #16]
    1cda:	6123      	str	r3, [r4, #16]
    1cdc:	e054      	b.n	1d88 <_printf_i+0x210>
    1cde:	681a      	ldr	r2, [r3, #0]
    1ce0:	1d11      	adds	r1, r2, #4
    1ce2:	6019      	str	r1, [r3, #0]
    1ce4:	6816      	ldr	r6, [r2, #0]
    1ce6:	2100      	movs	r1, #0
    1ce8:	6862      	ldr	r2, [r4, #4]
    1cea:	0030      	movs	r0, r6
    1cec:	f000 f85e 	bl	1dac <memchr>
    1cf0:	2800      	cmp	r0, #0
    1cf2:	d001      	beq.n	1cf8 <_printf_i+0x180>
    1cf4:	1b80      	subs	r0, r0, r6
    1cf6:	6060      	str	r0, [r4, #4]
    1cf8:	6863      	ldr	r3, [r4, #4]
    1cfa:	6123      	str	r3, [r4, #16]
    1cfc:	2300      	movs	r3, #0
    1cfe:	9a04      	ldr	r2, [sp, #16]
    1d00:	7013      	strb	r3, [r2, #0]
    1d02:	e041      	b.n	1d88 <_printf_i+0x210>
    1d04:	6923      	ldr	r3, [r4, #16]
    1d06:	0032      	movs	r2, r6
    1d08:	9906      	ldr	r1, [sp, #24]
    1d0a:	9805      	ldr	r0, [sp, #20]
    1d0c:	9d07      	ldr	r5, [sp, #28]
    1d0e:	47a8      	blx	r5
    1d10:	1c43      	adds	r3, r0, #1
    1d12:	d043      	beq.n	1d9c <_printf_i+0x224>
    1d14:	6823      	ldr	r3, [r4, #0]
    1d16:	2500      	movs	r5, #0
    1d18:	079b      	lsls	r3, r3, #30
    1d1a:	d40f      	bmi.n	1d3c <_printf_i+0x1c4>
    1d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d1e:	68e0      	ldr	r0, [r4, #12]
    1d20:	4298      	cmp	r0, r3
    1d22:	da3d      	bge.n	1da0 <_printf_i+0x228>
    1d24:	0018      	movs	r0, r3
    1d26:	e03b      	b.n	1da0 <_printf_i+0x228>
    1d28:	0022      	movs	r2, r4
    1d2a:	2301      	movs	r3, #1
    1d2c:	3219      	adds	r2, #25
    1d2e:	9906      	ldr	r1, [sp, #24]
    1d30:	9805      	ldr	r0, [sp, #20]
    1d32:	9e07      	ldr	r6, [sp, #28]
    1d34:	47b0      	blx	r6
    1d36:	1c43      	adds	r3, r0, #1
    1d38:	d030      	beq.n	1d9c <_printf_i+0x224>
    1d3a:	3501      	adds	r5, #1
    1d3c:	68e3      	ldr	r3, [r4, #12]
    1d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d40:	1a9b      	subs	r3, r3, r2
    1d42:	429d      	cmp	r5, r3
    1d44:	dbf0      	blt.n	1d28 <_printf_i+0x1b0>
    1d46:	e7e9      	b.n	1d1c <_printf_i+0x1a4>
    1d48:	2d00      	cmp	r5, #0
    1d4a:	d0a9      	beq.n	1ca0 <_printf_i+0x128>
    1d4c:	9e04      	ldr	r6, [sp, #16]
    1d4e:	0028      	movs	r0, r5
    1d50:	0039      	movs	r1, r7
    1d52:	f7ff fcad 	bl	16b0 <__aeabi_uidivmod>
    1d56:	9b03      	ldr	r3, [sp, #12]
    1d58:	3e01      	subs	r6, #1
    1d5a:	5c5b      	ldrb	r3, [r3, r1]
    1d5c:	0028      	movs	r0, r5
    1d5e:	7033      	strb	r3, [r6, #0]
    1d60:	0039      	movs	r1, r7
    1d62:	f7ff fc1f 	bl	15a4 <__udivsi3>
    1d66:	1e05      	subs	r5, r0, #0
    1d68:	d1f1      	bne.n	1d4e <_printf_i+0x1d6>
    1d6a:	2f08      	cmp	r7, #8
    1d6c:	d109      	bne.n	1d82 <_printf_i+0x20a>
    1d6e:	6823      	ldr	r3, [r4, #0]
    1d70:	07db      	lsls	r3, r3, #31
    1d72:	d506      	bpl.n	1d82 <_printf_i+0x20a>
    1d74:	6863      	ldr	r3, [r4, #4]
    1d76:	6922      	ldr	r2, [r4, #16]
    1d78:	4293      	cmp	r3, r2
    1d7a:	dc02      	bgt.n	1d82 <_printf_i+0x20a>
    1d7c:	2330      	movs	r3, #48	; 0x30
    1d7e:	3e01      	subs	r6, #1
    1d80:	7033      	strb	r3, [r6, #0]
    1d82:	9b04      	ldr	r3, [sp, #16]
    1d84:	1b9b      	subs	r3, r3, r6
    1d86:	6123      	str	r3, [r4, #16]
    1d88:	9b07      	ldr	r3, [sp, #28]
    1d8a:	aa09      	add	r2, sp, #36	; 0x24
    1d8c:	9300      	str	r3, [sp, #0]
    1d8e:	0021      	movs	r1, r4
    1d90:	9b06      	ldr	r3, [sp, #24]
    1d92:	9805      	ldr	r0, [sp, #20]
    1d94:	f7ff fe82 	bl	1a9c <_printf_common>
    1d98:	1c43      	adds	r3, r0, #1
    1d9a:	d1b3      	bne.n	1d04 <_printf_i+0x18c>
    1d9c:	2001      	movs	r0, #1
    1d9e:	4240      	negs	r0, r0
    1da0:	b00b      	add	sp, #44	; 0x2c
    1da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1da4:	00002056 	.word	0x00002056
    1da8:	00002045 	.word	0x00002045

00001dac <memchr>:
    1dac:	b2c9      	uxtb	r1, r1
    1dae:	1882      	adds	r2, r0, r2
    1db0:	4290      	cmp	r0, r2
    1db2:	d101      	bne.n	1db8 <memchr+0xc>
    1db4:	2000      	movs	r0, #0
    1db6:	4770      	bx	lr
    1db8:	7803      	ldrb	r3, [r0, #0]
    1dba:	428b      	cmp	r3, r1
    1dbc:	d0fb      	beq.n	1db6 <memchr+0xa>
    1dbe:	3001      	adds	r0, #1
    1dc0:	e7f6      	b.n	1db0 <memchr+0x4>

00001dc2 <memmove>:
    1dc2:	b510      	push	{r4, lr}
    1dc4:	4288      	cmp	r0, r1
    1dc6:	d902      	bls.n	1dce <memmove+0xc>
    1dc8:	188b      	adds	r3, r1, r2
    1dca:	4298      	cmp	r0, r3
    1dcc:	d308      	bcc.n	1de0 <memmove+0x1e>
    1dce:	2300      	movs	r3, #0
    1dd0:	429a      	cmp	r2, r3
    1dd2:	d007      	beq.n	1de4 <memmove+0x22>
    1dd4:	5ccc      	ldrb	r4, [r1, r3]
    1dd6:	54c4      	strb	r4, [r0, r3]
    1dd8:	3301      	adds	r3, #1
    1dda:	e7f9      	b.n	1dd0 <memmove+0xe>
    1ddc:	5c8b      	ldrb	r3, [r1, r2]
    1dde:	5483      	strb	r3, [r0, r2]
    1de0:	3a01      	subs	r2, #1
    1de2:	d2fb      	bcs.n	1ddc <memmove+0x1a>
    1de4:	bd10      	pop	{r4, pc}
	...

00001de8 <_free_r>:
    1de8:	b570      	push	{r4, r5, r6, lr}
    1dea:	0005      	movs	r5, r0
    1dec:	2900      	cmp	r1, #0
    1dee:	d010      	beq.n	1e12 <_free_r+0x2a>
    1df0:	1f0c      	subs	r4, r1, #4
    1df2:	6823      	ldr	r3, [r4, #0]
    1df4:	2b00      	cmp	r3, #0
    1df6:	da00      	bge.n	1dfa <_free_r+0x12>
    1df8:	18e4      	adds	r4, r4, r3
    1dfa:	0028      	movs	r0, r5
    1dfc:	f000 f8d4 	bl	1fa8 <__malloc_lock>
    1e00:	4a1d      	ldr	r2, [pc, #116]	; (1e78 <_free_r+0x90>)
    1e02:	6813      	ldr	r3, [r2, #0]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d105      	bne.n	1e14 <_free_r+0x2c>
    1e08:	6063      	str	r3, [r4, #4]
    1e0a:	6014      	str	r4, [r2, #0]
    1e0c:	0028      	movs	r0, r5
    1e0e:	f000 f8cc 	bl	1faa <__malloc_unlock>
    1e12:	bd70      	pop	{r4, r5, r6, pc}
    1e14:	42a3      	cmp	r3, r4
    1e16:	d909      	bls.n	1e2c <_free_r+0x44>
    1e18:	6821      	ldr	r1, [r4, #0]
    1e1a:	1860      	adds	r0, r4, r1
    1e1c:	4283      	cmp	r3, r0
    1e1e:	d1f3      	bne.n	1e08 <_free_r+0x20>
    1e20:	6818      	ldr	r0, [r3, #0]
    1e22:	685b      	ldr	r3, [r3, #4]
    1e24:	1841      	adds	r1, r0, r1
    1e26:	6021      	str	r1, [r4, #0]
    1e28:	e7ee      	b.n	1e08 <_free_r+0x20>
    1e2a:	0013      	movs	r3, r2
    1e2c:	685a      	ldr	r2, [r3, #4]
    1e2e:	2a00      	cmp	r2, #0
    1e30:	d001      	beq.n	1e36 <_free_r+0x4e>
    1e32:	42a2      	cmp	r2, r4
    1e34:	d9f9      	bls.n	1e2a <_free_r+0x42>
    1e36:	6819      	ldr	r1, [r3, #0]
    1e38:	1858      	adds	r0, r3, r1
    1e3a:	42a0      	cmp	r0, r4
    1e3c:	d10b      	bne.n	1e56 <_free_r+0x6e>
    1e3e:	6820      	ldr	r0, [r4, #0]
    1e40:	1809      	adds	r1, r1, r0
    1e42:	1858      	adds	r0, r3, r1
    1e44:	6019      	str	r1, [r3, #0]
    1e46:	4282      	cmp	r2, r0
    1e48:	d1e0      	bne.n	1e0c <_free_r+0x24>
    1e4a:	6810      	ldr	r0, [r2, #0]
    1e4c:	6852      	ldr	r2, [r2, #4]
    1e4e:	1841      	adds	r1, r0, r1
    1e50:	6019      	str	r1, [r3, #0]
    1e52:	605a      	str	r2, [r3, #4]
    1e54:	e7da      	b.n	1e0c <_free_r+0x24>
    1e56:	42a0      	cmp	r0, r4
    1e58:	d902      	bls.n	1e60 <_free_r+0x78>
    1e5a:	230c      	movs	r3, #12
    1e5c:	602b      	str	r3, [r5, #0]
    1e5e:	e7d5      	b.n	1e0c <_free_r+0x24>
    1e60:	6821      	ldr	r1, [r4, #0]
    1e62:	1860      	adds	r0, r4, r1
    1e64:	4282      	cmp	r2, r0
    1e66:	d103      	bne.n	1e70 <_free_r+0x88>
    1e68:	6810      	ldr	r0, [r2, #0]
    1e6a:	6852      	ldr	r2, [r2, #4]
    1e6c:	1841      	adds	r1, r0, r1
    1e6e:	6021      	str	r1, [r4, #0]
    1e70:	6062      	str	r2, [r4, #4]
    1e72:	605c      	str	r4, [r3, #4]
    1e74:	e7ca      	b.n	1e0c <_free_r+0x24>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	200000c8 	.word	0x200000c8

00001e7c <_malloc_r>:
    1e7c:	2303      	movs	r3, #3
    1e7e:	b570      	push	{r4, r5, r6, lr}
    1e80:	1ccd      	adds	r5, r1, #3
    1e82:	439d      	bics	r5, r3
    1e84:	3508      	adds	r5, #8
    1e86:	0006      	movs	r6, r0
    1e88:	2d0c      	cmp	r5, #12
    1e8a:	d21e      	bcs.n	1eca <_malloc_r+0x4e>
    1e8c:	250c      	movs	r5, #12
    1e8e:	42a9      	cmp	r1, r5
    1e90:	d81d      	bhi.n	1ece <_malloc_r+0x52>
    1e92:	0030      	movs	r0, r6
    1e94:	f000 f888 	bl	1fa8 <__malloc_lock>
    1e98:	4a25      	ldr	r2, [pc, #148]	; (1f30 <_malloc_r+0xb4>)
    1e9a:	6814      	ldr	r4, [r2, #0]
    1e9c:	0021      	movs	r1, r4
    1e9e:	2900      	cmp	r1, #0
    1ea0:	d119      	bne.n	1ed6 <_malloc_r+0x5a>
    1ea2:	4c24      	ldr	r4, [pc, #144]	; (1f34 <_malloc_r+0xb8>)
    1ea4:	6823      	ldr	r3, [r4, #0]
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d103      	bne.n	1eb2 <_malloc_r+0x36>
    1eaa:	0030      	movs	r0, r6
    1eac:	f000 f86a 	bl	1f84 <_sbrk_r>
    1eb0:	6020      	str	r0, [r4, #0]
    1eb2:	0029      	movs	r1, r5
    1eb4:	0030      	movs	r0, r6
    1eb6:	f000 f865 	bl	1f84 <_sbrk_r>
    1eba:	1c43      	adds	r3, r0, #1
    1ebc:	d12c      	bne.n	1f18 <_malloc_r+0x9c>
    1ebe:	230c      	movs	r3, #12
    1ec0:	0030      	movs	r0, r6
    1ec2:	6033      	str	r3, [r6, #0]
    1ec4:	f000 f871 	bl	1faa <__malloc_unlock>
    1ec8:	e003      	b.n	1ed2 <_malloc_r+0x56>
    1eca:	2d00      	cmp	r5, #0
    1ecc:	dadf      	bge.n	1e8e <_malloc_r+0x12>
    1ece:	230c      	movs	r3, #12
    1ed0:	6033      	str	r3, [r6, #0]
    1ed2:	2000      	movs	r0, #0
    1ed4:	bd70      	pop	{r4, r5, r6, pc}
    1ed6:	680b      	ldr	r3, [r1, #0]
    1ed8:	1b5b      	subs	r3, r3, r5
    1eda:	d41a      	bmi.n	1f12 <_malloc_r+0x96>
    1edc:	2b0b      	cmp	r3, #11
    1ede:	d903      	bls.n	1ee8 <_malloc_r+0x6c>
    1ee0:	600b      	str	r3, [r1, #0]
    1ee2:	18cc      	adds	r4, r1, r3
    1ee4:	6025      	str	r5, [r4, #0]
    1ee6:	e003      	b.n	1ef0 <_malloc_r+0x74>
    1ee8:	428c      	cmp	r4, r1
    1eea:	d10e      	bne.n	1f0a <_malloc_r+0x8e>
    1eec:	6863      	ldr	r3, [r4, #4]
    1eee:	6013      	str	r3, [r2, #0]
    1ef0:	0030      	movs	r0, r6
    1ef2:	f000 f85a 	bl	1faa <__malloc_unlock>
    1ef6:	0020      	movs	r0, r4
    1ef8:	2207      	movs	r2, #7
    1efa:	300b      	adds	r0, #11
    1efc:	1d23      	adds	r3, r4, #4
    1efe:	4390      	bics	r0, r2
    1f00:	1ac3      	subs	r3, r0, r3
    1f02:	d0e7      	beq.n	1ed4 <_malloc_r+0x58>
    1f04:	425a      	negs	r2, r3
    1f06:	50e2      	str	r2, [r4, r3]
    1f08:	e7e4      	b.n	1ed4 <_malloc_r+0x58>
    1f0a:	684b      	ldr	r3, [r1, #4]
    1f0c:	6063      	str	r3, [r4, #4]
    1f0e:	000c      	movs	r4, r1
    1f10:	e7ee      	b.n	1ef0 <_malloc_r+0x74>
    1f12:	000c      	movs	r4, r1
    1f14:	6849      	ldr	r1, [r1, #4]
    1f16:	e7c2      	b.n	1e9e <_malloc_r+0x22>
    1f18:	2303      	movs	r3, #3
    1f1a:	1cc4      	adds	r4, r0, #3
    1f1c:	439c      	bics	r4, r3
    1f1e:	42a0      	cmp	r0, r4
    1f20:	d0e0      	beq.n	1ee4 <_malloc_r+0x68>
    1f22:	1a21      	subs	r1, r4, r0
    1f24:	0030      	movs	r0, r6
    1f26:	f000 f82d 	bl	1f84 <_sbrk_r>
    1f2a:	1c43      	adds	r3, r0, #1
    1f2c:	d1da      	bne.n	1ee4 <_malloc_r+0x68>
    1f2e:	e7c6      	b.n	1ebe <_malloc_r+0x42>
    1f30:	200000c8 	.word	0x200000c8
    1f34:	200000cc 	.word	0x200000cc

00001f38 <_realloc_r>:
    1f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3a:	0007      	movs	r7, r0
    1f3c:	000d      	movs	r5, r1
    1f3e:	0016      	movs	r6, r2
    1f40:	2900      	cmp	r1, #0
    1f42:	d105      	bne.n	1f50 <_realloc_r+0x18>
    1f44:	0011      	movs	r1, r2
    1f46:	f7ff ff99 	bl	1e7c <_malloc_r>
    1f4a:	0004      	movs	r4, r0
    1f4c:	0020      	movs	r0, r4
    1f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f50:	2a00      	cmp	r2, #0
    1f52:	d103      	bne.n	1f5c <_realloc_r+0x24>
    1f54:	f7ff ff48 	bl	1de8 <_free_r>
    1f58:	0034      	movs	r4, r6
    1f5a:	e7f7      	b.n	1f4c <_realloc_r+0x14>
    1f5c:	f000 f826 	bl	1fac <_malloc_usable_size_r>
    1f60:	002c      	movs	r4, r5
    1f62:	4286      	cmp	r6, r0
    1f64:	d9f2      	bls.n	1f4c <_realloc_r+0x14>
    1f66:	0031      	movs	r1, r6
    1f68:	0038      	movs	r0, r7
    1f6a:	f7ff ff87 	bl	1e7c <_malloc_r>
    1f6e:	1e04      	subs	r4, r0, #0
    1f70:	d0ec      	beq.n	1f4c <_realloc_r+0x14>
    1f72:	0029      	movs	r1, r5
    1f74:	0032      	movs	r2, r6
    1f76:	f7ff fbef 	bl	1758 <memcpy>
    1f7a:	0029      	movs	r1, r5
    1f7c:	0038      	movs	r0, r7
    1f7e:	f7ff ff33 	bl	1de8 <_free_r>
    1f82:	e7e3      	b.n	1f4c <_realloc_r+0x14>

00001f84 <_sbrk_r>:
    1f84:	2300      	movs	r3, #0
    1f86:	b570      	push	{r4, r5, r6, lr}
    1f88:	4c06      	ldr	r4, [pc, #24]	; (1fa4 <_sbrk_r+0x20>)
    1f8a:	0005      	movs	r5, r0
    1f8c:	0008      	movs	r0, r1
    1f8e:	6023      	str	r3, [r4, #0]
    1f90:	f7ff fac8 	bl	1524 <_sbrk>
    1f94:	1c43      	adds	r3, r0, #1
    1f96:	d103      	bne.n	1fa0 <_sbrk_r+0x1c>
    1f98:	6823      	ldr	r3, [r4, #0]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d000      	beq.n	1fa0 <_sbrk_r+0x1c>
    1f9e:	602b      	str	r3, [r5, #0]
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	20000164 	.word	0x20000164

00001fa8 <__malloc_lock>:
    1fa8:	4770      	bx	lr

00001faa <__malloc_unlock>:
    1faa:	4770      	bx	lr

00001fac <_malloc_usable_size_r>:
    1fac:	1f0b      	subs	r3, r1, #4
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	1f18      	subs	r0, r3, #4
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	da01      	bge.n	1fba <_malloc_usable_size_r+0xe>
    1fb6:	580b      	ldr	r3, [r1, r0]
    1fb8:	18c0      	adds	r0, r0, r3
    1fba:	4770      	bx	lr
    1fbc:	42000800 	.word	0x42000800
    1fc0:	42000c00 	.word	0x42000c00
    1fc4:	42001000 	.word	0x42001000
    1fc8:	42001400 	.word	0x42001400
    1fcc:	42001800 	.word	0x42001800
    1fd0:	42001c00 	.word	0x42001c00

00001fd4 <_tcc_intflag>:
    1fd4:	00000001 00000002 00000004 00000008     ................
    1fe4:	00001000 00002000 00004000 00008000     ..... ...@......
    1ff4:	00010000 00020000 00040000 00080000     ................
    2004:	00006325 00000ee6 00000efe 00000efe     %c..............
    2014:	00000eaa 00000eaa 00000eb0 00000eb6     ................
    2024:	00000ec4 00000eec 0a0d6968 00000000     ........hi......
    2034:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2044:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2054:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2064:	00006665                                ef..

00002068 <_init>:
    2068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    206e:	bc08      	pop	{r3}
    2070:	469e      	mov	lr, r3
    2072:	4770      	bx	lr

00002074 <__init_array_start>:
    2074:	000000dd 	.word	0x000000dd

00002078 <_fini>:
    2078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    207e:	bc08      	pop	{r3}
    2080:	469e      	mov	lr, r3
    2082:	4770      	bx	lr

00002084 <__fini_array_start>:
    2084:	000000b5 	.word	0x000000b5
