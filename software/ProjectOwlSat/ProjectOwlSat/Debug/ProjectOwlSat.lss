
ProjectOwlSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b48  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f4  20000000  00004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000854  200000f4  00004c3c  000200f4  2**2
                  ALLOC
  3 .stack        00002000  20000948  00005490  000200f4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005441f  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000063c9  00000000  00000000  00074594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ad12  00000000  00000000  0007a95d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b90  00000000  00000000  0008566f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f58  00000000  00000000  000861ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022c53  00000000  00000000  00087157  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001777e  00000000  00000000  000a9daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a075d  00000000  00000000  000c1528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001df0  00000000  00000000  00161c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
       0:	48 29 00 20 89 44 00 00 85 44 00 00 85 44 00 00     H). .D...D...D..
	...
	sd_mmc_card->rca = 0;
      2c:	85 44 00 00 00 00 00 00 00 00 00 00 85 44 00 00     .D...........D..
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
      3c:	85 44 00 00 85 44 00 00 85 44 00 00 85 44 00 00     .D...D...D...D..
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
      4c:	81 2f 00 00 2d 2f 00 00 85 44 00 00 85 44 00 00     ./..-/...D...D..
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
      5c:	3d 26 00 00 85 44 00 00 d9 39 00 00 e9 39 00 00     =&...D...9...9..
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
      6c:	f9 39 00 00 09 3a 00 00 19 3a 00 00 29 3a 00 00     .9...:...:..):..
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
      7c:	11 30 00 00 21 30 00 00 31 30 00 00 85 44 00 00     .0..!0..10...D..
	if (sd_mmc_card->type & CARD_TYPE_SD) {
      8c:	85 44 00 00 85 44 00 00 85 44 00 00 85 44 00 00     .D...D...D...D..
	sd_mmc_configure_slot();
      9c:	85 44 00 00 85 44 00 00 85 44 00 00 85 44 00 00     .D...D...D...D..
	resp = driver_get_response();
      ac:	85 44 00 00 00 00 00 00                             .D......

000000b4 <__do_global_dtors_aux>:
	if (resp == 0xFFFFFFFF) {
      b4:	b510      	push	{r4, lr}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	*v2 = 1;
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000f4 	.word	0x200000f4
			sd_mmc_card->type = CARD_TYPE_MMC;
      d4:	00000000 	.word	0x00000000
      d8:	00004b48 	.word	0x00004b48

000000dc <frame_dummy>:
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
      ea:	bf00      	nop
		resp = driver_get_response();
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
		resp = driver_get_response();
      f8:	2b00      	cmp	r3, #0
		if (!(resp & R1_SPI_IDLE)) {
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
		if (retry-- == 0) {
     100:	00000000 	.word	0x00000000
     104:	200000f8 	.word	0x200000f8
	if ((driver_get_response() & OCR_CCS) != 0) {
     108:	00004b48 	.word	0x00004b48
     10c:	00004b48 	.word	0x00004b48
		sd_mmc_card->type |= CARD_TYPE_HC;
     110:	00000000 	.word	0x00000000

00000114 <udi_cdc_comm_disable>:
     114:	4a02      	ldr	r2, [pc, #8]	; (120 <udi_cdc_comm_disable+0xc>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	3b01      	subs	r3, #1
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     11a:	b2db      	uxtb	r3, r3
     11c:	7013      	strb	r3, [r2, #0]
     11e:	4770      	bx	lr
     120:	20000126 	.word	0x20000126

00000124 <udi_cdc_data_setup>:
     124:	2000      	movs	r0, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     126:	4770      	bx	lr

00000128 <udi_cdc_getsetting>:
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr

0000012c <udi_cdc_line_coding_received>:
     12c:	b510      	push	{r4, lr}
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <udi_cdc_line_coding_received+0x1c>)
     130:	7918      	ldrb	r0, [r3, #4]
		if (!sd_mmc_cmd9_spi()) {
     132:	3802      	subs	r0, #2
     134:	4243      	negs	r3, r0
     136:	4158      	adcs	r0, r3
     138:	00c3      	lsls	r3, r0, #3
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     13a:	1a1b      	subs	r3, r3, r0
     13c:	4903      	ldr	r1, [pc, #12]	; (14c <udi_cdc_line_coding_received+0x20>)
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     13e:	18c9      	adds	r1, r1, r3
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     140:	4b03      	ldr	r3, [pc, #12]	; (150 <udi_cdc_line_coding_received+0x24>)
     142:	4798      	blx	r3
     144:	bd10      	pop	{r4, pc}
	sd_mmc_card->clock = unit * mul * 1000;
     146:	46c0      	nop			; (mov r8, r8)
     148:	2000077c 	.word	0x2000077c
     14c:	20000118 	.word	0x20000118
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     150:	00003b15 	.word	0x00003b15

00000154 <udi_cdc_comm_enable>:
     154:	b570      	push	{r4, r5, r6, lr}
	sd_mmc_card->clock = unit * mul * 1000;
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <udi_cdc_comm_enable+0x8c>)
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	b2db      	uxtb	r3, r3
     15c:	2b02      	cmp	r3, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     15e:	d902      	bls.n	166 <udi_cdc_comm_enable+0x12>
     160:	2200      	movs	r2, #0
     162:	4b1f      	ldr	r3, [pc, #124]	; (1e0 <udi_cdc_comm_enable+0x8c>)
     164:	701a      	strb	r2, [r3, #0]
     166:	4b1e      	ldr	r3, [pc, #120]	; (1e0 <udi_cdc_comm_enable+0x8c>)
     168:	781c      	ldrb	r4, [r3, #0]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     16a:	b2e4      	uxtb	r4, r4
     16c:	0062      	lsls	r2, r4, #1
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     16e:	2000      	movs	r0, #0
     170:	4b1c      	ldr	r3, [pc, #112]	; (1e4 <udi_cdc_comm_enable+0x90>)
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     172:	52d0      	strh	r0, [r2, r3]
     174:	4a1c      	ldr	r2, [pc, #112]	; (1e8 <udi_cdc_comm_enable+0x94>)
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     176:	00a3      	lsls	r3, r4, #2
     178:	1919      	adds	r1, r3, r4
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     17a:	0049      	lsls	r1, r1, #1
     17c:	25a1      	movs	r5, #161	; 0xa1
     17e:	548d      	strb	r5, [r1, r2]
	}
	value &=  ((uint32_t)1 << size) - 1;
     180:	1853      	adds	r3, r2, r1
     182:	2220      	movs	r2, #32
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     184:	705a      	strb	r2, [r3, #1]
     186:	8058      	strh	r0, [r3, #2]
     188:	1e62      	subs	r2, r4, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     18a:	4253      	negs	r3, r2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     18c:	415a      	adcs	r2, r3
     18e:	0052      	lsls	r2, r2, #1
     190:	4b15      	ldr	r3, [pc, #84]	; (1e8 <udi_cdc_comm_enable+0x94>)
     192:	185b      	adds	r3, r3, r1
		sd_mmc_card->capacity = blocknr *
     194:	809a      	strh	r2, [r3, #4]
				/ 1024;
     196:	2202      	movs	r2, #2
		sd_mmc_card->capacity = blocknr *
     198:	80da      	strh	r2, [r3, #6]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     19a:	2200      	movs	r2, #0
     19c:	811a      	strh	r2, [r3, #8]
     19e:	4913      	ldr	r1, [pc, #76]	; (1ec <udi_cdc_comm_enable+0x98>)
     1a0:	00e3      	lsls	r3, r4, #3
     1a2:	1b1b      	subs	r3, r3, r4
     1a4:	545a      	strb	r2, [r3, r1]
     1a6:	18cb      	adds	r3, r1, r3
     1a8:	3a3e      	subs	r2, #62	; 0x3e
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     1aa:	705a      	strb	r2, [r3, #1]
     1ac:	323f      	adds	r2, #63	; 0x3f
     1ae:	709a      	strb	r2, [r3, #2]
     1b0:	2200      	movs	r2, #0
     1b2:	70da      	strb	r2, [r3, #3]
     1b4:	711a      	strb	r2, [r3, #4]
     1b6:	715a      	strb	r2, [r3, #5]
     1b8:	2208      	movs	r2, #8
     1ba:	719a      	strb	r2, [r3, #6]
     1bc:	00e3      	lsls	r3, r4, #3
	if (!driver_start_read_blocks(scr, 1)) {
     1be:	1b1b      	subs	r3, r3, r4
     1c0:	18c9      	adds	r1, r1, r3
     1c2:	0020      	movs	r0, r4
     1c4:	4b0a      	ldr	r3, [pc, #40]	; (1f0 <udi_cdc_comm_enable+0x9c>)
     1c6:	4798      	blx	r3
     1c8:	0020      	movs	r0, r4
     1ca:	4b0a      	ldr	r3, [pc, #40]	; (1f4 <udi_cdc_comm_enable+0xa0>)
	if (!driver_wait_end_of_read_blocks()) {
     1cc:	4798      	blx	r3
     1ce:	2800      	cmp	r0, #0
     1d0:	d004      	beq.n	1dc <udi_cdc_comm_enable+0x88>
     1d2:	4a03      	ldr	r2, [pc, #12]	; (1e0 <udi_cdc_comm_enable+0x8c>)
     1d4:	7813      	ldrb	r3, [r2, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     1d6:	3301      	adds	r3, #1
	switch (SD_SCR_SD_SPEC(scr)) {
     1d8:	b2db      	uxtb	r3, r3
     1da:	7013      	strb	r3, [r2, #0]
     1dc:	bd70      	pop	{r4, r5, r6, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000126 	.word	0x20000126
     1e4:	20000240 	.word	0x20000240
     1e8:	2000035c 	.word	0x2000035c
     1ec:	20000118 	.word	0x20000118
		sd_mmc_card->version = CARD_VER_SD_1_0;
     1f0:	00003b15 	.word	0x00003b15
     1f4:	00001ee1 	.word	0x00001ee1

000001f8 <udi_cdc_tx_send>:
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     1fa:	b085      	sub	sp, #20
     1fc:	0004      	movs	r4, r0
     1fe:	4b4e      	ldr	r3, [pc, #312]	; (338 <udi_cdc_tx_send+0x140>)
     200:	5c1b      	ldrb	r3, [r3, r0]
     202:	2b00      	cmp	r3, #0
     204:	d001      	beq.n	20a <udi_cdc_tx_send+0x12>
     206:	b005      	add	sp, #20
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     208:	bdf0      	pop	{r4, r5, r6, r7, pc}
     20a:	4b4c      	ldr	r3, [pc, #304]	; (33c <udi_cdc_tx_send+0x144>)
     20c:	4798      	blx	r3
     20e:	2800      	cmp	r0, #0
     210:	d049      	beq.n	2a6 <udi_cdc_tx_send+0xae>
     212:	0063      	lsls	r3, r4, #1
     214:	4a4a      	ldr	r2, [pc, #296]	; (340 <udi_cdc_tx_send+0x148>)
     216:	5a9d      	ldrh	r5, [r3, r2]
     218:	4b4a      	ldr	r3, [pc, #296]	; (344 <udi_cdc_tx_send+0x14c>)
		sd_mmc_card->type |= CARD_TYPE_HC;
     21a:	4798      	blx	r3
     21c:	4285      	cmp	r5, r0
     21e:	d0f2      	beq.n	206 <udi_cdc_tx_send+0xe>
     220:	f3ef 8310 	mrs	r3, PRIMASK
     224:	425a      	negs	r2, r3
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     226:	4153      	adcs	r3, r2
     228:	9303      	str	r3, [sp, #12]
     22a:	b672      	cpsid	i
     22c:	f3bf 8f5f 	dmb	sy
     230:	2200      	movs	r2, #0
     232:	4b45      	ldr	r3, [pc, #276]	; (348 <udi_cdc_tx_send+0x150>)
	if (!sd_mmc_cmd9_spi()) {
     234:	701a      	strb	r2, [r3, #0]
     236:	9e03      	ldr	r6, [sp, #12]
     238:	4b44      	ldr	r3, [pc, #272]	; (34c <udi_cdc_tx_send+0x154>)
     23a:	5d1d      	ldrb	r5, [r3, r4]
     23c:	b2ed      	uxtb	r5, r5
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     23e:	0063      	lsls	r3, r4, #1
     240:	195b      	adds	r3, r3, r5
     242:	005b      	lsls	r3, r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     244:	4a42      	ldr	r2, [pc, #264]	; (350 <udi_cdc_tx_send+0x158>)
     246:	5a9b      	ldrh	r3, [r3, r2]
     248:	2b00      	cmp	r3, #0
     24a:	d034      	beq.n	2b6 <udi_cdc_tx_send+0xbe>
     24c:	2200      	movs	r2, #0
     24e:	4b41      	ldr	r3, [pc, #260]	; (354 <udi_cdc_tx_send+0x15c>)
     250:	801a      	strh	r2, [r3, #0]
     252:	4b41      	ldr	r3, [pc, #260]	; (358 <udi_cdc_tx_send+0x160>)
     254:	5d1b      	ldrb	r3, [r3, r4]
     256:	2b00      	cmp	r3, #0
     258:	d14c      	bne.n	2f4 <udi_cdc_tx_send+0xfc>
		sd_mmc_card->version = CARD_VER_MMC_4;
     25a:	426b      	negs	r3, r5
     25c:	416b      	adcs	r3, r5
     25e:	b2db      	uxtb	r3, r3
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     260:	4a3a      	ldr	r2, [pc, #232]	; (34c <udi_cdc_tx_send+0x154>)
     262:	5513      	strb	r3, [r2, r4]
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     264:	2201      	movs	r2, #1
     266:	4b34      	ldr	r3, [pc, #208]	; (338 <udi_cdc_tx_send+0x140>)
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     268:	551a      	strb	r2, [r3, r4]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     26a:	2e00      	cmp	r6, #0
     26c:	d004      	beq.n	278 <udi_cdc_tx_send+0x80>
     26e:	4b36      	ldr	r3, [pc, #216]	; (348 <udi_cdc_tx_send+0x150>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     270:	701a      	strb	r2, [r3, #0]
     272:	f3bf 8f5f 	dmb	sy
	sd_mmc_card->clock = unit * mul * 1000;
     276:	b662      	cpsie	i
     278:	002f      	movs	r7, r5
     27a:	0063      	lsls	r3, r4, #1
     27c:	195b      	adds	r3, r3, r5
     27e:	005b      	lsls	r3, r3, #1
     280:	4a33      	ldr	r2, [pc, #204]	; (350 <udi_cdc_tx_send+0x158>)
     282:	5a9b      	ldrh	r3, [r3, r2]
     284:	001e      	movs	r6, r3
     286:	3e40      	subs	r6, #64	; 0x40
     288:	1e72      	subs	r2, r6, #1
     28a:	4196      	sbcs	r6, r2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     28c:	b2f6      	uxtb	r6, r6
     28e:	2b40      	cmp	r3, #64	; 0x40
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     290:	d03a      	beq.n	308 <udi_cdc_tx_send+0x110>
     292:	4b2a      	ldr	r3, [pc, #168]	; (33c <udi_cdc_tx_send+0x144>)
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     294:	4798      	blx	r3
     296:	2800      	cmp	r0, #0
	value &=  ((uint32_t)1 << size) - 1;
     298:	d030      	beq.n	2fc <udi_cdc_tx_send+0x104>
     29a:	4b2a      	ldr	r3, [pc, #168]	; (344 <udi_cdc_tx_send+0x14c>)
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     29c:	4798      	blx	r3
     29e:	0063      	lsls	r3, r4, #1
     2a0:	4a27      	ldr	r2, [pc, #156]	; (340 <udi_cdc_tx_send+0x148>)
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     2a2:	5298      	strh	r0, [r3, r2]
     2a4:	e034      	b.n	310 <udi_cdc_tx_send+0x118>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     2a6:	0063      	lsls	r3, r4, #1
     2a8:	4a25      	ldr	r2, [pc, #148]	; (340 <udi_cdc_tx_send+0x148>)
     2aa:	5a9d      	ldrh	r5, [r3, r2]
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     2ac:	4b2b      	ldr	r3, [pc, #172]	; (35c <udi_cdc_tx_send+0x164>)
	value &=  ((uint32_t)1 << size) - 1;
     2ae:	4798      	blx	r3
     2b0:	4285      	cmp	r5, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     2b2:	d1b5      	bne.n	220 <udi_cdc_tx_send+0x28>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     2b4:	e7a7      	b.n	206 <udi_cdc_tx_send+0xe>
     2b6:	4a27      	ldr	r2, [pc, #156]	; (354 <udi_cdc_tx_send+0x15c>)
     2b8:	8813      	ldrh	r3, [r2, #0]
     2ba:	3301      	adds	r3, #1
		sd_mmc_card->capacity = blocknr *
     2bc:	8013      	strh	r3, [r2, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     2be:	4b1f      	ldr	r3, [pc, #124]	; (33c <udi_cdc_tx_send+0x144>)
		sd_mmc_card->capacity = blocknr *
     2c0:	4798      	blx	r3
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     2c2:	2800      	cmp	r0, #0
     2c4:	d103      	bne.n	2ce <udi_cdc_tx_send+0xd6>
     2c6:	4b23      	ldr	r3, [pc, #140]	; (354 <udi_cdc_tx_send+0x15c>)
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     2c8:	881b      	ldrh	r3, [r3, #0]
     2ca:	2b63      	cmp	r3, #99	; 0x63
     2cc:	d908      	bls.n	2e0 <udi_cdc_tx_send+0xe8>
     2ce:	4b1b      	ldr	r3, [pc, #108]	; (33c <udi_cdc_tx_send+0x144>)
     2d0:	4798      	blx	r3
     2d2:	2800      	cmp	r0, #0
     2d4:	d0ba      	beq.n	24c <udi_cdc_tx_send+0x54>
     2d6:	4b22      	ldr	r3, [pc, #136]	; (360 <udi_cdc_tx_send+0x168>)
     2d8:	4a1e      	ldr	r2, [pc, #120]	; (354 <udi_cdc_tx_send+0x15c>)
     2da:	8812      	ldrh	r2, [r2, #0]
     2dc:	429a      	cmp	r2, r3
     2de:	d8b5      	bhi.n	24c <udi_cdc_tx_send+0x54>
		if (!driver_read_word(&ext_csd)) {
     2e0:	2e00      	cmp	r6, #0
     2e2:	d100      	bne.n	2e6 <udi_cdc_tx_send+0xee>
     2e4:	e78f      	b.n	206 <udi_cdc_tx_send+0xe>
     2e6:	2201      	movs	r2, #1
     2e8:	4b17      	ldr	r3, [pc, #92]	; (348 <udi_cdc_tx_send+0x150>)
     2ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     2ec:	f3bf 8f5f 	dmb	sy
     2f0:	b662      	cpsie	i
     2f2:	e788      	b.n	206 <udi_cdc_tx_send+0xe>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     2f4:	426a      	negs	r2, r5
     2f6:	416a      	adcs	r2, r5
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     2f8:	b2d5      	uxtb	r5, r2
     2fa:	e7b3      	b.n	264 <udi_cdc_tx_send+0x6c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     2fc:	4b17      	ldr	r3, [pc, #92]	; (35c <udi_cdc_tx_send+0x164>)
     2fe:	4798      	blx	r3
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     300:	0063      	lsls	r3, r4, #1
     302:	4a0f      	ldr	r2, [pc, #60]	; (340 <udi_cdc_tx_send+0x148>)
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     304:	5298      	strh	r0, [r3, r2]
     306:	e003      	b.n	310 <udi_cdc_tx_send+0x118>
	value &=  ((uint32_t)1 << size) - 1;
     308:	0063      	lsls	r3, r4, #1
     30a:	2100      	movs	r1, #0
     30c:	4a0c      	ldr	r2, [pc, #48]	; (340 <udi_cdc_tx_send+0x148>)
     30e:	5299      	strh	r1, [r3, r2]
     310:	2084      	movs	r0, #132	; 0x84
			if (!driver_read_word(&sec_count)) {
     312:	2c01      	cmp	r4, #1
     314:	d000      	beq.n	318 <udi_cdc_tx_send+0x120>
     316:	3803      	subs	r0, #3
     318:	0063      	lsls	r3, r4, #1
     31a:	19db      	adds	r3, r3, r7
     31c:	005b      	lsls	r3, r3, #1
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     31e:	4a0c      	ldr	r2, [pc, #48]	; (350 <udi_cdc_tx_send+0x158>)
     320:	5a9b      	ldrh	r3, [r3, r2]
     322:	0062      	lsls	r2, r4, #1
     324:	1952      	adds	r2, r2, r5
		sd_mmc_card->capacity = sec_count / 2;
     326:	0192      	lsls	r2, r2, #6
     328:	4c0e      	ldr	r4, [pc, #56]	; (364 <udi_cdc_tx_send+0x16c>)
     32a:	18a2      	adds	r2, r4, r2
     32c:	490e      	ldr	r1, [pc, #56]	; (368 <udi_cdc_tx_send+0x170>)
     32e:	9100      	str	r1, [sp, #0]
     330:	0031      	movs	r1, r6
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     332:	4c0e      	ldr	r4, [pc, #56]	; (36c <udi_cdc_tx_send+0x174>)
     334:	47a0      	blx	r4
     336:	e766      	b.n	206 <udi_cdc_tx_send+0xe>
     338:	20000358 	.word	0x20000358
     33c:	00001891 	.word	0x00001891
     340:	20000354 	.word	0x20000354
     344:	000018a5 	.word	0x000018a5
     348:	200000f0 	.word	0x200000f0
     34c:	20000350 	.word	0x20000350
     350:	20000348 	.word	0x20000348
     354:	20000112 	.word	0x20000112
     358:	20000244 	.word	0x20000244
     35c:	00001895 	.word	0x00001895
     360:	0000031f 	.word	0x0000031f
     364:	20000248 	.word	0x20000248
     368:	00000371 	.word	0x00000371
     36c:	00001b9d 	.word	0x00001b9d

00000370 <udi_cdc_data_sent>:
     370:	b510      	push	{r4, lr}
     372:	3a84      	subs	r2, #132	; 0x84
     374:	4253      	negs	r3, r2
     376:	4153      	adcs	r3, r2
     378:	2800      	cmp	r0, #0
     37a:	d000      	beq.n	37e <udi_cdc_data_sent+0xe>
     37c:	bd10      	pop	{r4, pc}
     37e:	4a09      	ldr	r2, [pc, #36]	; (3a4 <udi_cdc_data_sent+0x34>)
     380:	5cd2      	ldrb	r2, [r2, r3]
     382:	4251      	negs	r1, r2
     384:	4151      	adcs	r1, r2
     386:	005a      	lsls	r2, r3, #1
     388:	1852      	adds	r2, r2, r1
     38a:	0052      	lsls	r2, r2, #1
     38c:	2100      	movs	r1, #0
     38e:	2400      	movs	r4, #0
     390:	4805      	ldr	r0, [pc, #20]	; (3a8 <udi_cdc_data_sent+0x38>)
     392:	5214      	strh	r4, [r2, r0]
     394:	4a05      	ldr	r2, [pc, #20]	; (3ac <udi_cdc_data_sent+0x3c>)
     396:	54d1      	strb	r1, [r2, r3]
     398:	4a05      	ldr	r2, [pc, #20]	; (3b0 <udi_cdc_data_sent+0x40>)
     39a:	54d1      	strb	r1, [r2, r3]
     39c:	0018      	movs	r0, r3
     39e:	4b05      	ldr	r3, [pc, #20]	; (3b4 <udi_cdc_data_sent+0x44>)
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     3a0:	4798      	blx	r3
     3a2:	e7eb      	b.n	37c <udi_cdc_data_sent+0xc>
     3a4:	20000350 	.word	0x20000350
		sd_mmc_card->version = CARD_VER_MMC_3;
     3a8:	20000348 	.word	0x20000348
		if (!driver_read_word(&sec_count)) {
     3ac:	20000244 	.word	0x20000244
     3b0:	20000358 	.word	0x20000358
     3b4:	000001f9 	.word	0x000001f9

000003b8 <udi_cdc_data_sof_notify>:
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     3b8:	b510      	push	{r4, lr}
     3ba:	4c08      	ldr	r4, [pc, #32]	; (3dc <udi_cdc_data_sof_notify+0x24>)
     3bc:	7820      	ldrb	r0, [r4, #0]
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <udi_cdc_data_sof_notify+0x28>)
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     3c0:	4798      	blx	r3
     3c2:	7823      	ldrb	r3, [r4, #0]
     3c4:	3301      	adds	r3, #1
     3c6:	b2db      	uxtb	r3, r3
     3c8:	2b01      	cmp	r3, #1
     3ca:	d903      	bls.n	3d4 <udi_cdc_data_sof_notify+0x1c>
     3cc:	2200      	movs	r2, #0
     3ce:	4b03      	ldr	r3, [pc, #12]	; (3dc <udi_cdc_data_sof_notify+0x24>)
	if (!sd_mmc_cmd13()) {
     3d0:	701a      	strb	r2, [r3, #0]
     3d2:	bd10      	pop	{r4, pc}
     3d4:	4a01      	ldr	r2, [pc, #4]	; (3dc <udi_cdc_data_sof_notify+0x24>)
     3d6:	7013      	strb	r3, [r2, #0]
     3d8:	e7fb      	b.n	3d2 <udi_cdc_data_sof_notify+0x1a>
	sd_mmc_configure_slot();
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	20000110 	.word	0x20000110
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     3e0:	000001f9 	.word	0x000001f9

000003e4 <udi_cdc_ctrl_state_notify>:
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3e4:	b530      	push	{r4, r5, lr}
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3e6:	b083      	sub	sp, #12
     3e8:	0004      	movs	r4, r0
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3ea:	0008      	movs	r0, r1
     3ec:	4b11      	ldr	r3, [pc, #68]	; (434 <udi_cdc_ctrl_state_notify+0x50>)
	value &=  ((uint32_t)1 << size) - 1;
     3ee:	5d1b      	ldrb	r3, [r3, r4]
				* 512;
     3f0:	2b00      	cmp	r3, #0
     3f2:	d11c      	bne.n	42e <udi_cdc_ctrl_state_notify+0x4a>
     3f4:	0063      	lsls	r3, r4, #1
     3f6:	4a10      	ldr	r2, [pc, #64]	; (438 <udi_cdc_ctrl_state_notify+0x54>)
     3f8:	5a9a      	ldrh	r2, [r3, r2]
		sd_mmc_card->capacity =
     3fa:	b292      	uxth	r2, r2
     3fc:	00a3      	lsls	r3, r4, #2
		sd_mmc_card->version = CARD_VER_SD_1_0;
     3fe:	191b      	adds	r3, r3, r4
     400:	005b      	lsls	r3, r3, #1
     402:	490e      	ldr	r1, [pc, #56]	; (43c <udi_cdc_ctrl_state_notify+0x58>)
     404:	18cb      	adds	r3, r1, r3
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     406:	891b      	ldrh	r3, [r3, #8]
     408:	4293      	cmp	r3, r2
     40a:	d010      	beq.n	42e <udi_cdc_ctrl_state_notify+0x4a>
     40c:	0062      	lsls	r2, r4, #1
     40e:	4b0a      	ldr	r3, [pc, #40]	; (438 <udi_cdc_ctrl_state_notify+0x54>)
     410:	5ad2      	ldrh	r2, [r2, r3]
     412:	00a3      	lsls	r3, r4, #2
     414:	191b      	adds	r3, r3, r4
     416:	005b      	lsls	r3, r3, #1
		sd_mmc_card->version = CARD_VER_SD_1_10;
     418:	18cb      	adds	r3, r1, r3
     41a:	811a      	strh	r2, [r3, #8]
     41c:	001a      	movs	r2, r3
     41e:	4b08      	ldr	r3, [pc, #32]	; (440 <udi_cdc_ctrl_state_notify+0x5c>)
     420:	9300      	str	r3, [sp, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     422:	230a      	movs	r3, #10
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     424:	2100      	movs	r1, #0
     426:	4d07      	ldr	r5, [pc, #28]	; (444 <udi_cdc_ctrl_state_notify+0x60>)
     428:	47a8      	blx	r5
     42a:	4b02      	ldr	r3, [pc, #8]	; (434 <udi_cdc_ctrl_state_notify+0x50>)
			sd_mmc_card->version = CARD_VER_SD_3_0;
     42c:	5518      	strb	r0, [r3, r4]
     42e:	b003      	add	sp, #12
     430:	bd30      	pop	{r4, r5, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	2000023c 	.word	0x2000023c
			sd_mmc_card->version = CARD_VER_SD_2_0;
     438:	20000240 	.word	0x20000240
     43c:	2000035c 	.word	0x2000035c
	*v2 = 0;
     440:	000004ad 	.word	0x000004ad
     444:	00001b9d 	.word	0x00001b9d

00000448 <udi_cdc_ctrl_state_change>:
     448:	b530      	push	{r4, r5, lr}
     44a:	b083      	sub	sp, #12
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     44c:	f3ef 8310 	mrs	r3, PRIMASK
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     450:	425c      	negs	r4, r3
		resp = driver_get_response();
     452:	4163      	adcs	r3, r4
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     454:	9301      	str	r3, [sp, #4]
     456:	b672      	cpsid	i
     458:	f3bf 8f5f 	dmb	sy
     45c:	2400      	movs	r4, #0
     45e:	4b10      	ldr	r3, [pc, #64]	; (4a0 <udi_cdc_ctrl_state_change+0x58>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     460:	701c      	strb	r4, [r3, #0]
     462:	9b01      	ldr	r3, [sp, #4]
     464:	2900      	cmp	r1, #0
     466:	d014      	beq.n	492 <udi_cdc_ctrl_state_change+0x4a>
     468:	4c0e      	ldr	r4, [pc, #56]	; (4a4 <udi_cdc_ctrl_state_change+0x5c>)
     46a:	0045      	lsls	r5, r0, #1
		resp = driver_get_response();
     46c:	5b29      	ldrh	r1, [r5, r4]
		if (!(resp & R1_SPI_IDLE)) {
     46e:	430a      	orrs	r2, r1
     470:	532a      	strh	r2, [r5, r4]
     472:	2b00      	cmp	r3, #0
     474:	d005      	beq.n	482 <udi_cdc_ctrl_state_change+0x3a>
		if (retry-- == 0) {
     476:	2201      	movs	r2, #1
     478:	4b09      	ldr	r3, [pc, #36]	; (4a0 <udi_cdc_ctrl_state_change+0x58>)
     47a:	701a      	strb	r2, [r3, #0]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     47c:	f3bf 8f5f 	dmb	sy
     480:	b662      	cpsie	i
     482:	2186      	movs	r1, #134	; 0x86
     484:	2801      	cmp	r0, #1
     486:	d000      	beq.n	48a <udi_cdc_ctrl_state_change+0x42>
     488:	3903      	subs	r1, #3
     48a:	4b07      	ldr	r3, [pc, #28]	; (4a8 <udi_cdc_ctrl_state_change+0x60>)
     48c:	4798      	blx	r3
     48e:	b003      	add	sp, #12
     490:	bd30      	pop	{r4, r5, pc}
     492:	4c04      	ldr	r4, [pc, #16]	; (4a4 <udi_cdc_ctrl_state_change+0x5c>)
     494:	0045      	lsls	r5, r0, #1
     496:	5b29      	ldrh	r1, [r5, r4]
     498:	4391      	bics	r1, r2
     49a:	5329      	strh	r1, [r5, r4]
     49c:	e7e9      	b.n	472 <udi_cdc_ctrl_state_change+0x2a>
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	200000f0 	.word	0x200000f0
     4a4:	20000240 	.word	0x20000240
     4a8:	000003e5 	.word	0x000003e5

000004ac <udi_cdc_serial_state_msg_sent>:
     4ac:	b570      	push	{r4, r5, r6, lr}
     4ae:	0010      	movs	r0, r2
	switch (ep) {
#define UDI_CDC_GET_PORT_FROM_COMM_EP(iface, unused) \
	case UDI_CDC_COMM_EP_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_GET_PORT_FROM_COMM_EP, ~)
     4b0:	3886      	subs	r0, #134	; 0x86
     4b2:	4243      	negs	r3, r0
     4b4:	4158      	adcs	r0, r3
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
     4b6:	2100      	movs	r1, #0
     4b8:	4b09      	ldr	r3, [pc, #36]	; (4e0 <udi_cdc_serial_state_msg_sent+0x34>)
     4ba:	5419      	strb	r1, [r3, r0]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
     4bc:	4909      	ldr	r1, [pc, #36]	; (4e4 <udi_cdc_serial_state_msg_sent+0x38>)
     4be:	0044      	lsls	r4, r0, #1
     4c0:	5a63      	ldrh	r3, [r4, r1]
     4c2:	257c      	movs	r5, #124	; 0x7c
     4c4:	43ab      	bics	r3, r5
     4c6:	5263      	strh	r3, [r4, r1]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     4c8:	4907      	ldr	r1, [pc, #28]	; (4e8 <udi_cdc_serial_state_msg_sent+0x3c>)
     4ca:	0083      	lsls	r3, r0, #2
     4cc:	181c      	adds	r4, r3, r0
     4ce:	0064      	lsls	r4, r4, #1
     4d0:	190c      	adds	r4, r1, r4
     4d2:	8923      	ldrh	r3, [r4, #8]
     4d4:	43ab      	bics	r3, r5
     4d6:	8123      	strh	r3, [r4, #8]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
     4d8:	0011      	movs	r1, r2
     4da:	4b04      	ldr	r3, [pc, #16]	; (4ec <udi_cdc_serial_state_msg_sent+0x40>)
     4dc:	4798      	blx	r3
}
     4de:	bd70      	pop	{r4, r5, r6, pc}
     4e0:	2000023c 	.word	0x2000023c
     4e4:	20000240 	.word	0x20000240
     4e8:	2000035c 	.word	0x2000035c
     4ec:	000003e5 	.word	0x000003e5

000004f0 <udi_cdc_data_disable>:
{
     4f0:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     4f2:	4a06      	ldr	r2, [pc, #24]	; (50c <udi_cdc_data_disable+0x1c>)
     4f4:	7813      	ldrb	r3, [r2, #0]
     4f6:	3b01      	subs	r3, #1
     4f8:	b2db      	uxtb	r3, r3
     4fa:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     4fc:	7810      	ldrb	r0, [r2, #0]
     4fe:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     500:	4b03      	ldr	r3, [pc, #12]	; (510 <udi_cdc_data_disable+0x20>)
     502:	4798      	blx	r3
	udi_cdc_data_running = false;
     504:	2200      	movs	r2, #0
     506:	4b03      	ldr	r3, [pc, #12]	; (514 <udi_cdc_data_disable+0x24>)
     508:	701a      	strb	r2, [r3, #0]
}
     50a:	bd10      	pop	{r4, pc}
     50c:	20000127 	.word	0x20000127
     510:	00001ef9 	.word	0x00001ef9
     514:	20000114 	.word	0x20000114

00000518 <udi_cdc_comm_setup>:
{
     518:	b510      	push	{r4, lr}
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
     51a:	4b25      	ldr	r3, [pc, #148]	; (5b0 <udi_cdc_comm_setup+0x98>)
     51c:	7918      	ldrb	r0, [r3, #4]
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
     51e:	3802      	subs	r0, #2
     520:	4244      	negs	r4, r0
     522:	4144      	adcs	r4, r0
	if (Udd_setup_is_in()) {
     524:	781a      	ldrb	r2, [r3, #0]
     526:	b253      	sxtb	r3, r2
     528:	2b00      	cmp	r3, #0
     52a:	db05      	blt.n	538 <udi_cdc_comm_setup+0x20>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     52c:	2360      	movs	r3, #96	; 0x60
     52e:	4013      	ands	r3, r2
	return false;  // request Not supported
     530:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     532:	2b20      	cmp	r3, #32
     534:	d017      	beq.n	566 <udi_cdc_comm_setup+0x4e>
}
     536:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     538:	2360      	movs	r3, #96	; 0x60
     53a:	4013      	ands	r3, r2
	return false;  // request Not supported
     53c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     53e:	2b20      	cmp	r3, #32
     540:	d1f9      	bne.n	536 <udi_cdc_comm_setup+0x1e>
			switch (udd_g_ctrlreq.req.bRequest) {
     542:	4b1b      	ldr	r3, [pc, #108]	; (5b0 <udi_cdc_comm_setup+0x98>)
     544:	785b      	ldrb	r3, [r3, #1]
     546:	2b21      	cmp	r3, #33	; 0x21
     548:	d12f      	bne.n	5aa <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
     54a:	4b19      	ldr	r3, [pc, #100]	; (5b0 <udi_cdc_comm_setup+0x98>)
				if (sizeof(usb_cdc_line_coding_t) !=
     54c:	88db      	ldrh	r3, [r3, #6]
     54e:	2b07      	cmp	r3, #7
     550:	d1f1      	bne.n	536 <udi_cdc_comm_setup+0x1e>
				udd_g_ctrlreq.payload =
     552:	4b17      	ldr	r3, [pc, #92]	; (5b0 <udi_cdc_comm_setup+0x98>)
						(uint8_t *) &
     554:	00e0      	lsls	r0, r4, #3
     556:	1b04      	subs	r4, r0, r4
     558:	4816      	ldr	r0, [pc, #88]	; (5b4 <udi_cdc_comm_setup+0x9c>)
     55a:	1900      	adds	r0, r0, r4
				udd_g_ctrlreq.payload =
     55c:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size =
     55e:	2207      	movs	r2, #7
     560:	819a      	strh	r2, [r3, #12]
				return true;
     562:	2001      	movs	r0, #1
     564:	e7e7      	b.n	536 <udi_cdc_comm_setup+0x1e>
			switch (udd_g_ctrlreq.req.bRequest) {
     566:	4b12      	ldr	r3, [pc, #72]	; (5b0 <udi_cdc_comm_setup+0x98>)
     568:	785b      	ldrb	r3, [r3, #1]
     56a:	2b20      	cmp	r3, #32
     56c:	d003      	beq.n	576 <udi_cdc_comm_setup+0x5e>
     56e:	2b22      	cmp	r3, #34	; 0x22
     570:	d012      	beq.n	598 <udi_cdc_comm_setup+0x80>
	return false;  // request Not supported
     572:	2000      	movs	r0, #0
     574:	e7df      	b.n	536 <udi_cdc_comm_setup+0x1e>
						udd_g_ctrlreq.req.wLength)
     576:	4b0e      	ldr	r3, [pc, #56]	; (5b0 <udi_cdc_comm_setup+0x98>)
				if (sizeof(usb_cdc_line_coding_t) !=
     578:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     57a:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     57c:	2b07      	cmp	r3, #7
     57e:	d1da      	bne.n	536 <udi_cdc_comm_setup+0x1e>
				udd_g_ctrlreq.callback =
     580:	4b0b      	ldr	r3, [pc, #44]	; (5b0 <udi_cdc_comm_setup+0x98>)
     582:	4a0d      	ldr	r2, [pc, #52]	; (5b8 <udi_cdc_comm_setup+0xa0>)
     584:	611a      	str	r2, [r3, #16]
						(uint8_t *) &
     586:	00e0      	lsls	r0, r4, #3
     588:	1b04      	subs	r4, r0, r4
     58a:	480a      	ldr	r0, [pc, #40]	; (5b4 <udi_cdc_comm_setup+0x9c>)
     58c:	1900      	adds	r0, r0, r4
				udd_g_ctrlreq.payload =
     58e:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size =
     590:	2207      	movs	r2, #7
     592:	819a      	strh	r2, [r3, #12]
				return true;
     594:	2001      	movs	r0, #1
     596:	e7ce      	b.n	536 <udi_cdc_comm_setup+0x1e>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     598:	4b05      	ldr	r3, [pc, #20]	; (5b0 <udi_cdc_comm_setup+0x98>)
     59a:	885b      	ldrh	r3, [r3, #2]
     59c:	2101      	movs	r1, #1
     59e:	4019      	ands	r1, r3
     5a0:	0020      	movs	r0, r4
     5a2:	4b06      	ldr	r3, [pc, #24]	; (5bc <udi_cdc_comm_setup+0xa4>)
     5a4:	4798      	blx	r3
				return true;
     5a6:	2001      	movs	r0, #1
     5a8:	e7c5      	b.n	536 <udi_cdc_comm_setup+0x1e>
	return false;  // request Not supported
     5aa:	2000      	movs	r0, #0
     5ac:	e7c3      	b.n	536 <udi_cdc_comm_setup+0x1e>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	2000077c 	.word	0x2000077c
     5b4:	20000118 	.word	0x20000118
     5b8:	0000012d 	.word	0x0000012d
     5bc:	00001f11 	.word	0x00001f11

000005c0 <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
     5c0:	b510      	push	{r4, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
     5c2:	2240      	movs	r2, #64	; 0x40
     5c4:	2101      	movs	r1, #1
     5c6:	2000      	movs	r0, #0
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <udi_cdc_signal_overrun+0x10>)
     5ca:	4798      	blx	r3
}
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	00000449 	.word	0x00000449

000005d4 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     5d4:	b510      	push	{r4, lr}
     5d6:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     5d8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     5dc:	425a      	negs	r2, r3
     5de:	4153      	adcs	r3, r2
     5e0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     5e2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     5e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     5e8:	2200      	movs	r2, #0
     5ea:	4b0b      	ldr	r3, [pc, #44]	; (618 <udi_cdc_multi_get_nb_received_data+0x44>)
     5ec:	701a      	strb	r2, [r3, #0]
	return flags;
     5ee:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     5f0:	0042      	lsls	r2, r0, #1
     5f2:	4b0a      	ldr	r3, [pc, #40]	; (61c <udi_cdc_multi_get_nb_received_data+0x48>)
     5f4:	5ad4      	ldrh	r4, [r2, r3]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     5f6:	4b0a      	ldr	r3, [pc, #40]	; (620 <udi_cdc_multi_get_nb_received_data+0x4c>)
     5f8:	5c1b      	ldrb	r3, [r3, r0]
     5fa:	189b      	adds	r3, r3, r2
     5fc:	005b      	lsls	r3, r3, #1
     5fe:	4a09      	ldr	r2, [pc, #36]	; (624 <udi_cdc_multi_get_nb_received_data+0x50>)
     600:	5a98      	ldrh	r0, [r3, r2]
     602:	1b00      	subs	r0, r0, r4
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     604:	2900      	cmp	r1, #0
     606:	d005      	beq.n	614 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
     608:	2201      	movs	r2, #1
     60a:	4b03      	ldr	r3, [pc, #12]	; (618 <udi_cdc_multi_get_nb_received_data+0x44>)
     60c:	701a      	strb	r2, [r3, #0]
     60e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     612:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     614:	b002      	add	sp, #8
     616:	bd10      	pop	{r4, pc}
     618:	200000f0 	.word	0x200000f0
     61c:	20000234 	.word	0x20000234
     620:	20000230 	.word	0x20000230
     624:	20000228 	.word	0x20000228

00000628 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     628:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     62a:	4b03      	ldr	r3, [pc, #12]	; (638 <udi_cdc_multi_is_rx_ready+0x10>)
     62c:	4798      	blx	r3
     62e:	1e43      	subs	r3, r0, #1
     630:	4198      	sbcs	r0, r3
     632:	b2c0      	uxtb	r0, r0
}
     634:	bd10      	pop	{r4, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	000005d5 	.word	0x000005d5

0000063c <udi_cdc_rx_start>:
{
     63c:	b530      	push	{r4, r5, lr}
     63e:	b085      	sub	sp, #20
     640:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     642:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     646:	425a      	negs	r2, r3
     648:	4153      	adcs	r3, r2
     64a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     64c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     64e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     652:	2200      	movs	r2, #0
     654:	4b25      	ldr	r3, [pc, #148]	; (6ec <udi_cdc_rx_start+0xb0>)
     656:	701a      	strb	r2, [r3, #0]
	return flags;
     658:	9903      	ldr	r1, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     65a:	4b25      	ldr	r3, [pc, #148]	; (6f0 <udi_cdc_rx_start+0xb4>)
     65c:	5c1d      	ldrb	r5, [r3, r0]
     65e:	b2ed      	uxtb	r5, r5
	if (udi_cdc_rx_trans_ongoing[port] ||
     660:	4b24      	ldr	r3, [pc, #144]	; (6f4 <udi_cdc_rx_start+0xb8>)
     662:	5c1b      	ldrb	r3, [r3, r0]
     664:	2b00      	cmp	r3, #0
     666:	d109      	bne.n	67c <udi_cdc_rx_start+0x40>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     668:	0043      	lsls	r3, r0, #1
     66a:	4a23      	ldr	r2, [pc, #140]	; (6f8 <udi_cdc_rx_start+0xbc>)
     66c:	5a9a      	ldrh	r2, [r3, r2]
     66e:	195b      	adds	r3, r3, r5
     670:	005b      	lsls	r3, r3, #1
     672:	4822      	ldr	r0, [pc, #136]	; (6fc <udi_cdc_rx_start+0xc0>)
     674:	5a18      	ldrh	r0, [r3, r0]
     676:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     678:	4282      	cmp	r2, r0
     67a:	d20a      	bcs.n	692 <udi_cdc_rx_start+0x56>
		return false;
     67c:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     67e:	2900      	cmp	r1, #0
     680:	d005      	beq.n	68e <udi_cdc_rx_start+0x52>
		cpu_irq_enable();
     682:	2201      	movs	r2, #1
     684:	4b19      	ldr	r3, [pc, #100]	; (6ec <udi_cdc_rx_start+0xb0>)
     686:	701a      	strb	r2, [r3, #0]
     688:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     68c:	b662      	cpsie	i
}
     68e:	b005      	add	sp, #20
     690:	bd30      	pop	{r4, r5, pc}
	udi_cdc_rx_pos[port] = 0;
     692:	0063      	lsls	r3, r4, #1
     694:	2000      	movs	r0, #0
     696:	4a18      	ldr	r2, [pc, #96]	; (6f8 <udi_cdc_rx_start+0xbc>)
     698:	5298      	strh	r0, [r3, r2]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     69a:	426b      	negs	r3, r5
     69c:	416b      	adcs	r3, r5
     69e:	b2db      	uxtb	r3, r3
     6a0:	4a13      	ldr	r2, [pc, #76]	; (6f0 <udi_cdc_rx_start+0xb4>)
     6a2:	5513      	strb	r3, [r2, r4]
	udi_cdc_rx_trans_ongoing[port] = true;
     6a4:	2201      	movs	r2, #1
     6a6:	4b13      	ldr	r3, [pc, #76]	; (6f4 <udi_cdc_rx_start+0xb8>)
     6a8:	551a      	strb	r2, [r3, r4]
	if (cpu_irq_is_enabled_flags(flags))
     6aa:	2900      	cmp	r1, #0
     6ac:	d004      	beq.n	6b8 <udi_cdc_rx_start+0x7c>
		cpu_irq_enable();
     6ae:	4b0f      	ldr	r3, [pc, #60]	; (6ec <udi_cdc_rx_start+0xb0>)
     6b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     6b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     6b6:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     6b8:	0020      	movs	r0, r4
     6ba:	4b11      	ldr	r3, [pc, #68]	; (700 <udi_cdc_rx_start+0xc4>)
     6bc:	4798      	blx	r3
     6be:	2800      	cmp	r0, #0
     6c0:	d10f      	bne.n	6e2 <udi_cdc_rx_start+0xa6>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
     6c2:	2005      	movs	r0, #5
	switch (port) {
     6c4:	2c01      	cmp	r4, #1
     6c6:	d000      	beq.n	6ca <udi_cdc_rx_start+0x8e>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
     6c8:	3803      	subs	r0, #3
			udi_cdc_rx_buf[port][buf_sel_trans],
     6ca:	0062      	lsls	r2, r4, #1
     6cc:	1952      	adds	r2, r2, r5
     6ce:	0192      	lsls	r2, r2, #6
     6d0:	4c0c      	ldr	r4, [pc, #48]	; (704 <udi_cdc_rx_start+0xc8>)
     6d2:	18a2      	adds	r2, r4, r2
	return udd_ep_run(ep,
     6d4:	4b0c      	ldr	r3, [pc, #48]	; (708 <udi_cdc_rx_start+0xcc>)
     6d6:	9300      	str	r3, [sp, #0]
     6d8:	2340      	movs	r3, #64	; 0x40
     6da:	2101      	movs	r1, #1
     6dc:	4c0b      	ldr	r4, [pc, #44]	; (70c <udi_cdc_rx_start+0xd0>)
     6de:	47a0      	blx	r4
     6e0:	e7d5      	b.n	68e <udi_cdc_rx_start+0x52>
		UDI_CDC_RX_NOTIFY(port);
     6e2:	0020      	movs	r0, r4
     6e4:	4b0a      	ldr	r3, [pc, #40]	; (710 <udi_cdc_rx_start+0xd4>)
     6e6:	4798      	blx	r3
     6e8:	e7eb      	b.n	6c2 <udi_cdc_rx_start+0x86>
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	200000f0 	.word	0x200000f0
     6f0:	20000230 	.word	0x20000230
     6f4:	20000238 	.word	0x20000238
     6f8:	20000234 	.word	0x20000234
     6fc:	20000228 	.word	0x20000228
     700:	00000629 	.word	0x00000629
     704:	20000128 	.word	0x20000128
     708:	000007cd 	.word	0x000007cd
     70c:	00001b9d 	.word	0x00001b9d
     710:	00003add 	.word	0x00003add

00000714 <udi_cdc_data_enable>:
{
     714:	b5f0      	push	{r4, r5, r6, r7, lr}
     716:	46c6      	mov	lr, r8
     718:	b500      	push	{lr}
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
     71a:	4b1f      	ldr	r3, [pc, #124]	; (798 <udi_cdc_data_enable+0x84>)
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	b2db      	uxtb	r3, r3
     720:	2b02      	cmp	r3, #2
     722:	d902      	bls.n	72a <udi_cdc_data_enable+0x16>
		udi_cdc_nb_data_enabled = 0;
     724:	2200      	movs	r2, #0
     726:	4b1c      	ldr	r3, [pc, #112]	; (798 <udi_cdc_data_enable+0x84>)
     728:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
     72a:	4b1b      	ldr	r3, [pc, #108]	; (798 <udi_cdc_data_enable+0x84>)
     72c:	781c      	ldrb	r4, [r3, #0]
     72e:	b2e4      	uxtb	r4, r4
	udi_cdc_tx_trans_ongoing[port] = false;
     730:	2500      	movs	r5, #0
     732:	4b1a      	ldr	r3, [pc, #104]	; (79c <udi_cdc_data_enable+0x88>)
     734:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_both_buf_to_send[port] = false;
     736:	4b1a      	ldr	r3, [pc, #104]	; (7a0 <udi_cdc_data_enable+0x8c>)
     738:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_buf_sel[port] = 0;
     73a:	4b1a      	ldr	r3, [pc, #104]	; (7a4 <udi_cdc_data_enable+0x90>)
     73c:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_buf_nb[port][0] = 0;
     73e:	4b1a      	ldr	r3, [pc, #104]	; (7a8 <udi_cdc_data_enable+0x94>)
     740:	00a6      	lsls	r6, r4, #2
     742:	2200      	movs	r2, #0
     744:	4690      	mov	r8, r2
     746:	52f5      	strh	r5, [r6, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
     748:	199b      	adds	r3, r3, r6
     74a:	805d      	strh	r5, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     74c:	0067      	lsls	r7, r4, #1
     74e:	4b17      	ldr	r3, [pc, #92]	; (7ac <udi_cdc_data_enable+0x98>)
     750:	52fd      	strh	r5, [r7, r3]
	udi_cdc_tx_send(port);
     752:	0020      	movs	r0, r4
     754:	4b16      	ldr	r3, [pc, #88]	; (7b0 <udi_cdc_data_enable+0x9c>)
     756:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     758:	4b16      	ldr	r3, [pc, #88]	; (7b4 <udi_cdc_data_enable+0xa0>)
     75a:	4642      	mov	r2, r8
     75c:	551a      	strb	r2, [r3, r4]
	udi_cdc_rx_buf_sel[port] = 0;
     75e:	4b16      	ldr	r3, [pc, #88]	; (7b8 <udi_cdc_data_enable+0xa4>)
     760:	551a      	strb	r2, [r3, r4]
	udi_cdc_rx_buf_nb[port][0] = 0;
     762:	4b16      	ldr	r3, [pc, #88]	; (7bc <udi_cdc_data_enable+0xa8>)
     764:	52f5      	strh	r5, [r6, r3]
	udi_cdc_rx_buf_nb[port][1] = 0;
     766:	199b      	adds	r3, r3, r6
     768:	805d      	strh	r5, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     76a:	4b15      	ldr	r3, [pc, #84]	; (7c0 <udi_cdc_data_enable+0xac>)
     76c:	52fd      	strh	r5, [r7, r3]
	if (!udi_cdc_rx_start(port)) {
     76e:	0020      	movs	r0, r4
     770:	4b14      	ldr	r3, [pc, #80]	; (7c4 <udi_cdc_data_enable+0xb0>)
     772:	4798      	blx	r3
     774:	2800      	cmp	r0, #0
     776:	d007      	beq.n	788 <udi_cdc_data_enable+0x74>
	udi_cdc_nb_data_enabled++;
     778:	4a07      	ldr	r2, [pc, #28]	; (798 <udi_cdc_data_enable+0x84>)
     77a:	7813      	ldrb	r3, [r2, #0]
     77c:	3301      	adds	r3, #1
     77e:	b2db      	uxtb	r3, r3
     780:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     782:	7813      	ldrb	r3, [r2, #0]
     784:	2b02      	cmp	r3, #2
     786:	d002      	beq.n	78e <udi_cdc_data_enable+0x7a>
}
     788:	bc04      	pop	{r2}
     78a:	4690      	mov	r8, r2
     78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		udi_cdc_data_running = true;
     78e:	2201      	movs	r2, #1
     790:	4b0d      	ldr	r3, [pc, #52]	; (7c8 <udi_cdc_data_enable+0xb4>)
     792:	701a      	strb	r2, [r3, #0]
     794:	e7f8      	b.n	788 <udi_cdc_data_enable+0x74>
     796:	46c0      	nop			; (mov r8, r8)
     798:	20000127 	.word	0x20000127
     79c:	20000358 	.word	0x20000358
     7a0:	20000244 	.word	0x20000244
     7a4:	20000350 	.word	0x20000350
     7a8:	20000348 	.word	0x20000348
     7ac:	20000354 	.word	0x20000354
     7b0:	000001f9 	.word	0x000001f9
     7b4:	20000238 	.word	0x20000238
     7b8:	20000230 	.word	0x20000230
     7bc:	20000228 	.word	0x20000228
     7c0:	20000234 	.word	0x20000234
     7c4:	0000063d 	.word	0x0000063d
     7c8:	20000114 	.word	0x20000114

000007cc <udi_cdc_data_received>:
{
     7cc:	b510      	push	{r4, lr}
     7ce:	b082      	sub	sp, #8
     7d0:	0014      	movs	r4, r2
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
     7d2:	1f53      	subs	r3, r2, #5
     7d4:	425a      	negs	r2, r3
     7d6:	4153      	adcs	r3, r2
	if (UDD_EP_TRANSFER_OK != status) {
     7d8:	2800      	cmp	r0, #0
     7da:	d112      	bne.n	802 <udi_cdc_data_received+0x36>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     7dc:	4a10      	ldr	r2, [pc, #64]	; (820 <udi_cdc_data_received+0x54>)
     7de:	5cd2      	ldrb	r2, [r2, r3]
     7e0:	4250      	negs	r0, r2
     7e2:	4142      	adcs	r2, r0
     7e4:	b2d2      	uxtb	r2, r2
	if (!n) {
     7e6:	2900      	cmp	r1, #0
     7e8:	d00d      	beq.n	806 <udi_cdc_data_received+0x3a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     7ea:	b289      	uxth	r1, r1
     7ec:	0058      	lsls	r0, r3, #1
     7ee:	1882      	adds	r2, r0, r2
     7f0:	0052      	lsls	r2, r2, #1
     7f2:	480c      	ldr	r0, [pc, #48]	; (824 <udi_cdc_data_received+0x58>)
     7f4:	5211      	strh	r1, [r2, r0]
	udi_cdc_rx_trans_ongoing[port] = false;
     7f6:	2100      	movs	r1, #0
     7f8:	4a0b      	ldr	r2, [pc, #44]	; (828 <udi_cdc_data_received+0x5c>)
     7fa:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
     7fc:	0018      	movs	r0, r3
     7fe:	4b0b      	ldr	r3, [pc, #44]	; (82c <udi_cdc_data_received+0x60>)
     800:	4798      	blx	r3
}
     802:	b002      	add	sp, #8
     804:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     806:	005b      	lsls	r3, r3, #1
     808:	189a      	adds	r2, r3, r2
     80a:	0192      	lsls	r2, r2, #6
     80c:	4b08      	ldr	r3, [pc, #32]	; (830 <udi_cdc_data_received+0x64>)
     80e:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     810:	4b08      	ldr	r3, [pc, #32]	; (834 <udi_cdc_data_received+0x68>)
     812:	9300      	str	r3, [sp, #0]
     814:	2340      	movs	r3, #64	; 0x40
     816:	3101      	adds	r1, #1
     818:	0020      	movs	r0, r4
     81a:	4c07      	ldr	r4, [pc, #28]	; (838 <udi_cdc_data_received+0x6c>)
     81c:	47a0      	blx	r4
		return;
     81e:	e7f0      	b.n	802 <udi_cdc_data_received+0x36>
     820:	20000230 	.word	0x20000230
     824:	20000228 	.word	0x20000228
     828:	20000238 	.word	0x20000238
     82c:	0000063d 	.word	0x0000063d
     830:	20000128 	.word	0x20000128
     834:	000007cd 	.word	0x000007cd
     838:	00001b9d 	.word	0x00001b9d

0000083c <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     83c:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     83e:	2000      	movs	r0, #0
     840:	4b01      	ldr	r3, [pc, #4]	; (848 <udi_cdc_is_rx_ready+0xc>)
     842:	4798      	blx	r3
}
     844:	bd10      	pop	{r4, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	00000629 	.word	0x00000629

0000084c <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	46de      	mov	lr, fp
     850:	4657      	mov	r7, sl
     852:	464e      	mov	r6, r9
     854:	4645      	mov	r5, r8
     856:	b5e0      	push	{r5, r6, r7, lr}
     858:	b085      	sub	sp, #20
     85a:	9001      	str	r0, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     85c:	0004      	movs	r4, r0
     85e:	00c2      	lsls	r2, r0, #3
     860:	1a12      	subs	r2, r2, r0
     862:	4b2d      	ldr	r3, [pc, #180]	; (918 <udi_cdc_multi_getc+0xcc>)
     864:	189b      	adds	r3, r3, r2
     866:	799b      	ldrb	r3, [r3, #6]
     868:	3b09      	subs	r3, #9
     86a:	425a      	negs	r2, r3
     86c:	4153      	adcs	r3, r2
     86e:	b2db      	uxtb	r3, r3
     870:	469a      	mov	sl, r3
	int rx_data = 0;
     872:	2300      	movs	r3, #0
     874:	469b      	mov	fp, r3
	cpu_irq_disable();
     876:	4b29      	ldr	r3, [pc, #164]	; (91c <udi_cdc_multi_getc+0xd0>)
     878:	4699      	mov	r9, r3
     87a:	2600      	movs	r6, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     87c:	4f28      	ldr	r7, [pc, #160]	; (920 <udi_cdc_multi_getc+0xd4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     87e:	4b29      	ldr	r3, [pc, #164]	; (924 <udi_cdc_multi_getc+0xd8>)
     880:	4698      	mov	r8, r3
     882:	e005      	b.n	890 <udi_cdc_multi_getc+0x44>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     884:	429a      	cmp	r2, r3
     886:	d32d      	bcc.n	8e4 <udi_cdc_multi_getc+0x98>
		if (!udi_cdc_data_running) {
     888:	4b27      	ldr	r3, [pc, #156]	; (928 <udi_cdc_multi_getc+0xdc>)
     88a:	781b      	ldrb	r3, [r3, #0]
     88c:	2b00      	cmp	r3, #0
     88e:	d020      	beq.n	8d2 <udi_cdc_multi_getc+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     890:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     894:	425a      	negs	r2, r3
     896:	4153      	adcs	r3, r2
     898:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     89a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     89c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     8a0:	464b      	mov	r3, r9
     8a2:	701e      	strb	r6, [r3, #0]
	return flags;
     8a4:	9803      	ldr	r0, [sp, #12]
	pos = udi_cdc_rx_pos[port];
     8a6:	0063      	lsls	r3, r4, #1
     8a8:	5bda      	ldrh	r2, [r3, r7]
     8aa:	b292      	uxth	r2, r2
	buf_sel = udi_cdc_rx_buf_sel[port];
     8ac:	4641      	mov	r1, r8
     8ae:	5d09      	ldrb	r1, [r1, r4]
     8b0:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     8b2:	185b      	adds	r3, r3, r1
     8b4:	005b      	lsls	r3, r3, #1
     8b6:	4d1d      	ldr	r5, [pc, #116]	; (92c <udi_cdc_multi_getc+0xe0>)
     8b8:	5b5b      	ldrh	r3, [r3, r5]
     8ba:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
     8bc:	2800      	cmp	r0, #0
     8be:	d0e1      	beq.n	884 <udi_cdc_multi_getc+0x38>
		cpu_irq_enable();
     8c0:	2001      	movs	r0, #1
     8c2:	4684      	mov	ip, r0
     8c4:	4815      	ldr	r0, [pc, #84]	; (91c <udi_cdc_multi_getc+0xd0>)
     8c6:	4665      	mov	r5, ip
     8c8:	7005      	strb	r5, [r0, #0]
     8ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     8ce:	b662      	cpsie	i
     8d0:	e7d8      	b.n	884 <udi_cdc_multi_getc+0x38>
			return 0;
     8d2:	469b      	mov	fp, r3
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     8d4:	4658      	mov	r0, fp
     8d6:	b005      	add	sp, #20
     8d8:	bc3c      	pop	{r2, r3, r4, r5}
     8da:	4690      	mov	r8, r2
     8dc:	4699      	mov	r9, r3
     8de:	46a2      	mov	sl, r4
     8e0:	46ab      	mov	fp, r5
     8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     8e4:	0063      	lsls	r3, r4, #1
     8e6:	1859      	adds	r1, r3, r1
     8e8:	0189      	lsls	r1, r1, #6
     8ea:	4811      	ldr	r0, [pc, #68]	; (930 <udi_cdc_multi_getc+0xe4>)
     8ec:	1841      	adds	r1, r0, r1
     8ee:	5c89      	ldrb	r1, [r1, r2]
     8f0:	4658      	mov	r0, fp
     8f2:	4308      	orrs	r0, r1
     8f4:	4683      	mov	fp, r0
	udi_cdc_rx_pos[port] = pos+1;
     8f6:	3201      	adds	r2, #1
     8f8:	b292      	uxth	r2, r2
     8fa:	4909      	ldr	r1, [pc, #36]	; (920 <udi_cdc_multi_getc+0xd4>)
     8fc:	525a      	strh	r2, [r3, r1]
	udi_cdc_rx_start(port);
     8fe:	9801      	ldr	r0, [sp, #4]
     900:	4b0c      	ldr	r3, [pc, #48]	; (934 <udi_cdc_multi_getc+0xe8>)
     902:	4798      	blx	r3
	if (b_databit_9) {
     904:	4653      	mov	r3, sl
     906:	2b00      	cmp	r3, #0
     908:	d0e4      	beq.n	8d4 <udi_cdc_multi_getc+0x88>
		rx_data = rx_data << 8;
     90a:	465b      	mov	r3, fp
     90c:	021b      	lsls	r3, r3, #8
     90e:	469b      	mov	fp, r3
		b_databit_9 = false;
     910:	2300      	movs	r3, #0
     912:	469a      	mov	sl, r3
		goto udi_cdc_getc_process_one_byte;
     914:	e7bc      	b.n	890 <udi_cdc_multi_getc+0x44>
     916:	46c0      	nop			; (mov r8, r8)
     918:	20000118 	.word	0x20000118
     91c:	200000f0 	.word	0x200000f0
     920:	20000234 	.word	0x20000234
     924:	20000230 	.word	0x20000230
     928:	20000114 	.word	0x20000114
     92c:	20000228 	.word	0x20000228
     930:	20000128 	.word	0x20000128
     934:	0000063d 	.word	0x0000063d

00000938 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     938:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     93a:	2000      	movs	r0, #0
     93c:	4b01      	ldr	r3, [pc, #4]	; (944 <udi_cdc_getc+0xc>)
     93e:	4798      	blx	r3
}
     940:	bd10      	pop	{r4, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	0000084d 	.word	0x0000084d

00000948 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     948:	b510      	push	{r4, lr}
     94a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     94c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     950:	425a      	negs	r2, r3
     952:	4153      	adcs	r3, r2
     954:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     956:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     958:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     95c:	2200      	movs	r2, #0
     95e:	4b15      	ldr	r3, [pc, #84]	; (9b4 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     960:	701a      	strb	r2, [r3, #0]
	return flags;
     962:	9c01      	ldr	r4, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     964:	4b14      	ldr	r3, [pc, #80]	; (9b8 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     966:	5c1a      	ldrb	r2, [r3, r0]
     968:	b2d2      	uxtb	r2, r2
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     96a:	0043      	lsls	r3, r0, #1
     96c:	189b      	adds	r3, r3, r2
     96e:	005b      	lsls	r3, r3, #1
     970:	4912      	ldr	r1, [pc, #72]	; (9bc <udi_cdc_multi_get_free_tx_buffer+0x74>)
     972:	5a5b      	ldrh	r3, [r3, r1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     974:	2b40      	cmp	r3, #64	; 0x40
     976:	d00b      	beq.n	990 <udi_cdc_multi_get_free_tx_buffer+0x48>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     978:	2040      	movs	r0, #64	; 0x40
     97a:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
     97c:	2c00      	cmp	r4, #0
     97e:	d005      	beq.n	98c <udi_cdc_multi_get_free_tx_buffer+0x44>
		cpu_irq_enable();
     980:	2201      	movs	r2, #1
     982:	4b0c      	ldr	r3, [pc, #48]	; (9b4 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     984:	701a      	strb	r2, [r3, #0]
     986:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     98a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     98c:	b002      	add	sp, #8
     98e:	bd10      	pop	{r4, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
     990:	490b      	ldr	r1, [pc, #44]	; (9c0 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     992:	5c09      	ldrb	r1, [r1, r0]
     994:	2900      	cmp	r1, #0
     996:	d1ef      	bne.n	978 <udi_cdc_multi_get_free_tx_buffer+0x30>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     998:	490a      	ldr	r1, [pc, #40]	; (9c4 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     99a:	5c09      	ldrb	r1, [r1, r0]
     99c:	2900      	cmp	r1, #0
     99e:	d1eb      	bne.n	978 <udi_cdc_multi_get_free_tx_buffer+0x30>
			udi_cdc_tx_both_buf_to_send[port] = true;
     9a0:	3101      	adds	r1, #1
     9a2:	4b08      	ldr	r3, [pc, #32]	; (9c4 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     9a4:	5419      	strb	r1, [r3, r0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     9a6:	4253      	negs	r3, r2
     9a8:	415a      	adcs	r2, r3
     9aa:	b2d2      	uxtb	r2, r2
     9ac:	4b02      	ldr	r3, [pc, #8]	; (9b8 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     9ae:	541a      	strb	r2, [r3, r0]
			buf_sel_nb = 0;
     9b0:	2300      	movs	r3, #0
     9b2:	e7e1      	b.n	978 <udi_cdc_multi_get_free_tx_buffer+0x30>
     9b4:	200000f0 	.word	0x200000f0
     9b8:	20000350 	.word	0x20000350
     9bc:	20000348 	.word	0x20000348
     9c0:	20000358 	.word	0x20000358
     9c4:	20000244 	.word	0x20000244

000009c8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     9c8:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     9ca:	4b03      	ldr	r3, [pc, #12]	; (9d8 <udi_cdc_multi_is_tx_ready+0x10>)
     9cc:	4798      	blx	r3
     9ce:	1e43      	subs	r3, r0, #1
     9d0:	4198      	sbcs	r0, r3
     9d2:	b2c0      	uxtb	r0, r0
}
     9d4:	bd10      	pop	{r4, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	00000949 	.word	0x00000949

000009dc <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
     9dc:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_tx_ready(0);
     9de:	2000      	movs	r0, #0
     9e0:	4b01      	ldr	r3, [pc, #4]	; (9e8 <udi_cdc_is_tx_ready+0xc>)
     9e2:	4798      	blx	r3
}
     9e4:	bd10      	pop	{r4, pc}
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	000009c9 	.word	0x000009c9

000009ec <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ee:	46de      	mov	lr, fp
     9f0:	4657      	mov	r7, sl
     9f2:	464e      	mov	r6, r9
     9f4:	4645      	mov	r5, r8
     9f6:	b5e0      	push	{r5, r6, r7, lr}
     9f8:	b085      	sub	sp, #20
     9fa:	9000      	str	r0, [sp, #0]
     9fc:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     9fe:	0006      	movs	r6, r0
     a00:	00c2      	lsls	r2, r0, #3
     a02:	1a12      	subs	r2, r2, r0
     a04:	4b25      	ldr	r3, [pc, #148]	; (a9c <udi_cdc_multi_putc+0xb0>)
     a06:	189b      	adds	r3, r3, r2
     a08:	799d      	ldrb	r5, [r3, #6]
     a0a:	3d09      	subs	r5, #9
     a0c:	426b      	negs	r3, r5
     a0e:	415d      	adcs	r5, r3
     a10:	b2ed      	uxtb	r5, r5
	cpu_irq_disable();
     a12:	4b23      	ldr	r3, [pc, #140]	; (aa0 <udi_cdc_multi_putc+0xb4>)
     a14:	469a      	mov	sl, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     a16:	4b23      	ldr	r3, [pc, #140]	; (aa4 <udi_cdc_multi_putc+0xb8>)
     a18:	4698      	mov	r8, r3
     a1a:	e02c      	b.n	a76 <udi_cdc_multi_putc+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a1c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a20:	425a      	negs	r2, r3
     a22:	4153      	adcs	r3, r2
     a24:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     a26:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     a28:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a2c:	2300      	movs	r3, #0
     a2e:	4652      	mov	r2, sl
     a30:	7013      	strb	r3, [r2, #0]
	return flags;
     a32:	9b03      	ldr	r3, [sp, #12]
     a34:	9301      	str	r3, [sp, #4]
     a36:	4643      	mov	r3, r8
     a38:	5d9b      	ldrb	r3, [r3, r6]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     a3a:	4a1b      	ldr	r2, [pc, #108]	; (aa8 <udi_cdc_multi_putc+0xbc>)
     a3c:	4691      	mov	r9, r2
     a3e:	0070      	lsls	r0, r6, #1
     a40:	181b      	adds	r3, r3, r0
     a42:	0058      	lsls	r0, r3, #1
     a44:	4684      	mov	ip, r0
     a46:	5a80      	ldrh	r0, [r0, r2]
     a48:	1c42      	adds	r2, r0, #1
     a4a:	4693      	mov	fp, r2
     a4c:	4662      	mov	r2, ip
     a4e:	4659      	mov	r1, fp
     a50:	464f      	mov	r7, r9
     a52:	53d1      	strh	r1, [r2, r7]
     a54:	019b      	lsls	r3, r3, #6
     a56:	4a15      	ldr	r2, [pc, #84]	; (aac <udi_cdc_multi_putc+0xc0>)
     a58:	18d3      	adds	r3, r2, r3
     a5a:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
     a5c:	9b01      	ldr	r3, [sp, #4]
     a5e:	2b00      	cmp	r3, #0
     a60:	d005      	beq.n	a6e <udi_cdc_multi_putc+0x82>
		cpu_irq_enable();
     a62:	2201      	movs	r2, #1
     a64:	4b0e      	ldr	r3, [pc, #56]	; (aa0 <udi_cdc_multi_putc+0xb4>)
     a66:	701a      	strb	r2, [r3, #0]
     a68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a6c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     a6e:	2d00      	cmp	r5, #0
     a70:	d011      	beq.n	a96 <udi_cdc_multi_putc+0xaa>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     a72:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     a74:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     a76:	9800      	ldr	r0, [sp, #0]
     a78:	4b0d      	ldr	r3, [pc, #52]	; (ab0 <udi_cdc_multi_putc+0xc4>)
     a7a:	4798      	blx	r3
     a7c:	2800      	cmp	r0, #0
     a7e:	d1cd      	bne.n	a1c <udi_cdc_multi_putc+0x30>
		if (!udi_cdc_data_running) {
     a80:	4b0c      	ldr	r3, [pc, #48]	; (ab4 <udi_cdc_multi_putc+0xc8>)
     a82:	781b      	ldrb	r3, [r3, #0]
     a84:	2b00      	cmp	r3, #0
     a86:	d1f6      	bne.n	a76 <udi_cdc_multi_putc+0x8a>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     a88:	b005      	add	sp, #20
     a8a:	bc3c      	pop	{r2, r3, r4, r5}
     a8c:	4690      	mov	r8, r2
     a8e:	4699      	mov	r9, r3
     a90:	46a2      	mov	sl, r4
     a92:	46ab      	mov	fp, r5
     a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     a96:	2001      	movs	r0, #1
     a98:	e7f6      	b.n	a88 <udi_cdc_multi_putc+0x9c>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	20000118 	.word	0x20000118
     aa0:	200000f0 	.word	0x200000f0
     aa4:	20000350 	.word	0x20000350
     aa8:	20000348 	.word	0x20000348
     aac:	20000248 	.word	0x20000248
     ab0:	000009c9 	.word	0x000009c9
     ab4:	20000114 	.word	0x20000114

00000ab8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     ab8:	b510      	push	{r4, lr}
     aba:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     abc:	2000      	movs	r0, #0
     abe:	4b01      	ldr	r3, [pc, #4]	; (ac4 <udi_cdc_putc+0xc>)
     ac0:	4798      	blx	r3
}
     ac2:	bd10      	pop	{r4, pc}
     ac4:	000009ed 	.word	0x000009ed

00000ac8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     ac8:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     aca:	4b11      	ldr	r3, [pc, #68]	; (b10 <udc_next_desc_in_iface+0x48>)
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     ad0:	7894      	ldrb	r4, [r2, #2]
     ad2:	78d3      	ldrb	r3, [r2, #3]
     ad4:	021b      	lsls	r3, r3, #8
     ad6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     ad8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     ada:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     adc:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     ade:	4290      	cmp	r0, r2
     ae0:	d210      	bcs.n	b04 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     ae2:	7843      	ldrb	r3, [r0, #1]
     ae4:	2b04      	cmp	r3, #4
     ae6:	d00f      	beq.n	b08 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     ae8:	428b      	cmp	r3, r1
     aea:	d00a      	beq.n	b02 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     aec:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     aee:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     af0:	4290      	cmp	r0, r2
     af2:	d205      	bcs.n	b00 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     af4:	7843      	ldrb	r3, [r0, #1]
     af6:	2b04      	cmp	r3, #4
     af8:	d008      	beq.n	b0c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     afa:	428b      	cmp	r3, r1
     afc:	d1f6      	bne.n	aec <udc_next_desc_in_iface+0x24>
     afe:	e000      	b.n	b02 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     b00:	2000      	movs	r0, #0
}
     b02:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     b04:	2000      	movs	r0, #0
     b06:	e7fc      	b.n	b02 <udc_next_desc_in_iface+0x3a>
     b08:	2000      	movs	r0, #0
     b0a:	e7fa      	b.n	b02 <udc_next_desc_in_iface+0x3a>
     b0c:	2000      	movs	r0, #0
     b0e:	e7f8      	b.n	b02 <udc_next_desc_in_iface+0x3a>
     b10:	2000037c 	.word	0x2000037c

00000b14 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     b14:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     b16:	4b03      	ldr	r3, [pc, #12]	; (b24 <udc_valid_address+0x10>)
     b18:	885b      	ldrh	r3, [r3, #2]
     b1a:	207f      	movs	r0, #127	; 0x7f
     b1c:	4018      	ands	r0, r3
     b1e:	4b02      	ldr	r3, [pc, #8]	; (b28 <udc_valid_address+0x14>)
     b20:	4798      	blx	r3
}
     b22:	bd10      	pop	{r4, pc}
     b24:	2000077c 	.word	0x2000077c
     b28:	00001d75 	.word	0x00001d75

00000b2c <udc_update_iface_desc>:
{
     b2c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     b2e:	4b19      	ldr	r3, [pc, #100]	; (b94 <udc_update_iface_desc+0x68>)
     b30:	781b      	ldrb	r3, [r3, #0]
		return false;
     b32:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     b34:	2b00      	cmp	r3, #0
     b36:	d029      	beq.n	b8c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b38:	4b17      	ldr	r3, [pc, #92]	; (b98 <udc_update_iface_desc+0x6c>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	791c      	ldrb	r4, [r3, #4]
     b40:	4284      	cmp	r4, r0
     b42:	d923      	bls.n	b8c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     b44:	4a15      	ldr	r2, [pc, #84]	; (b9c <udc_update_iface_desc+0x70>)
     b46:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b48:	789a      	ldrb	r2, [r3, #2]
     b4a:	78dc      	ldrb	r4, [r3, #3]
     b4c:	0224      	lsls	r4, r4, #8
     b4e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     b50:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     b52:	42a3      	cmp	r3, r4
     b54:	d21c      	bcs.n	b90 <udc_update_iface_desc+0x64>
     b56:	2500      	movs	r5, #0
     b58:	2601      	movs	r6, #1
     b5a:	e007      	b.n	b6c <udc_update_iface_desc+0x40>
     b5c:	4a0f      	ldr	r2, [pc, #60]	; (b9c <udc_update_iface_desc+0x70>)
     b5e:	6013      	str	r3, [r2, #0]
     b60:	e00f      	b.n	b82 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     b62:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     b64:	189b      	adds	r3, r3, r2
     b66:	0035      	movs	r5, r6
	while (ptr_end_desc >
     b68:	42a3      	cmp	r3, r4
     b6a:	d20c      	bcs.n	b86 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     b6c:	785a      	ldrb	r2, [r3, #1]
     b6e:	2a04      	cmp	r2, #4
     b70:	d1f7      	bne.n	b62 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     b72:	789a      	ldrb	r2, [r3, #2]
     b74:	4282      	cmp	r2, r0
     b76:	d1f4      	bne.n	b62 <udc_update_iface_desc+0x36>
     b78:	78da      	ldrb	r2, [r3, #3]
     b7a:	428a      	cmp	r2, r1
     b7c:	d1f1      	bne.n	b62 <udc_update_iface_desc+0x36>
     b7e:	2d00      	cmp	r5, #0
     b80:	d1ec      	bne.n	b5c <udc_update_iface_desc+0x30>
				return true; // Interface found
     b82:	2201      	movs	r2, #1
     b84:	e002      	b.n	b8c <udc_update_iface_desc+0x60>
     b86:	4a05      	ldr	r2, [pc, #20]	; (b9c <udc_update_iface_desc+0x70>)
     b88:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     b8a:	2200      	movs	r2, #0
}
     b8c:	0010      	movs	r0, r2
     b8e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     b90:	2200      	movs	r2, #0
     b92:	e7fb      	b.n	b8c <udc_update_iface_desc+0x60>
     b94:	20000378 	.word	0x20000378
     b98:	2000037c 	.word	0x2000037c
     b9c:	20000380 	.word	0x20000380

00000ba0 <udc_iface_disable>:
{
     ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ba2:	46c6      	mov	lr, r8
     ba4:	b500      	push	{lr}
     ba6:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     ba8:	2100      	movs	r1, #0
     baa:	4b13      	ldr	r3, [pc, #76]	; (bf8 <udc_iface_disable+0x58>)
     bac:	4798      	blx	r3
     bae:	1e05      	subs	r5, r0, #0
     bb0:	d103      	bne.n	bba <udc_iface_disable+0x1a>
}
     bb2:	0028      	movs	r0, r5
     bb4:	bc04      	pop	{r2}
     bb6:	4690      	mov	r8, r2
     bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     bba:	4b10      	ldr	r3, [pc, #64]	; (bfc <udc_iface_disable+0x5c>)
     bbc:	681b      	ldr	r3, [r3, #0]
     bbe:	685b      	ldr	r3, [r3, #4]
     bc0:	00a2      	lsls	r2, r4, #2
     bc2:	58d3      	ldr	r3, [r2, r3]
     bc4:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     bc6:	68db      	ldr	r3, [r3, #12]
     bc8:	4798      	blx	r3
     bca:	0001      	movs	r1, r0
     bcc:	0020      	movs	r0, r4
     bce:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <udc_iface_disable+0x58>)
     bd0:	4798      	blx	r3
     bd2:	1e05      	subs	r5, r0, #0
     bd4:	d0ed      	beq.n	bb2 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     bd6:	4b0a      	ldr	r3, [pc, #40]	; (c00 <udc_iface_disable+0x60>)
     bd8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bda:	4e0a      	ldr	r6, [pc, #40]	; (c04 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     bdc:	4f0a      	ldr	r7, [pc, #40]	; (c08 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bde:	2105      	movs	r1, #5
     be0:	0020      	movs	r0, r4
     be2:	47b0      	blx	r6
     be4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     be6:	d002      	beq.n	bee <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     be8:	7880      	ldrb	r0, [r0, #2]
     bea:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bec:	e7f7      	b.n	bde <udc_iface_disable+0x3e>
	udi_api->disable();
     bee:	4643      	mov	r3, r8
     bf0:	685b      	ldr	r3, [r3, #4]
     bf2:	4798      	blx	r3
	return true;
     bf4:	e7dd      	b.n	bb2 <udc_iface_disable+0x12>
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00000b2d 	.word	0x00000b2d
     bfc:	2000037c 	.word	0x2000037c
     c00:	20000380 	.word	0x20000380
     c04:	00000ac9 	.word	0x00000ac9
     c08:	000018b5 	.word	0x000018b5

00000c0c <udc_iface_enable>:
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     c10:	4b0f      	ldr	r3, [pc, #60]	; (c50 <udc_iface_enable+0x44>)
     c12:	4798      	blx	r3
     c14:	2800      	cmp	r0, #0
     c16:	d019      	beq.n	c4c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c18:	4b0e      	ldr	r3, [pc, #56]	; (c54 <udc_iface_enable+0x48>)
     c1a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c1c:	4e0e      	ldr	r6, [pc, #56]	; (c58 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c1e:	4f0f      	ldr	r7, [pc, #60]	; (c5c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c20:	2105      	movs	r1, #5
     c22:	0020      	movs	r0, r4
     c24:	47b0      	blx	r6
     c26:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     c28:	d009      	beq.n	c3e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c2a:	7903      	ldrb	r3, [r0, #4]
     c2c:	7942      	ldrb	r2, [r0, #5]
     c2e:	0212      	lsls	r2, r2, #8
     c30:	431a      	orrs	r2, r3
     c32:	78c1      	ldrb	r1, [r0, #3]
     c34:	7880      	ldrb	r0, [r0, #2]
     c36:	47b8      	blx	r7
     c38:	2800      	cmp	r0, #0
     c3a:	d1f1      	bne.n	c20 <udc_iface_enable+0x14>
     c3c:	e006      	b.n	c4c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     c3e:	4b08      	ldr	r3, [pc, #32]	; (c60 <udc_iface_enable+0x54>)
     c40:	681b      	ldr	r3, [r3, #0]
     c42:	685b      	ldr	r3, [r3, #4]
     c44:	00ad      	lsls	r5, r5, #2
     c46:	58eb      	ldr	r3, [r5, r3]
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	4798      	blx	r3
}
     c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00000b2d 	.word	0x00000b2d
     c54:	20000380 	.word	0x20000380
     c58:	00000ac9 	.word	0x00000ac9
     c5c:	0000190d 	.word	0x0000190d
     c60:	2000037c 	.word	0x2000037c

00000c64 <udc_start>:
{
     c64:	b510      	push	{r4, lr}
	udd_enable();
     c66:	4b01      	ldr	r3, [pc, #4]	; (c6c <udc_start+0x8>)
     c68:	4798      	blx	r3
}
     c6a:	bd10      	pop	{r4, pc}
     c6c:	00001e25 	.word	0x00001e25

00000c70 <udc_reset>:
{
     c70:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     c72:	4b0e      	ldr	r3, [pc, #56]	; (cac <udc_reset+0x3c>)
     c74:	781b      	ldrb	r3, [r3, #0]
     c76:	2b00      	cmp	r3, #0
     c78:	d011      	beq.n	c9e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c7a:	4b0d      	ldr	r3, [pc, #52]	; (cb0 <udc_reset+0x40>)
     c7c:	681b      	ldr	r3, [r3, #0]
     c7e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     c80:	791b      	ldrb	r3, [r3, #4]
     c82:	2b00      	cmp	r3, #0
     c84:	d00b      	beq.n	c9e <udc_reset+0x2e>
     c86:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     c88:	4e0a      	ldr	r6, [pc, #40]	; (cb4 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c8a:	4d09      	ldr	r5, [pc, #36]	; (cb0 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     c8c:	0020      	movs	r0, r4
     c8e:	47b0      	blx	r6
				iface_num++) {
     c90:	3401      	adds	r4, #1
     c92:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c94:	682b      	ldr	r3, [r5, #0]
     c96:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     c98:	791b      	ldrb	r3, [r3, #4]
     c9a:	42a3      	cmp	r3, r4
     c9c:	d8f6      	bhi.n	c8c <udc_reset+0x1c>
	udc_num_configuration = 0;
     c9e:	2200      	movs	r2, #0
     ca0:	4b02      	ldr	r3, [pc, #8]	; (cac <udc_reset+0x3c>)
     ca2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     ca4:	3201      	adds	r2, #1
     ca6:	4b04      	ldr	r3, [pc, #16]	; (cb8 <udc_reset+0x48>)
     ca8:	801a      	strh	r2, [r3, #0]
}
     caa:	bd70      	pop	{r4, r5, r6, pc}
     cac:	20000378 	.word	0x20000378
     cb0:	2000037c 	.word	0x2000037c
     cb4:	00000ba1 	.word	0x00000ba1
     cb8:	20000370 	.word	0x20000370

00000cbc <udc_sof_notify>:
{
     cbc:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     cbe:	4b0e      	ldr	r3, [pc, #56]	; (cf8 <udc_sof_notify+0x3c>)
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d017      	beq.n	cf6 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cc6:	4b0d      	ldr	r3, [pc, #52]	; (cfc <udc_sof_notify+0x40>)
     cc8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     cca:	681a      	ldr	r2, [r3, #0]
     ccc:	7912      	ldrb	r2, [r2, #4]
     cce:	2a00      	cmp	r2, #0
     cd0:	d011      	beq.n	cf6 <udc_sof_notify+0x3a>
     cd2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cd4:	4d09      	ldr	r5, [pc, #36]	; (cfc <udc_sof_notify+0x40>)
     cd6:	e006      	b.n	ce6 <udc_sof_notify+0x2a>
				iface_num++) {
     cd8:	3401      	adds	r4, #1
     cda:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cdc:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     cde:	681a      	ldr	r2, [r3, #0]
     ce0:	7912      	ldrb	r2, [r2, #4]
     ce2:	42a2      	cmp	r2, r4
     ce4:	d907      	bls.n	cf6 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     ce6:	685b      	ldr	r3, [r3, #4]
     ce8:	00a2      	lsls	r2, r4, #2
     cea:	58d3      	ldr	r3, [r2, r3]
     cec:	691b      	ldr	r3, [r3, #16]
     cee:	2b00      	cmp	r3, #0
     cf0:	d0f2      	beq.n	cd8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     cf2:	4798      	blx	r3
     cf4:	e7f0      	b.n	cd8 <udc_sof_notify+0x1c>
}
     cf6:	bd70      	pop	{r4, r5, r6, pc}
     cf8:	20000378 	.word	0x20000378
     cfc:	2000037c 	.word	0x2000037c

00000d00 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     d02:	4bac      	ldr	r3, [pc, #688]	; (fb4 <udc_process_setup+0x2b4>)
     d04:	2200      	movs	r2, #0
     d06:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     d08:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     d0a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     d0c:	781b      	ldrb	r3, [r3, #0]
     d0e:	b25a      	sxtb	r2, r3
     d10:	2a00      	cmp	r2, #0
     d12:	db13      	blt.n	d3c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d14:	2260      	movs	r2, #96	; 0x60
     d16:	421a      	tst	r2, r3
     d18:	d100      	bne.n	d1c <udc_process_setup+0x1c>
     d1a:	e0d9      	b.n	ed0 <udc_process_setup+0x1d0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d1c:	4ba5      	ldr	r3, [pc, #660]	; (fb4 <udc_process_setup+0x2b4>)
     d1e:	781a      	ldrb	r2, [r3, #0]
     d20:	231f      	movs	r3, #31
     d22:	4013      	ands	r3, r2
     d24:	2b01      	cmp	r3, #1
     d26:	d100      	bne.n	d2a <udc_process_setup+0x2a>
     d28:	e176      	b.n	1018 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d2a:	4ba2      	ldr	r3, [pc, #648]	; (fb4 <udc_process_setup+0x2b4>)
     d2c:	781a      	ldrb	r2, [r3, #0]
     d2e:	231f      	movs	r3, #31
     d30:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     d32:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d34:	2b02      	cmp	r3, #2
     d36:	d100      	bne.n	d3a <udc_process_setup+0x3a>
     d38:	e1cc      	b.n	10d4 <udc_process_setup+0x3d4>
#endif
}
     d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     d3c:	4a9d      	ldr	r2, [pc, #628]	; (fb4 <udc_process_setup+0x2b4>)
     d3e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     d40:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     d42:	2a00      	cmp	r2, #0
     d44:	d0f9      	beq.n	d3a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d46:	2160      	movs	r1, #96	; 0x60
     d48:	4219      	tst	r1, r3
     d4a:	d1e7      	bne.n	d1c <udc_process_setup+0x1c>
     d4c:	211f      	movs	r1, #31
     d4e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     d50:	d108      	bne.n	d64 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     d52:	4998      	ldr	r1, [pc, #608]	; (fb4 <udc_process_setup+0x2b4>)
     d54:	7849      	ldrb	r1, [r1, #1]
     d56:	2906      	cmp	r1, #6
     d58:	d023      	beq.n	da2 <udc_process_setup+0xa2>
     d5a:	2908      	cmp	r1, #8
     d5c:	d100      	bne.n	d60 <udc_process_setup+0x60>
     d5e:	e086      	b.n	e6e <udc_process_setup+0x16e>
     d60:	2900      	cmp	r1, #0
     d62:	d017      	beq.n	d94 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d64:	2b01      	cmp	r3, #1
     d66:	d100      	bne.n	d6a <udc_process_setup+0x6a>
     d68:	e089      	b.n	e7e <udc_process_setup+0x17e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d6a:	2b02      	cmp	r3, #2
     d6c:	d1d6      	bne.n	d1c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     d6e:	4b91      	ldr	r3, [pc, #580]	; (fb4 <udc_process_setup+0x2b4>)
     d70:	785b      	ldrb	r3, [r3, #1]
	return false;
     d72:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     d74:	2b00      	cmp	r3, #0
     d76:	d000      	beq.n	d7a <udc_process_setup+0x7a>
     d78:	e1a8      	b.n	10cc <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d7a:	2a02      	cmp	r2, #2
     d7c:	d1d5      	bne.n	d2a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     d7e:	4b8d      	ldr	r3, [pc, #564]	; (fb4 <udc_process_setup+0x2b4>)
     d80:	7918      	ldrb	r0, [r3, #4]
     d82:	4b8d      	ldr	r3, [pc, #564]	; (fb8 <udc_process_setup+0x2b8>)
     d84:	4798      	blx	r3
     d86:	4b8d      	ldr	r3, [pc, #564]	; (fbc <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     d88:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     d8a:	2102      	movs	r1, #2
     d8c:	0018      	movs	r0, r3
     d8e:	4b8c      	ldr	r3, [pc, #560]	; (fc0 <udc_process_setup+0x2c0>)
     d90:	4798      	blx	r3
     d92:	e0fe      	b.n	f92 <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     d94:	2a02      	cmp	r2, #2
     d96:	d1c8      	bne.n	d2a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     d98:	3102      	adds	r1, #2
     d9a:	488a      	ldr	r0, [pc, #552]	; (fc4 <udc_process_setup+0x2c4>)
     d9c:	4b88      	ldr	r3, [pc, #544]	; (fc0 <udc_process_setup+0x2c0>)
     d9e:	4798      	blx	r3
     da0:	e0f7      	b.n	f92 <udc_process_setup+0x292>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     da2:	4b84      	ldr	r3, [pc, #528]	; (fb4 <udc_process_setup+0x2b4>)
     da4:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     da6:	0a13      	lsrs	r3, r2, #8
     da8:	2b02      	cmp	r3, #2
     daa:	d023      	beq.n	df4 <udc_process_setup+0xf4>
     dac:	b2d9      	uxtb	r1, r3
     dae:	2902      	cmp	r1, #2
     db0:	d90f      	bls.n	dd2 <udc_process_setup+0xd2>
     db2:	2b03      	cmp	r3, #3
     db4:	d034      	beq.n	e20 <udc_process_setup+0x120>
     db6:	2b0f      	cmp	r3, #15
     db8:	d000      	beq.n	dbc <udc_process_setup+0xbc>
     dba:	e184      	b.n	10c6 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
     dbc:	4b82      	ldr	r3, [pc, #520]	; (fc8 <udc_process_setup+0x2c8>)
     dbe:	6898      	ldr	r0, [r3, #8]
     dc0:	2800      	cmp	r0, #0
     dc2:	d0b2      	beq.n	d2a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     dc4:	7883      	ldrb	r3, [r0, #2]
     dc6:	78c1      	ldrb	r1, [r0, #3]
     dc8:	0209      	lsls	r1, r1, #8
     dca:	4319      	orrs	r1, r3
     dcc:	4b7c      	ldr	r3, [pc, #496]	; (fc0 <udc_process_setup+0x2c0>)
     dce:	4798      	blx	r3
     dd0:	e007      	b.n	de2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     dd2:	2b01      	cmp	r3, #1
     dd4:	d000      	beq.n	dd8 <udc_process_setup+0xd8>
     dd6:	e176      	b.n	10c6 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
     dd8:	4b7b      	ldr	r3, [pc, #492]	; (fc8 <udc_process_setup+0x2c8>)
     dda:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     ddc:	7801      	ldrb	r1, [r0, #0]
     dde:	4b78      	ldr	r3, [pc, #480]	; (fc0 <udc_process_setup+0x2c0>)
     de0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     de2:	4b74      	ldr	r3, [pc, #464]	; (fb4 <udc_process_setup+0x2b4>)
     de4:	88da      	ldrh	r2, [r3, #6]
     de6:	899b      	ldrh	r3, [r3, #12]
     de8:	4293      	cmp	r3, r2
     dea:	d800      	bhi.n	dee <udc_process_setup+0xee>
     dec:	e0d1      	b.n	f92 <udc_process_setup+0x292>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     dee:	4b71      	ldr	r3, [pc, #452]	; (fb4 <udc_process_setup+0x2b4>)
     df0:	819a      	strh	r2, [r3, #12]
     df2:	e0ce      	b.n	f92 <udc_process_setup+0x292>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     df4:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     df6:	4b74      	ldr	r3, [pc, #464]	; (fc8 <udc_process_setup+0x2c8>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	7c5b      	ldrb	r3, [r3, #17]
     dfc:	4293      	cmp	r3, r2
     dfe:	d800      	bhi.n	e02 <udc_process_setup+0x102>
     e00:	e793      	b.n	d2a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     e02:	4b71      	ldr	r3, [pc, #452]	; (fc8 <udc_process_setup+0x2c8>)
     e04:	685b      	ldr	r3, [r3, #4]
     e06:	00d2      	lsls	r2, r2, #3
     e08:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     e0a:	7883      	ldrb	r3, [r0, #2]
     e0c:	78c1      	ldrb	r1, [r0, #3]
     e0e:	0209      	lsls	r1, r1, #8
     e10:	4319      	orrs	r1, r3
     e12:	4b6b      	ldr	r3, [pc, #428]	; (fc0 <udc_process_setup+0x2c0>)
     e14:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     e16:	4b67      	ldr	r3, [pc, #412]	; (fb4 <udc_process_setup+0x2b4>)
     e18:	689b      	ldr	r3, [r3, #8]
     e1a:	2202      	movs	r2, #2
     e1c:	705a      	strb	r2, [r3, #1]
     e1e:	e7e0      	b.n	de2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     e20:	23ff      	movs	r3, #255	; 0xff
     e22:	401a      	ands	r2, r3
     e24:	2a01      	cmp	r2, #1
     e26:	d01f      	beq.n	e68 <udc_process_setup+0x168>
     e28:	2a00      	cmp	r2, #0
     e2a:	d018      	beq.n	e5e <udc_process_setup+0x15e>
     e2c:	2a02      	cmp	r2, #2
     e2e:	d100      	bne.n	e32 <udc_process_setup+0x132>
     e30:	e178      	b.n	1124 <udc_process_setup+0x424>
     e32:	2a03      	cmp	r2, #3
     e34:	d000      	beq.n	e38 <udc_process_setup+0x138>
     e36:	e771      	b.n	d1c <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     e38:	2107      	movs	r1, #7
		str = udc_get_string_serial_name();
     e3a:	4c64      	ldr	r4, [pc, #400]	; (fcc <udc_process_setup+0x2cc>)
     e3c:	4a64      	ldr	r2, [pc, #400]	; (fd0 <udc_process_setup+0x2d0>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     e3e:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     e40:	5ce0      	ldrb	r0, [r4, r3]
     e42:	8050      	strh	r0, [r2, #2]
     e44:	3301      	adds	r3, #1
     e46:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     e48:	b2d8      	uxtb	r0, r3
     e4a:	4281      	cmp	r1, r0
     e4c:	d8f8      	bhi.n	e40 <udc_process_setup+0x140>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     e4e:	0049      	lsls	r1, r1, #1
     e50:	3102      	adds	r1, #2
     e52:	485f      	ldr	r0, [pc, #380]	; (fd0 <udc_process_setup+0x2d0>)
     e54:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     e56:	b289      	uxth	r1, r1
     e58:	4b59      	ldr	r3, [pc, #356]	; (fc0 <udc_process_setup+0x2c0>)
     e5a:	4798      	blx	r3
     e5c:	e7c1      	b.n	de2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     e5e:	2104      	movs	r1, #4
     e60:	485c      	ldr	r0, [pc, #368]	; (fd4 <udc_process_setup+0x2d4>)
     e62:	4b57      	ldr	r3, [pc, #348]	; (fc0 <udc_process_setup+0x2c0>)
     e64:	4798      	blx	r3
     e66:	e7bc      	b.n	de2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     e68:	4c5b      	ldr	r4, [pc, #364]	; (fd8 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     e6a:	2110      	movs	r1, #16
     e6c:	e7e6      	b.n	e3c <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
     e6e:	2a01      	cmp	r2, #1
     e70:	d000      	beq.n	e74 <udc_process_setup+0x174>
     e72:	e75a      	b.n	d2a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     e74:	2101      	movs	r1, #1
     e76:	4859      	ldr	r0, [pc, #356]	; (fdc <udc_process_setup+0x2dc>)
     e78:	4b51      	ldr	r3, [pc, #324]	; (fc0 <udc_process_setup+0x2c0>)
     e7a:	4798      	blx	r3
     e7c:	e089      	b.n	f92 <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
     e7e:	494d      	ldr	r1, [pc, #308]	; (fb4 <udc_process_setup+0x2b4>)
     e80:	7849      	ldrb	r1, [r1, #1]
     e82:	290a      	cmp	r1, #10
     e84:	d000      	beq.n	e88 <udc_process_setup+0x188>
     e86:	e770      	b.n	d6a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     e88:	2a01      	cmp	r2, #1
     e8a:	d000      	beq.n	e8e <udc_process_setup+0x18e>
     e8c:	e0c4      	b.n	1018 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
     e8e:	4b53      	ldr	r3, [pc, #332]	; (fdc <udc_process_setup+0x2dc>)
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	2b00      	cmp	r3, #0
     e94:	d100      	bne.n	e98 <udc_process_setup+0x198>
     e96:	e0bf      	b.n	1018 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e98:	4b46      	ldr	r3, [pc, #280]	; (fb4 <udc_process_setup+0x2b4>)
     e9a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     e9c:	4b50      	ldr	r3, [pc, #320]	; (fe0 <udc_process_setup+0x2e0>)
     e9e:	681d      	ldr	r5, [r3, #0]
     ea0:	682b      	ldr	r3, [r5, #0]
     ea2:	791b      	ldrb	r3, [r3, #4]
     ea4:	42a3      	cmp	r3, r4
     ea6:	d800      	bhi.n	eaa <udc_process_setup+0x1aa>
     ea8:	e0b6      	b.n	1018 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
     eaa:	2100      	movs	r1, #0
     eac:	0020      	movs	r0, r4
     eae:	4b4d      	ldr	r3, [pc, #308]	; (fe4 <udc_process_setup+0x2e4>)
     eb0:	4798      	blx	r3
     eb2:	2800      	cmp	r0, #0
     eb4:	d100      	bne.n	eb8 <udc_process_setup+0x1b8>
     eb6:	e731      	b.n	d1c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     eb8:	686b      	ldr	r3, [r5, #4]
     eba:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     ebc:	58e3      	ldr	r3, [r4, r3]
     ebe:	68db      	ldr	r3, [r3, #12]
     ec0:	4798      	blx	r3
     ec2:	4b49      	ldr	r3, [pc, #292]	; (fe8 <udc_process_setup+0x2e8>)
     ec4:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     ec6:	2101      	movs	r1, #1
     ec8:	0018      	movs	r0, r3
     eca:	4b3d      	ldr	r3, [pc, #244]	; (fc0 <udc_process_setup+0x2c0>)
     ecc:	4798      	blx	r3
     ece:	e060      	b.n	f92 <udc_process_setup+0x292>
     ed0:	221f      	movs	r2, #31
     ed2:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     ed4:	d15f      	bne.n	f96 <udc_process_setup+0x296>
			switch (udd_g_ctrlreq.req.bRequest) {
     ed6:	4a37      	ldr	r2, [pc, #220]	; (fb4 <udc_process_setup+0x2b4>)
     ed8:	7852      	ldrb	r2, [r2, #1]
     eda:	2a03      	cmp	r2, #3
     edc:	d100      	bne.n	ee0 <udc_process_setup+0x1e0>
     ede:	e0f4      	b.n	10ca <udc_process_setup+0x3ca>
     ee0:	b2d1      	uxtb	r1, r2
     ee2:	2903      	cmp	r1, #3
     ee4:	d93b      	bls.n	f5e <udc_process_setup+0x25e>
     ee6:	2a05      	cmp	r2, #5
     ee8:	d04b      	beq.n	f82 <udc_process_setup+0x282>
     eea:	2a09      	cmp	r2, #9
     eec:	d153      	bne.n	f96 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
     eee:	4b31      	ldr	r3, [pc, #196]	; (fb4 <udc_process_setup+0x2b4>)
     ef0:	88db      	ldrh	r3, [r3, #6]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d000      	beq.n	ef8 <udc_process_setup+0x1f8>
     ef6:	e718      	b.n	d2a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     ef8:	4b3c      	ldr	r3, [pc, #240]	; (fec <udc_process_setup+0x2ec>)
     efa:	4798      	blx	r3
     efc:	2800      	cmp	r0, #0
     efe:	d100      	bne.n	f02 <udc_process_setup+0x202>
     f00:	e70c      	b.n	d1c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f02:	4b2c      	ldr	r3, [pc, #176]	; (fb4 <udc_process_setup+0x2b4>)
     f04:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     f06:	4b30      	ldr	r3, [pc, #192]	; (fc8 <udc_process_setup+0x2c8>)
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f0c:	429a      	cmp	r2, r3
     f0e:	dd00      	ble.n	f12 <udc_process_setup+0x212>
     f10:	e704      	b.n	d1c <udc_process_setup+0x1c>
	udc_reset();
     f12:	4b37      	ldr	r3, [pc, #220]	; (ff0 <udc_process_setup+0x2f0>)
     f14:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f16:	4b27      	ldr	r3, [pc, #156]	; (fb4 <udc_process_setup+0x2b4>)
     f18:	789b      	ldrb	r3, [r3, #2]
     f1a:	4a30      	ldr	r2, [pc, #192]	; (fdc <udc_process_setup+0x2dc>)
     f1c:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     f1e:	2b00      	cmp	r3, #0
     f20:	d037      	beq.n	f92 <udc_process_setup+0x292>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f22:	4a34      	ldr	r2, [pc, #208]	; (ff4 <udc_process_setup+0x2f4>)
     f24:	4694      	mov	ip, r2
     f26:	4463      	add	r3, ip
     f28:	00db      	lsls	r3, r3, #3
     f2a:	4a27      	ldr	r2, [pc, #156]	; (fc8 <udc_process_setup+0x2c8>)
     f2c:	6852      	ldr	r2, [r2, #4]
     f2e:	18d3      	adds	r3, r2, r3
     f30:	4a2b      	ldr	r2, [pc, #172]	; (fe0 <udc_process_setup+0x2e0>)
     f32:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	791b      	ldrb	r3, [r3, #4]
     f38:	2b00      	cmp	r3, #0
     f3a:	d02a      	beq.n	f92 <udc_process_setup+0x292>
     f3c:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     f3e:	4d2e      	ldr	r5, [pc, #184]	; (ff8 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f40:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     f42:	2100      	movs	r1, #0
     f44:	0020      	movs	r0, r4
     f46:	47a8      	blx	r5
     f48:	2800      	cmp	r0, #0
     f4a:	d100      	bne.n	f4e <udc_process_setup+0x24e>
     f4c:	e6e6      	b.n	d1c <udc_process_setup+0x1c>
			iface_num++) {
     f4e:	3401      	adds	r4, #1
     f50:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f52:	6833      	ldr	r3, [r6, #0]
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	791b      	ldrb	r3, [r3, #4]
     f58:	42a3      	cmp	r3, r4
     f5a:	d8f2      	bhi.n	f42 <udc_process_setup+0x242>
     f5c:	e019      	b.n	f92 <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
     f5e:	2a01      	cmp	r2, #1
     f60:	d119      	bne.n	f96 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
     f62:	4b14      	ldr	r3, [pc, #80]	; (fb4 <udc_process_setup+0x2b4>)
     f64:	88db      	ldrh	r3, [r3, #6]
     f66:	2b00      	cmp	r3, #0
     f68:	d000      	beq.n	f6c <udc_process_setup+0x26c>
     f6a:	e6de      	b.n	d2a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     f6c:	4b11      	ldr	r3, [pc, #68]	; (fb4 <udc_process_setup+0x2b4>)
     f6e:	885b      	ldrh	r3, [r3, #2]
     f70:	2b01      	cmp	r3, #1
     f72:	d000      	beq.n	f76 <udc_process_setup+0x276>
     f74:	e6d9      	b.n	d2a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     f76:	4a13      	ldr	r2, [pc, #76]	; (fc4 <udc_process_setup+0x2c4>)
     f78:	8813      	ldrh	r3, [r2, #0]
     f7a:	2102      	movs	r1, #2
     f7c:	438b      	bics	r3, r1
     f7e:	8013      	strh	r3, [r2, #0]
     f80:	e007      	b.n	f92 <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     f82:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <udc_process_setup+0x2b4>)
     f84:	88db      	ldrh	r3, [r3, #6]
     f86:	2b00      	cmp	r3, #0
     f88:	d000      	beq.n	f8c <udc_process_setup+0x28c>
     f8a:	e6ce      	b.n	d2a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     f8c:	4a1b      	ldr	r2, [pc, #108]	; (ffc <udc_process_setup+0x2fc>)
     f8e:	4b09      	ldr	r3, [pc, #36]	; (fb4 <udc_process_setup+0x2b4>)
     f90:	611a      	str	r2, [r3, #16]
			return true;
     f92:	2001      	movs	r0, #1
     f94:	e6d1      	b.n	d3a <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f96:	2b01      	cmp	r3, #1
     f98:	d032      	beq.n	1000 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f9a:	2b02      	cmp	r3, #2
     f9c:	d000      	beq.n	fa0 <udc_process_setup+0x2a0>
     f9e:	e6bd      	b.n	d1c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <udc_process_setup+0x2b4>)
     fa2:	785b      	ldrb	r3, [r3, #1]
     fa4:	2b01      	cmp	r3, #1
     fa6:	d06d      	beq.n	1084 <udc_process_setup+0x384>
     fa8:	2b03      	cmp	r3, #3
     faa:	d100      	bne.n	fae <udc_process_setup+0x2ae>
     fac:	e079      	b.n	10a2 <udc_process_setup+0x3a2>
	return false;
     fae:	2000      	movs	r0, #0
     fb0:	e08c      	b.n	10cc <udc_process_setup+0x3cc>
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	2000077c 	.word	0x2000077c
     fb8:	00001a15 	.word	0x00001a15
     fbc:	20000372 	.word	0x20000372
     fc0:	00001d95 	.word	0x00001d95
     fc4:	20000370 	.word	0x20000370
     fc8:	20000074 	.word	0x20000074
     fcc:	00004a68 	.word	0x00004a68
     fd0:	20000028 	.word	0x20000028
     fd4:	2000004c 	.word	0x2000004c
     fd8:	20000050 	.word	0x20000050
     fdc:	20000378 	.word	0x20000378
     fe0:	2000037c 	.word	0x2000037c
     fe4:	00000b2d 	.word	0x00000b2d
     fe8:	20000374 	.word	0x20000374
     fec:	00001d85 	.word	0x00001d85
     ff0:	00000c71 	.word	0x00000c71
     ff4:	1fffffff 	.word	0x1fffffff
     ff8:	00000c0d 	.word	0x00000c0d
     ffc:	00000b15 	.word	0x00000b15
			switch (udd_g_ctrlreq.req.bRequest) {
    1000:	4a4a      	ldr	r2, [pc, #296]	; (112c <udc_process_setup+0x42c>)
    1002:	7852      	ldrb	r2, [r2, #1]
    1004:	2a0b      	cmp	r2, #11
    1006:	d1c8      	bne.n	f9a <udc_process_setup+0x29a>
	if (udd_g_ctrlreq.req.wLength) {
    1008:	4b48      	ldr	r3, [pc, #288]	; (112c <udc_process_setup+0x42c>)
    100a:	88db      	ldrh	r3, [r3, #6]
    100c:	2b00      	cmp	r3, #0
    100e:	d103      	bne.n	1018 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1010:	4b47      	ldr	r3, [pc, #284]	; (1130 <udc_process_setup+0x430>)
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	2b00      	cmp	r3, #0
    1016:	d127      	bne.n	1068 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1018:	4b45      	ldr	r3, [pc, #276]	; (1130 <udc_process_setup+0x430>)
    101a:	781b      	ldrb	r3, [r3, #0]
	return false;
    101c:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    101e:	2b00      	cmp	r3, #0
    1020:	d100      	bne.n	1024 <udc_process_setup+0x324>
    1022:	e68a      	b.n	d3a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1024:	4b41      	ldr	r3, [pc, #260]	; (112c <udc_process_setup+0x42c>)
    1026:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1028:	4b42      	ldr	r3, [pc, #264]	; (1134 <udc_process_setup+0x434>)
    102a:	681d      	ldr	r5, [r3, #0]
    102c:	682b      	ldr	r3, [r5, #0]
    102e:	791b      	ldrb	r3, [r3, #4]
    1030:	42a3      	cmp	r3, r4
    1032:	d800      	bhi.n	1036 <udc_process_setup+0x336>
    1034:	e681      	b.n	d3a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1036:	2100      	movs	r1, #0
    1038:	0020      	movs	r0, r4
    103a:	4b3f      	ldr	r3, [pc, #252]	; (1138 <udc_process_setup+0x438>)
    103c:	4798      	blx	r3
    103e:	2800      	cmp	r0, #0
    1040:	d100      	bne.n	1044 <udc_process_setup+0x344>
    1042:	e672      	b.n	d2a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1044:	686b      	ldr	r3, [r5, #4]
    1046:	00a2      	lsls	r2, r4, #2
    1048:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    104a:	68eb      	ldr	r3, [r5, #12]
    104c:	4798      	blx	r3
    104e:	0001      	movs	r1, r0
    1050:	0020      	movs	r0, r4
    1052:	4b39      	ldr	r3, [pc, #228]	; (1138 <udc_process_setup+0x438>)
    1054:	4798      	blx	r3
    1056:	2800      	cmp	r0, #0
    1058:	d100      	bne.n	105c <udc_process_setup+0x35c>
    105a:	e666      	b.n	d2a <udc_process_setup+0x2a>
	return udi_api->setup();
    105c:	68ab      	ldr	r3, [r5, #8]
    105e:	4798      	blx	r3
		if (udc_req_iface()) {
    1060:	2800      	cmp	r0, #0
    1062:	d000      	beq.n	1066 <udc_process_setup+0x366>
    1064:	e669      	b.n	d3a <udc_process_setup+0x3a>
    1066:	e660      	b.n	d2a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1068:	4b30      	ldr	r3, [pc, #192]	; (112c <udc_process_setup+0x42c>)
    106a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    106c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    106e:	0028      	movs	r0, r5
    1070:	4b32      	ldr	r3, [pc, #200]	; (113c <udc_process_setup+0x43c>)
    1072:	4798      	blx	r3
    1074:	2800      	cmp	r0, #0
    1076:	d100      	bne.n	107a <udc_process_setup+0x37a>
    1078:	e650      	b.n	d1c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    107a:	b2e1      	uxtb	r1, r4
    107c:	0028      	movs	r0, r5
    107e:	4b30      	ldr	r3, [pc, #192]	; (1140 <udc_process_setup+0x440>)
    1080:	4798      	blx	r3
    1082:	e023      	b.n	10cc <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1084:	4b29      	ldr	r3, [pc, #164]	; (112c <udc_process_setup+0x42c>)
    1086:	88db      	ldrh	r3, [r3, #6]
    1088:	2b00      	cmp	r3, #0
    108a:	d000      	beq.n	108e <udc_process_setup+0x38e>
    108c:	e64d      	b.n	d2a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    108e:	4b27      	ldr	r3, [pc, #156]	; (112c <udc_process_setup+0x42c>)
    1090:	885b      	ldrh	r3, [r3, #2]
    1092:	2b00      	cmp	r3, #0
    1094:	d000      	beq.n	1098 <udc_process_setup+0x398>
    1096:	e648      	b.n	d2a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1098:	4b24      	ldr	r3, [pc, #144]	; (112c <udc_process_setup+0x42c>)
    109a:	7918      	ldrb	r0, [r3, #4]
    109c:	4b29      	ldr	r3, [pc, #164]	; (1144 <udc_process_setup+0x444>)
    109e:	4798      	blx	r3
    10a0:	e014      	b.n	10cc <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    10a2:	4b22      	ldr	r3, [pc, #136]	; (112c <udc_process_setup+0x42c>)
    10a4:	88db      	ldrh	r3, [r3, #6]
    10a6:	2b00      	cmp	r3, #0
    10a8:	d000      	beq.n	10ac <udc_process_setup+0x3ac>
    10aa:	e63e      	b.n	d2a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    10ac:	4b1f      	ldr	r3, [pc, #124]	; (112c <udc_process_setup+0x42c>)
    10ae:	885b      	ldrh	r3, [r3, #2]
    10b0:	2b00      	cmp	r3, #0
    10b2:	d000      	beq.n	10b6 <udc_process_setup+0x3b6>
    10b4:	e639      	b.n	d2a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    10b6:	4c1d      	ldr	r4, [pc, #116]	; (112c <udc_process_setup+0x42c>)
    10b8:	7920      	ldrb	r0, [r4, #4]
    10ba:	4b23      	ldr	r3, [pc, #140]	; (1148 <udc_process_setup+0x448>)
    10bc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    10be:	7920      	ldrb	r0, [r4, #4]
    10c0:	4b22      	ldr	r3, [pc, #136]	; (114c <udc_process_setup+0x44c>)
    10c2:	4798      	blx	r3
    10c4:	e002      	b.n	10cc <udc_process_setup+0x3cc>
		return false;
    10c6:	2000      	movs	r0, #0
    10c8:	e000      	b.n	10cc <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    10ca:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    10cc:	2800      	cmp	r0, #0
    10ce:	d000      	beq.n	10d2 <udc_process_setup+0x3d2>
    10d0:	e633      	b.n	d3a <udc_process_setup+0x3a>
    10d2:	e623      	b.n	d1c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    10d4:	4b16      	ldr	r3, [pc, #88]	; (1130 <udc_process_setup+0x430>)
    10d6:	781b      	ldrb	r3, [r3, #0]
    10d8:	2b00      	cmp	r3, #0
    10da:	d100      	bne.n	10de <udc_process_setup+0x3de>
    10dc:	e62d      	b.n	d3a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10de:	4b15      	ldr	r3, [pc, #84]	; (1134 <udc_process_setup+0x434>)
    10e0:	681b      	ldr	r3, [r3, #0]
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	7912      	ldrb	r2, [r2, #4]
    10e6:	2a00      	cmp	r2, #0
    10e8:	d01a      	beq.n	1120 <udc_process_setup+0x420>
    10ea:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10ec:	4e12      	ldr	r6, [pc, #72]	; (1138 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10ee:	4f11      	ldr	r7, [pc, #68]	; (1134 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10f0:	685b      	ldr	r3, [r3, #4]
    10f2:	00aa      	lsls	r2, r5, #2
    10f4:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10f6:	68e3      	ldr	r3, [r4, #12]
    10f8:	4798      	blx	r3
    10fa:	0001      	movs	r1, r0
    10fc:	0028      	movs	r0, r5
    10fe:	47b0      	blx	r6
    1100:	2800      	cmp	r0, #0
    1102:	d100      	bne.n	1106 <udc_process_setup+0x406>
    1104:	e619      	b.n	d3a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1106:	68a3      	ldr	r3, [r4, #8]
    1108:	4798      	blx	r3
    110a:	2800      	cmp	r0, #0
    110c:	d000      	beq.n	1110 <udc_process_setup+0x410>
    110e:	e614      	b.n	d3a <udc_process_setup+0x3a>
			iface_num++) {
    1110:	3501      	adds	r5, #1
    1112:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1114:	683b      	ldr	r3, [r7, #0]
    1116:	681a      	ldr	r2, [r3, #0]
    1118:	7912      	ldrb	r2, [r2, #4]
    111a:	42aa      	cmp	r2, r5
    111c:	d8e8      	bhi.n	10f0 <udc_process_setup+0x3f0>
    111e:	e60c      	b.n	d3a <udc_process_setup+0x3a>
	return false;
    1120:	2000      	movs	r0, #0
    1122:	e60a      	b.n	d3a <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1124:	210c      	movs	r1, #12
		str = udc_string_product_name;
    1126:	4c0a      	ldr	r4, [pc, #40]	; (1150 <udc_process_setup+0x450>)
    1128:	e688      	b.n	e3c <udc_process_setup+0x13c>
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	2000077c 	.word	0x2000077c
    1130:	20000378 	.word	0x20000378
    1134:	2000037c 	.word	0x2000037c
    1138:	00000b2d 	.word	0x00000b2d
    113c:	00000ba1 	.word	0x00000ba1
    1140:	00000c0d 	.word	0x00000c0d
    1144:	00001b59 	.word	0x00001b59
    1148:	00001855 	.word	0x00001855
    114c:	00001a29 	.word	0x00001a29
    1150:	20000064 	.word	0x20000064

00001154 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1154:	4a04      	ldr	r2, [pc, #16]	; (1168 <_extint_enable+0x14>)
    1156:	7813      	ldrb	r3, [r2, #0]
    1158:	2102      	movs	r1, #2
    115a:	430b      	orrs	r3, r1
    115c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    115e:	7853      	ldrb	r3, [r2, #1]
    1160:	b25b      	sxtb	r3, r3
    1162:	2b00      	cmp	r3, #0
    1164:	dbfb      	blt.n	115e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1166:	4770      	bx	lr
    1168:	40001800 	.word	0x40001800

0000116c <_system_extint_init>:
{
    116c:	b500      	push	{lr}
    116e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1170:	4a12      	ldr	r2, [pc, #72]	; (11bc <_system_extint_init+0x50>)
    1172:	6993      	ldr	r3, [r2, #24]
    1174:	2140      	movs	r1, #64	; 0x40
    1176:	430b      	orrs	r3, r1
    1178:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    117a:	a901      	add	r1, sp, #4
    117c:	2300      	movs	r3, #0
    117e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1180:	2005      	movs	r0, #5
    1182:	4b0f      	ldr	r3, [pc, #60]	; (11c0 <_system_extint_init+0x54>)
    1184:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1186:	2005      	movs	r0, #5
    1188:	4b0e      	ldr	r3, [pc, #56]	; (11c4 <_system_extint_init+0x58>)
    118a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    118c:	4a0e      	ldr	r2, [pc, #56]	; (11c8 <_system_extint_init+0x5c>)
    118e:	7813      	ldrb	r3, [r2, #0]
    1190:	2101      	movs	r1, #1
    1192:	430b      	orrs	r3, r1
    1194:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1196:	7853      	ldrb	r3, [r2, #1]
    1198:	b25b      	sxtb	r3, r3
    119a:	2b00      	cmp	r3, #0
    119c:	dbfb      	blt.n	1196 <_system_extint_init+0x2a>
    119e:	4b0b      	ldr	r3, [pc, #44]	; (11cc <_system_extint_init+0x60>)
    11a0:	0019      	movs	r1, r3
    11a2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    11a4:	2200      	movs	r2, #0
    11a6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    11a8:	4299      	cmp	r1, r3
    11aa:	d1fc      	bne.n	11a6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11ac:	2210      	movs	r2, #16
    11ae:	4b08      	ldr	r3, [pc, #32]	; (11d0 <_system_extint_init+0x64>)
    11b0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    11b2:	4b08      	ldr	r3, [pc, #32]	; (11d4 <_system_extint_init+0x68>)
    11b4:	4798      	blx	r3
}
    11b6:	b003      	add	sp, #12
    11b8:	bd00      	pop	{pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	40000400 	.word	0x40000400
    11c0:	0000432d 	.word	0x0000432d
    11c4:	000042a1 	.word	0x000042a1
    11c8:	40001800 	.word	0x40001800
    11cc:	20000594 	.word	0x20000594
    11d0:	e000e100 	.word	0xe000e100
    11d4:	00001155 	.word	0x00001155

000011d8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    11d8:	b510      	push	{r4, lr}
    11da:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    11dc:	ab03      	add	r3, sp, #12
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
    11e2:	3203      	adds	r2, #3
    11e4:	705a      	strb	r2, [r3, #1]
    11e6:	3a01      	subs	r2, #1
    11e8:	709a      	strb	r2, [r3, #2]
    11ea:	3a01      	subs	r2, #1
    11ec:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    11ee:	4b27      	ldr	r3, [pc, #156]	; (128c <udd_sleep_mode+0xb4>)
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	4283      	cmp	r3, r0
    11f4:	d007      	beq.n	1206 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    11f6:	2800      	cmp	r0, #0
    11f8:	d107      	bne.n	120a <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    11fa:	4b24      	ldr	r3, [pc, #144]	; (128c <udd_sleep_mode+0xb4>)
    11fc:	781b      	ldrb	r3, [r3, #0]
    11fe:	2b00      	cmp	r3, #0
    1200:	d123      	bne.n	124a <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1202:	4b22      	ldr	r3, [pc, #136]	; (128c <udd_sleep_mode+0xb4>)
    1204:	7018      	strb	r0, [r3, #0]
}
    1206:	b004      	add	sp, #16
    1208:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    120a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    120c:	5c1b      	ldrb	r3, [r3, r0]
    120e:	4a20      	ldr	r2, [pc, #128]	; (1290 <udd_sleep_mode+0xb8>)
    1210:	5cd2      	ldrb	r2, [r2, r3]
    1212:	2aff      	cmp	r2, #255	; 0xff
    1214:	d100      	bne.n	1218 <udd_sleep_mode+0x40>
    1216:	e7fe      	b.n	1216 <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1218:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    121c:	4251      	negs	r1, r2
    121e:	414a      	adcs	r2, r1
    1220:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1222:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1224:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1228:	2100      	movs	r1, #0
    122a:	4a1a      	ldr	r2, [pc, #104]	; (1294 <udd_sleep_mode+0xbc>)
    122c:	7011      	strb	r1, [r2, #0]
	return flags;
    122e:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1230:	4917      	ldr	r1, [pc, #92]	; (1290 <udd_sleep_mode+0xb8>)
    1232:	5cca      	ldrb	r2, [r1, r3]
    1234:	3201      	adds	r2, #1
    1236:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1238:	2c00      	cmp	r4, #0
    123a:	d0de      	beq.n	11fa <udd_sleep_mode+0x22>
		cpu_irq_enable();
    123c:	2201      	movs	r2, #1
    123e:	4b15      	ldr	r3, [pc, #84]	; (1294 <udd_sleep_mode+0xbc>)
    1240:	701a      	strb	r2, [r3, #0]
    1242:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1246:	b662      	cpsie	i
    1248:	e7d7      	b.n	11fa <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    124a:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    124c:	5cd3      	ldrb	r3, [r2, r3]
    124e:	4a10      	ldr	r2, [pc, #64]	; (1290 <udd_sleep_mode+0xb8>)
    1250:	5cd2      	ldrb	r2, [r2, r3]
    1252:	2a00      	cmp	r2, #0
    1254:	d100      	bne.n	1258 <udd_sleep_mode+0x80>
    1256:	e7fe      	b.n	1256 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1258:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    125c:	4251      	negs	r1, r2
    125e:	414a      	adcs	r2, r1
    1260:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1262:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1264:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1268:	2100      	movs	r1, #0
    126a:	4a0a      	ldr	r2, [pc, #40]	; (1294 <udd_sleep_mode+0xbc>)
    126c:	7011      	strb	r1, [r2, #0]
	return flags;
    126e:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1270:	4907      	ldr	r1, [pc, #28]	; (1290 <udd_sleep_mode+0xb8>)
    1272:	5cca      	ldrb	r2, [r1, r3]
    1274:	3a01      	subs	r2, #1
    1276:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1278:	2c00      	cmp	r4, #0
    127a:	d0c2      	beq.n	1202 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    127c:	2201      	movs	r2, #1
    127e:	4b05      	ldr	r3, [pc, #20]	; (1294 <udd_sleep_mode+0xbc>)
    1280:	701a      	strb	r2, [r3, #0]
    1282:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1286:	b662      	cpsie	i
    1288:	e7bb      	b.n	1202 <udd_sleep_mode+0x2a>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	200004cc 	.word	0x200004cc
    1290:	200008dc 	.word	0x200008dc
    1294:	200000f0 	.word	0x200000f0

00001298 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    1298:	0643      	lsls	r3, r0, #25
    129a:	d00b      	beq.n	12b4 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    129c:	230f      	movs	r3, #15
    129e:	4003      	ands	r3, r0
    12a0:	005b      	lsls	r3, r3, #1
    12a2:	09c0      	lsrs	r0, r0, #7
    12a4:	1818      	adds	r0, r3, r0
    12a6:	3802      	subs	r0, #2
    12a8:	0083      	lsls	r3, r0, #2
    12aa:	1818      	adds	r0, r3, r0
    12ac:	0080      	lsls	r0, r0, #2
    12ae:	4b02      	ldr	r3, [pc, #8]	; (12b8 <udd_ep_get_job+0x20>)
    12b0:	1818      	adds	r0, r3, r0
	}
}
    12b2:	4770      	bx	lr
		return NULL;
    12b4:	2000      	movs	r0, #0
    12b6:	e7fc      	b.n	12b2 <udd_ep_get_job+0x1a>
    12b8:	2000038c 	.word	0x2000038c

000012bc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    12bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12be:	46d6      	mov	lr, sl
    12c0:	464f      	mov	r7, r9
    12c2:	4646      	mov	r6, r8
    12c4:	b5c0      	push	{r6, r7, lr}
    12c6:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    12c8:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    12ca:	b26b      	sxtb	r3, r5
    12cc:	2b00      	cmp	r3, #0
    12ce:	db26      	blt.n	131e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    12d0:	0028      	movs	r0, r5
    12d2:	4b5e      	ldr	r3, [pc, #376]	; (144c <udd_ep_transfer_process+0x190>)
    12d4:	4798      	blx	r3
    12d6:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    12d8:	270f      	movs	r7, #15
    12da:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    12dc:	8a03      	ldrh	r3, [r0, #16]
    12de:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    12e0:	464b      	mov	r3, r9
    12e2:	881b      	ldrh	r3, [r3, #0]
    12e4:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    12e6:	7c83      	ldrb	r3, [r0, #18]
    12e8:	075b      	lsls	r3, r3, #29
    12ea:	d46a      	bmi.n	13c2 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    12ec:	68e3      	ldr	r3, [r4, #12]
    12ee:	4453      	add	r3, sl
    12f0:	001e      	movs	r6, r3
    12f2:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    12f4:	68a3      	ldr	r3, [r4, #8]
    12f6:	429e      	cmp	r6, r3
    12f8:	d800      	bhi.n	12fc <udd_ep_transfer_process+0x40>
    12fa:	e074      	b.n	13e6 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    12fc:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    12fe:	7ca3      	ldrb	r3, [r4, #18]
    1300:	2201      	movs	r2, #1
    1302:	4393      	bics	r3, r2
    1304:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1306:	6823      	ldr	r3, [r4, #0]
    1308:	2b00      	cmp	r3, #0
    130a:	d003      	beq.n	1314 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    130c:	68e1      	ldr	r1, [r4, #12]
    130e:	002a      	movs	r2, r5
    1310:	2000      	movs	r0, #0
    1312:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1314:	bc1c      	pop	{r2, r3, r4}
    1316:	4690      	mov	r8, r2
    1318:	4699      	mov	r9, r3
    131a:	46a2      	mov	sl, r4
    131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    131e:	0028      	movs	r0, r5
    1320:	4b4a      	ldr	r3, [pc, #296]	; (144c <udd_ep_transfer_process+0x190>)
    1322:	4798      	blx	r3
    1324:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1326:	270f      	movs	r7, #15
    1328:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    132a:	8a03      	ldrh	r3, [r0, #16]
    132c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    132e:	464b      	mov	r3, r9
    1330:	885e      	ldrh	r6, [r3, #2]
    1332:	68c3      	ldr	r3, [r0, #12]
    1334:	469c      	mov	ip, r3
    1336:	4466      	add	r6, ip
    1338:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    133a:	6881      	ldr	r1, [r0, #8]
    133c:	428e      	cmp	r6, r1
    133e:	d025      	beq.n	138c <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1340:	1b8d      	subs	r5, r1, r6
    1342:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1344:	4b42      	ldr	r3, [pc, #264]	; (1450 <udd_ep_transfer_process+0x194>)
    1346:	429d      	cmp	r5, r3
    1348:	d906      	bls.n	1358 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    134a:	001d      	movs	r5, r3
    134c:	4641      	mov	r1, r8
    134e:	0018      	movs	r0, r3
    1350:	4b40      	ldr	r3, [pc, #256]	; (1454 <udd_ep_transfer_process+0x198>)
    1352:	4798      	blx	r3
    1354:	1a6d      	subs	r5, r5, r1
    1356:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1358:	7ca2      	ldrb	r2, [r4, #18]
    135a:	2300      	movs	r3, #0
    135c:	0792      	lsls	r2, r2, #30
    135e:	d507      	bpl.n	1370 <udd_ep_transfer_process+0xb4>
    1360:	4641      	mov	r1, r8
    1362:	0028      	movs	r0, r5
    1364:	4b3c      	ldr	r3, [pc, #240]	; (1458 <udd_ep_transfer_process+0x19c>)
    1366:	4798      	blx	r3
    1368:	b289      	uxth	r1, r1
    136a:	424b      	negs	r3, r1
    136c:	414b      	adcs	r3, r1
    136e:	b2db      	uxtb	r3, r3
    1370:	005b      	lsls	r3, r3, #1
    1372:	7ca2      	ldrb	r2, [r4, #18]
    1374:	2102      	movs	r1, #2
    1376:	438a      	bics	r2, r1
    1378:	4313      	orrs	r3, r2
    137a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    137c:	6862      	ldr	r2, [r4, #4]
    137e:	1992      	adds	r2, r2, r6
    1380:	002b      	movs	r3, r5
    1382:	0039      	movs	r1, r7
    1384:	4835      	ldr	r0, [pc, #212]	; (145c <udd_ep_transfer_process+0x1a0>)
    1386:	4c36      	ldr	r4, [pc, #216]	; (1460 <udd_ep_transfer_process+0x1a4>)
    1388:	47a0      	blx	r4
    138a:	e7c3      	b.n	1314 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    138c:	7c83      	ldrb	r3, [r0, #18]
    138e:	079b      	lsls	r3, r3, #30
    1390:	d40b      	bmi.n	13aa <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    1392:	7c83      	ldrb	r3, [r0, #18]
    1394:	2201      	movs	r2, #1
    1396:	4393      	bics	r3, r2
    1398:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    139a:	6803      	ldr	r3, [r0, #0]
    139c:	2b00      	cmp	r3, #0
    139e:	d0b9      	beq.n	1314 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    13a0:	002a      	movs	r2, r5
    13a2:	0031      	movs	r1, r6
    13a4:	2000      	movs	r0, #0
    13a6:	4798      	blx	r3
    13a8:	e7b4      	b.n	1314 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    13aa:	7c83      	ldrb	r3, [r0, #18]
    13ac:	2202      	movs	r2, #2
    13ae:	4393      	bics	r3, r2
    13b0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    13b2:	6842      	ldr	r2, [r0, #4]
    13b4:	1992      	adds	r2, r2, r6
    13b6:	2300      	movs	r3, #0
    13b8:	0039      	movs	r1, r7
    13ba:	4828      	ldr	r0, [pc, #160]	; (145c <udd_ep_transfer_process+0x1a0>)
    13bc:	4c28      	ldr	r4, [pc, #160]	; (1460 <udd_ep_transfer_process+0x1a4>)
    13be:	47a0      	blx	r4
    13c0:	e7a8      	b.n	1314 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    13c2:	6843      	ldr	r3, [r0, #4]
    13c4:	68c2      	ldr	r2, [r0, #12]
    13c6:	4694      	mov	ip, r2
    13c8:	4463      	add	r3, ip
    13ca:	001e      	movs	r6, r3
    13cc:	4641      	mov	r1, r8
    13ce:	6880      	ldr	r0, [r0, #8]
    13d0:	4b21      	ldr	r3, [pc, #132]	; (1458 <udd_ep_transfer_process+0x19c>)
    13d2:	4798      	blx	r3
    13d4:	000a      	movs	r2, r1
    13d6:	1e7b      	subs	r3, r7, #1
    13d8:	00db      	lsls	r3, r3, #3
    13da:	4922      	ldr	r1, [pc, #136]	; (1464 <udd_ep_transfer_process+0x1a8>)
    13dc:	1859      	adds	r1, r3, r1
    13de:	0030      	movs	r0, r6
    13e0:	4b21      	ldr	r3, [pc, #132]	; (1468 <udd_ep_transfer_process+0x1ac>)
    13e2:	4798      	blx	r3
    13e4:	e782      	b.n	12ec <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    13e6:	464a      	mov	r2, r9
    13e8:	8892      	ldrh	r2, [r2, #4]
    13ea:	4552      	cmp	r2, sl
    13ec:	d000      	beq.n	13f0 <udd_ep_transfer_process+0x134>
    13ee:	e786      	b.n	12fe <udd_ep_transfer_process+0x42>
    13f0:	429e      	cmp	r6, r3
    13f2:	d100      	bne.n	13f6 <udd_ep_transfer_process+0x13a>
    13f4:	e783      	b.n	12fe <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    13f6:	1b9b      	subs	r3, r3, r6
    13f8:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    13fa:	4b15      	ldr	r3, [pc, #84]	; (1450 <udd_ep_transfer_process+0x194>)
    13fc:	429d      	cmp	r5, r3
    13fe:	d916      	bls.n	142e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1400:	001d      	movs	r5, r3
    1402:	4641      	mov	r1, r8
    1404:	0018      	movs	r0, r3
    1406:	4b13      	ldr	r3, [pc, #76]	; (1454 <udd_ep_transfer_process+0x198>)
    1408:	4798      	blx	r3
    140a:	1a6b      	subs	r3, r5, r1
    140c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    140e:	4598      	cmp	r8, r3
    1410:	d914      	bls.n	143c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1412:	7ca3      	ldrb	r3, [r4, #18]
    1414:	2204      	movs	r2, #4
    1416:	4313      	orrs	r3, r2
    1418:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    141a:	1e7a      	subs	r2, r7, #1
    141c:	00d2      	lsls	r2, r2, #3
    141e:	4b11      	ldr	r3, [pc, #68]	; (1464 <udd_ep_transfer_process+0x1a8>)
    1420:	18d2      	adds	r2, r2, r3
    1422:	4643      	mov	r3, r8
    1424:	0039      	movs	r1, r7
    1426:	480d      	ldr	r0, [pc, #52]	; (145c <udd_ep_transfer_process+0x1a0>)
    1428:	4c10      	ldr	r4, [pc, #64]	; (146c <udd_ep_transfer_process+0x1b0>)
    142a:	47a0      	blx	r4
    142c:	e772      	b.n	1314 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    142e:	4641      	mov	r1, r8
    1430:	0028      	movs	r0, r5
    1432:	4b09      	ldr	r3, [pc, #36]	; (1458 <udd_ep_transfer_process+0x19c>)
    1434:	4798      	blx	r3
    1436:	1a6b      	subs	r3, r5, r1
    1438:	b29b      	uxth	r3, r3
    143a:	e7e8      	b.n	140e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    143c:	6862      	ldr	r2, [r4, #4]
    143e:	1992      	adds	r2, r2, r6
    1440:	0039      	movs	r1, r7
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <udd_ep_transfer_process+0x1a0>)
    1444:	4c09      	ldr	r4, [pc, #36]	; (146c <udd_ep_transfer_process+0x1b0>)
    1446:	47a0      	blx	r4
    1448:	e764      	b.n	1314 <udd_ep_transfer_process+0x58>
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	00001299 	.word	0x00001299
    1450:	00001fff 	.word	0x00001fff
    1454:	0000495d 	.word	0x0000495d
    1458:	00004789 	.word	0x00004789
    145c:	20000614 	.word	0x20000614
    1460:	00002555 	.word	0x00002555
    1464:	200005d4 	.word	0x200005d4
    1468:	00004a45 	.word	0x00004a45
    146c:	000025a9 	.word	0x000025a9

00001470 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1470:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1472:	2205      	movs	r2, #5
    1474:	4b05      	ldr	r3, [pc, #20]	; (148c <udd_ctrl_stall_data+0x1c>)
    1476:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1478:	4c05      	ldr	r4, [pc, #20]	; (1490 <udd_ctrl_stall_data+0x20>)
    147a:	2180      	movs	r1, #128	; 0x80
    147c:	0020      	movs	r0, r4
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <udd_ctrl_stall_data+0x24>)
    1480:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1482:	2100      	movs	r1, #0
    1484:	0020      	movs	r0, r4
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <udd_ctrl_stall_data+0x28>)
    1488:	4798      	blx	r3
}
    148a:	bd10      	pop	{r4, pc}
    148c:	2000038a 	.word	0x2000038a
    1490:	20000614 	.word	0x20000614
    1494:	000024a9 	.word	0x000024a9
    1498:	000024cf 	.word	0x000024cf

0000149c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    149c:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    149e:	4c08      	ldr	r4, [pc, #32]	; (14c0 <_usb_device_lpm_suspend+0x24>)
    14a0:	2106      	movs	r1, #6
    14a2:	0020      	movs	r0, r4
    14a4:	4d07      	ldr	r5, [pc, #28]	; (14c4 <_usb_device_lpm_suspend+0x28>)
    14a6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    14a8:	2104      	movs	r1, #4
    14aa:	0020      	movs	r0, r4
    14ac:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    14ae:	2102      	movs	r1, #2
    14b0:	0020      	movs	r0, r4
    14b2:	4b05      	ldr	r3, [pc, #20]	; (14c8 <_usb_device_lpm_suspend+0x2c>)
    14b4:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    14b6:	2002      	movs	r0, #2
    14b8:	4b04      	ldr	r3, [pc, #16]	; (14cc <_usb_device_lpm_suspend+0x30>)
    14ba:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    14bc:	bd70      	pop	{r4, r5, r6, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	20000614 	.word	0x20000614
    14c4:	00001fe9 	.word	0x00001fe9
    14c8:	00001fc9 	.word	0x00001fc9
    14cc:	000011d9 	.word	0x000011d9

000014d0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    14d0:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    14d2:	4b13      	ldr	r3, [pc, #76]	; (1520 <_usb_on_wakeup+0x50>)
    14d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    14d6:	069b      	lsls	r3, r3, #26
    14d8:	d41c      	bmi.n	1514 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    14da:	4911      	ldr	r1, [pc, #68]	; (1520 <_usb_on_wakeup+0x50>)
    14dc:	22d0      	movs	r2, #208	; 0xd0
    14de:	68cb      	ldr	r3, [r1, #12]
    14e0:	4013      	ands	r3, r2
    14e2:	2bd0      	cmp	r3, #208	; 0xd0
    14e4:	d1fb      	bne.n	14de <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    14e6:	4c0f      	ldr	r4, [pc, #60]	; (1524 <_usb_on_wakeup+0x54>)
    14e8:	2102      	movs	r1, #2
    14ea:	0020      	movs	r0, r4
    14ec:	4b0e      	ldr	r3, [pc, #56]	; (1528 <_usb_on_wakeup+0x58>)
    14ee:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    14f0:	2104      	movs	r1, #4
    14f2:	0020      	movs	r0, r4
    14f4:	4d0d      	ldr	r5, [pc, #52]	; (152c <_usb_on_wakeup+0x5c>)
    14f6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    14f8:	4a0d      	ldr	r2, [pc, #52]	; (1530 <_usb_on_wakeup+0x60>)
    14fa:	2106      	movs	r1, #6
    14fc:	0020      	movs	r0, r4
    14fe:	4b0d      	ldr	r3, [pc, #52]	; (1534 <_usb_on_wakeup+0x64>)
    1500:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1502:	2106      	movs	r1, #6
    1504:	0020      	movs	r0, r4
    1506:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1508:	2003      	movs	r0, #3
    150a:	4b0b      	ldr	r3, [pc, #44]	; (1538 <_usb_on_wakeup+0x68>)
    150c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    150e:	4b0b      	ldr	r3, [pc, #44]	; (153c <_usb_on_wakeup+0x6c>)
    1510:	4798      	blx	r3
#endif
}
    1512:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1514:	4902      	ldr	r1, [pc, #8]	; (1520 <_usb_on_wakeup+0x50>)
    1516:	2210      	movs	r2, #16
    1518:	68cb      	ldr	r3, [r1, #12]
    151a:	421a      	tst	r2, r3
    151c:	d0fc      	beq.n	1518 <_usb_on_wakeup+0x48>
    151e:	e7e2      	b.n	14e6 <_usb_on_wakeup+0x16>
    1520:	40000800 	.word	0x40000800
    1524:	20000614 	.word	0x20000614
    1528:	00001fe9 	.word	0x00001fe9
    152c:	00001fc9 	.word	0x00001fc9
    1530:	0000149d 	.word	0x0000149d
    1534:	00001fa5 	.word	0x00001fa5
    1538:	000011d9 	.word	0x000011d9
    153c:	00001ed1 	.word	0x00001ed1

00001540 <_usb_on_bus_reset>:
{
    1540:	b530      	push	{r4, r5, lr}
    1542:	b083      	sub	sp, #12
    1544:	0004      	movs	r4, r0
	udc_reset();
    1546:	4b1e      	ldr	r3, [pc, #120]	; (15c0 <_usb_on_bus_reset+0x80>)
    1548:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	6822      	ldr	r2, [r4, #0]
    154e:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1550:	ad01      	add	r5, sp, #4
    1552:	0028      	movs	r0, r5
    1554:	4b1b      	ldr	r3, [pc, #108]	; (15c4 <_usb_on_bus_reset+0x84>)
    1556:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1558:	2303      	movs	r3, #3
    155a:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    155c:	0029      	movs	r1, r5
    155e:	0020      	movs	r0, r4
    1560:	4b19      	ldr	r3, [pc, #100]	; (15c8 <_usb_on_bus_reset+0x88>)
    1562:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1564:	4919      	ldr	r1, [pc, #100]	; (15cc <_usb_on_bus_reset+0x8c>)
    1566:	0020      	movs	r0, r4
    1568:	4b19      	ldr	r3, [pc, #100]	; (15d0 <_usb_on_bus_reset+0x90>)
    156a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    156c:	4b19      	ldr	r3, [pc, #100]	; (15d4 <_usb_on_bus_reset+0x94>)
    156e:	2202      	movs	r2, #2
    1570:	2100      	movs	r1, #0
    1572:	0020      	movs	r0, r4
    1574:	4d18      	ldr	r5, [pc, #96]	; (15d8 <_usb_on_bus_reset+0x98>)
    1576:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1578:	4b18      	ldr	r3, [pc, #96]	; (15dc <_usb_on_bus_reset+0x9c>)
    157a:	2200      	movs	r2, #0
    157c:	2100      	movs	r1, #0
    157e:	0020      	movs	r0, r4
    1580:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1582:	4b17      	ldr	r3, [pc, #92]	; (15e0 <_usb_on_bus_reset+0xa0>)
    1584:	2201      	movs	r2, #1
    1586:	2100      	movs	r1, #0
    1588:	0020      	movs	r0, r4
    158a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    158c:	2202      	movs	r2, #2
    158e:	2100      	movs	r1, #0
    1590:	0020      	movs	r0, r4
    1592:	4d14      	ldr	r5, [pc, #80]	; (15e4 <_usb_on_bus_reset+0xa4>)
    1594:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1596:	2200      	movs	r2, #0
    1598:	2100      	movs	r1, #0
    159a:	0020      	movs	r0, r4
    159c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    159e:	2201      	movs	r2, #1
    15a0:	2100      	movs	r1, #0
    15a2:	0020      	movs	r0, r4
    15a4:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    15a6:	6821      	ldr	r1, [r4, #0]
    15a8:	890b      	ldrh	r3, [r1, #8]
    15aa:	4a0f      	ldr	r2, [pc, #60]	; (15e8 <_usb_on_bus_reset+0xa8>)
    15ac:	401a      	ands	r2, r3
    15ae:	2380      	movs	r3, #128	; 0x80
    15b0:	00db      	lsls	r3, r3, #3
    15b2:	4313      	orrs	r3, r2
    15b4:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    15b6:	2200      	movs	r2, #0
    15b8:	4b0c      	ldr	r3, [pc, #48]	; (15ec <_usb_on_bus_reset+0xac>)
    15ba:	701a      	strb	r2, [r3, #0]
}
    15bc:	b003      	add	sp, #12
    15be:	bd30      	pop	{r4, r5, pc}
    15c0:	00000c71 	.word	0x00000c71
    15c4:	000021f5 	.word	0x000021f5
    15c8:	00002205 	.word	0x00002205
    15cc:	20000794 	.word	0x20000794
    15d0:	000025f9 	.word	0x000025f9
    15d4:	00001729 	.word	0x00001729
    15d8:	00002005 	.word	0x00002005
    15dc:	00001a59 	.word	0x00001a59
    15e0:	0000162d 	.word	0x0000162d
    15e4:	00002055 	.word	0x00002055
    15e8:	fffff3ff 	.word	0xfffff3ff
    15ec:	2000038a 	.word	0x2000038a

000015f0 <udd_ctrl_send_zlp_in>:
{
    15f0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    15f2:	2203      	movs	r2, #3
    15f4:	4b07      	ldr	r3, [pc, #28]	; (1614 <udd_ctrl_send_zlp_in+0x24>)
    15f6:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    15f8:	4c07      	ldr	r4, [pc, #28]	; (1618 <udd_ctrl_send_zlp_in+0x28>)
    15fa:	4908      	ldr	r1, [pc, #32]	; (161c <udd_ctrl_send_zlp_in+0x2c>)
    15fc:	0020      	movs	r0, r4
    15fe:	4b08      	ldr	r3, [pc, #32]	; (1620 <udd_ctrl_send_zlp_in+0x30>)
    1600:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1602:	4b08      	ldr	r3, [pc, #32]	; (1624 <udd_ctrl_send_zlp_in+0x34>)
    1604:	689a      	ldr	r2, [r3, #8]
    1606:	2300      	movs	r3, #0
    1608:	2100      	movs	r1, #0
    160a:	0020      	movs	r0, r4
    160c:	4c06      	ldr	r4, [pc, #24]	; (1628 <udd_ctrl_send_zlp_in+0x38>)
    160e:	47a0      	blx	r4
}
    1610:	bd10      	pop	{r4, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	2000038a 	.word	0x2000038a
    1618:	20000614 	.word	0x20000614
    161c:	20000794 	.word	0x20000794
    1620:	000025f9 	.word	0x000025f9
    1624:	2000077c 	.word	0x2000077c
    1628:	00002555 	.word	0x00002555

0000162c <_usb_ep0_on_tansfer_fail>:
{
    162c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    162e:	7989      	ldrb	r1, [r1, #6]
    1630:	b24b      	sxtb	r3, r1
    1632:	2b00      	cmp	r3, #0
    1634:	db06      	blt.n	1644 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1636:	4b0e      	ldr	r3, [pc, #56]	; (1670 <_usb_ep0_on_tansfer_fail+0x44>)
    1638:	781b      	ldrb	r3, [r3, #0]
    163a:	2b02      	cmp	r3, #2
    163c:	d00f      	beq.n	165e <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    163e:	2b03      	cmp	r3, #3
    1640:	d011      	beq.n	1666 <_usb_ep0_on_tansfer_fail+0x3a>
}
    1642:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1644:	4b0a      	ldr	r3, [pc, #40]	; (1670 <_usb_ep0_on_tansfer_fail+0x44>)
    1646:	781b      	ldrb	r3, [r3, #0]
    1648:	2b01      	cmp	r3, #1
    164a:	d005      	beq.n	1658 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    164c:	2b04      	cmp	r3, #4
    164e:	d1f8      	bne.n	1642 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1650:	4808      	ldr	r0, [pc, #32]	; (1674 <_usb_ep0_on_tansfer_fail+0x48>)
    1652:	4b09      	ldr	r3, [pc, #36]	; (1678 <_usb_ep0_on_tansfer_fail+0x4c>)
    1654:	4798      	blx	r3
    1656:	e7f4      	b.n	1642 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1658:	4b08      	ldr	r3, [pc, #32]	; (167c <_usb_ep0_on_tansfer_fail+0x50>)
    165a:	4798      	blx	r3
    165c:	e7f1      	b.n	1642 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    165e:	2204      	movs	r2, #4
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <_usb_ep0_on_tansfer_fail+0x44>)
    1662:	701a      	strb	r2, [r3, #0]
    1664:	e7ed      	b.n	1642 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1666:	4803      	ldr	r0, [pc, #12]	; (1674 <_usb_ep0_on_tansfer_fail+0x48>)
    1668:	4b03      	ldr	r3, [pc, #12]	; (1678 <_usb_ep0_on_tansfer_fail+0x4c>)
    166a:	4798      	blx	r3
}
    166c:	e7e9      	b.n	1642 <_usb_ep0_on_tansfer_fail+0x16>
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	2000038a 	.word	0x2000038a
    1674:	20000614 	.word	0x20000614
    1678:	000024a9 	.word	0x000024a9
    167c:	000015f1 	.word	0x000015f1

00001680 <udd_ctrl_in_sent>:
{
    1680:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1682:	4b20      	ldr	r3, [pc, #128]	; (1704 <udd_ctrl_in_sent+0x84>)
    1684:	881b      	ldrh	r3, [r3, #0]
    1686:	4a20      	ldr	r2, [pc, #128]	; (1708 <udd_ctrl_in_sent+0x88>)
    1688:	8994      	ldrh	r4, [r2, #12]
    168a:	1ae4      	subs	r4, r4, r3
    168c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    168e:	2c00      	cmp	r4, #0
    1690:	d118      	bne.n	16c4 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1692:	4a1e      	ldr	r2, [pc, #120]	; (170c <udd_ctrl_in_sent+0x8c>)
    1694:	8811      	ldrh	r1, [r2, #0]
    1696:	185b      	adds	r3, r3, r1
    1698:	b29b      	uxth	r3, r3
    169a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    169c:	4a1a      	ldr	r2, [pc, #104]	; (1708 <udd_ctrl_in_sent+0x88>)
    169e:	88d2      	ldrh	r2, [r2, #6]
    16a0:	429a      	cmp	r2, r3
    16a2:	d023      	beq.n	16ec <udd_ctrl_in_sent+0x6c>
    16a4:	4b1a      	ldr	r3, [pc, #104]	; (1710 <udd_ctrl_in_sent+0x90>)
    16a6:	781b      	ldrb	r3, [r3, #0]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d11f      	bne.n	16ec <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    16ac:	4b16      	ldr	r3, [pc, #88]	; (1708 <udd_ctrl_in_sent+0x88>)
    16ae:	695b      	ldr	r3, [r3, #20]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d023      	beq.n	16fc <udd_ctrl_in_sent+0x7c>
    16b4:	4798      	blx	r3
    16b6:	2800      	cmp	r0, #0
    16b8:	d020      	beq.n	16fc <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    16ba:	2200      	movs	r2, #0
    16bc:	4b11      	ldr	r3, [pc, #68]	; (1704 <udd_ctrl_in_sent+0x84>)
    16be:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    16c0:	4b11      	ldr	r3, [pc, #68]	; (1708 <udd_ctrl_in_sent+0x88>)
    16c2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    16c4:	2c3f      	cmp	r4, #63	; 0x3f
    16c6:	d919      	bls.n	16fc <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    16c8:	2200      	movs	r2, #0
    16ca:	4b11      	ldr	r3, [pc, #68]	; (1710 <udd_ctrl_in_sent+0x90>)
    16cc:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    16ce:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    16d0:	4d0c      	ldr	r5, [pc, #48]	; (1704 <udd_ctrl_in_sent+0x84>)
    16d2:	882b      	ldrh	r3, [r5, #0]
    16d4:	4a0c      	ldr	r2, [pc, #48]	; (1708 <udd_ctrl_in_sent+0x88>)
    16d6:	6892      	ldr	r2, [r2, #8]
    16d8:	18d2      	adds	r2, r2, r3
    16da:	0023      	movs	r3, r4
    16dc:	2100      	movs	r1, #0
    16de:	480d      	ldr	r0, [pc, #52]	; (1714 <udd_ctrl_in_sent+0x94>)
    16e0:	4e0d      	ldr	r6, [pc, #52]	; (1718 <udd_ctrl_in_sent+0x98>)
    16e2:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    16e4:	882b      	ldrh	r3, [r5, #0]
    16e6:	18e4      	adds	r4, r4, r3
    16e8:	802c      	strh	r4, [r5, #0]
}
    16ea:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    16ec:	2204      	movs	r2, #4
    16ee:	4b0b      	ldr	r3, [pc, #44]	; (171c <udd_ctrl_in_sent+0x9c>)
    16f0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    16f2:	490b      	ldr	r1, [pc, #44]	; (1720 <udd_ctrl_in_sent+0xa0>)
    16f4:	4807      	ldr	r0, [pc, #28]	; (1714 <udd_ctrl_in_sent+0x94>)
    16f6:	4b0b      	ldr	r3, [pc, #44]	; (1724 <udd_ctrl_in_sent+0xa4>)
    16f8:	4798      	blx	r3
			return;
    16fa:	e7f6      	b.n	16ea <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    16fc:	2201      	movs	r2, #1
    16fe:	4b04      	ldr	r3, [pc, #16]	; (1710 <udd_ctrl_in_sent+0x90>)
    1700:	701a      	strb	r2, [r3, #0]
    1702:	e7e5      	b.n	16d0 <udd_ctrl_in_sent+0x50>
    1704:	20000386 	.word	0x20000386
    1708:	2000077c 	.word	0x2000077c
    170c:	20000388 	.word	0x20000388
    1710:	20000384 	.word	0x20000384
    1714:	20000614 	.word	0x20000614
    1718:	00002555 	.word	0x00002555
    171c:	2000038a 	.word	0x2000038a
    1720:	20000794 	.word	0x20000794
    1724:	000025f9 	.word	0x000025f9

00001728 <_usb_ep0_on_setup>:
{
    1728:	b510      	push	{r4, lr}
    172a:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    172c:	4b2c      	ldr	r3, [pc, #176]	; (17e0 <_usb_ep0_on_setup+0xb8>)
    172e:	781b      	ldrb	r3, [r3, #0]
    1730:	2b00      	cmp	r3, #0
    1732:	d007      	beq.n	1744 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    1734:	4b2b      	ldr	r3, [pc, #172]	; (17e4 <_usb_ep0_on_setup+0xbc>)
    1736:	691b      	ldr	r3, [r3, #16]
    1738:	2b00      	cmp	r3, #0
    173a:	d000      	beq.n	173e <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    173c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    173e:	2200      	movs	r2, #0
    1740:	4b27      	ldr	r3, [pc, #156]	; (17e0 <_usb_ep0_on_setup+0xb8>)
    1742:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1744:	8823      	ldrh	r3, [r4, #0]
    1746:	2b08      	cmp	r3, #8
    1748:	d002      	beq.n	1750 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    174a:	4b27      	ldr	r3, [pc, #156]	; (17e8 <_usb_ep0_on_setup+0xc0>)
    174c:	4798      	blx	r3
}
    174e:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    1750:	4a24      	ldr	r2, [pc, #144]	; (17e4 <_usb_ep0_on_setup+0xbc>)
    1752:	4b26      	ldr	r3, [pc, #152]	; (17ec <_usb_ep0_on_setup+0xc4>)
    1754:	7819      	ldrb	r1, [r3, #0]
    1756:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1758:	7859      	ldrb	r1, [r3, #1]
    175a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    175c:	78d8      	ldrb	r0, [r3, #3]
    175e:	0200      	lsls	r0, r0, #8
    1760:	7899      	ldrb	r1, [r3, #2]
    1762:	1809      	adds	r1, r1, r0
    1764:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1766:	7958      	ldrb	r0, [r3, #5]
    1768:	0200      	lsls	r0, r0, #8
    176a:	7919      	ldrb	r1, [r3, #4]
    176c:	1809      	adds	r1, r1, r0
    176e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1770:	79d9      	ldrb	r1, [r3, #7]
    1772:	0209      	lsls	r1, r1, #8
    1774:	799b      	ldrb	r3, [r3, #6]
    1776:	185b      	adds	r3, r3, r1
    1778:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    177a:	4b1d      	ldr	r3, [pc, #116]	; (17f0 <_usb_ep0_on_setup+0xc8>)
    177c:	4798      	blx	r3
    177e:	2800      	cmp	r0, #0
    1780:	d016      	beq.n	17b0 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    1782:	4b18      	ldr	r3, [pc, #96]	; (17e4 <_usb_ep0_on_setup+0xbc>)
    1784:	781b      	ldrb	r3, [r3, #0]
    1786:	2b7f      	cmp	r3, #127	; 0x7f
    1788:	d815      	bhi.n	17b6 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    178a:	4b16      	ldr	r3, [pc, #88]	; (17e4 <_usb_ep0_on_setup+0xbc>)
    178c:	88db      	ldrh	r3, [r3, #6]
    178e:	2b00      	cmp	r3, #0
    1790:	d022      	beq.n	17d8 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    1792:	2300      	movs	r3, #0
    1794:	4a17      	ldr	r2, [pc, #92]	; (17f4 <_usb_ep0_on_setup+0xcc>)
    1796:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1798:	4a17      	ldr	r2, [pc, #92]	; (17f8 <_usb_ep0_on_setup+0xd0>)
    179a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    179c:	2201      	movs	r2, #1
    179e:	4b10      	ldr	r3, [pc, #64]	; (17e0 <_usb_ep0_on_setup+0xb8>)
    17a0:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    17a2:	2340      	movs	r3, #64	; 0x40
    17a4:	4a11      	ldr	r2, [pc, #68]	; (17ec <_usb_ep0_on_setup+0xc4>)
    17a6:	2100      	movs	r1, #0
    17a8:	4814      	ldr	r0, [pc, #80]	; (17fc <_usb_ep0_on_setup+0xd4>)
    17aa:	4c15      	ldr	r4, [pc, #84]	; (1800 <_usb_ep0_on_setup+0xd8>)
    17ac:	47a0      	blx	r4
    17ae:	e7ce      	b.n	174e <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    17b0:	4b0d      	ldr	r3, [pc, #52]	; (17e8 <_usb_ep0_on_setup+0xc0>)
    17b2:	4798      	blx	r3
			return;
    17b4:	e7cb      	b.n	174e <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    17b6:	2300      	movs	r3, #0
    17b8:	4a0e      	ldr	r2, [pc, #56]	; (17f4 <_usb_ep0_on_setup+0xcc>)
    17ba:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    17bc:	4a0e      	ldr	r2, [pc, #56]	; (17f8 <_usb_ep0_on_setup+0xd0>)
    17be:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    17c0:	2202      	movs	r2, #2
    17c2:	4b07      	ldr	r3, [pc, #28]	; (17e0 <_usb_ep0_on_setup+0xb8>)
    17c4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    17c6:	2340      	movs	r3, #64	; 0x40
    17c8:	4a08      	ldr	r2, [pc, #32]	; (17ec <_usb_ep0_on_setup+0xc4>)
    17ca:	2100      	movs	r1, #0
    17cc:	480b      	ldr	r0, [pc, #44]	; (17fc <_usb_ep0_on_setup+0xd4>)
    17ce:	4c0c      	ldr	r4, [pc, #48]	; (1800 <_usb_ep0_on_setup+0xd8>)
    17d0:	47a0      	blx	r4
			udd_ctrl_in_sent();
    17d2:	4b0c      	ldr	r3, [pc, #48]	; (1804 <_usb_ep0_on_setup+0xdc>)
    17d4:	4798      	blx	r3
    17d6:	e7ba      	b.n	174e <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    17d8:	4b0b      	ldr	r3, [pc, #44]	; (1808 <_usb_ep0_on_setup+0xe0>)
    17da:	4798      	blx	r3
				return;
    17dc:	e7b7      	b.n	174e <_usb_ep0_on_setup+0x26>
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	2000038a 	.word	0x2000038a
    17e4:	2000077c 	.word	0x2000077c
    17e8:	00001471 	.word	0x00001471
    17ec:	20000794 	.word	0x20000794
    17f0:	00000d01 	.word	0x00000d01
    17f4:	20000388 	.word	0x20000388
    17f8:	20000386 	.word	0x20000386
    17fc:	20000614 	.word	0x20000614
    1800:	000025a9 	.word	0x000025a9
    1804:	00001681 	.word	0x00001681
    1808:	000015f1 	.word	0x000015f1

0000180c <_usb_on_sof_notify>:
{
    180c:	b510      	push	{r4, lr}
	udc_sof_notify();
    180e:	4b02      	ldr	r3, [pc, #8]	; (1818 <_usb_on_sof_notify+0xc>)
    1810:	4798      	blx	r3
	UDC_SOF_EVENT();
    1812:	4b02      	ldr	r3, [pc, #8]	; (181c <_usb_on_sof_notify+0x10>)
    1814:	4798      	blx	r3
}
    1816:	bd10      	pop	{r4, pc}
    1818:	00000cbd 	.word	0x00000cbd
    181c:	00001f75 	.word	0x00001f75

00001820 <_usb_on_suspend>:
{
    1820:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1822:	4c07      	ldr	r4, [pc, #28]	; (1840 <_usb_on_suspend+0x20>)
    1824:	2104      	movs	r1, #4
    1826:	0020      	movs	r0, r4
    1828:	4b06      	ldr	r3, [pc, #24]	; (1844 <_usb_on_suspend+0x24>)
    182a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    182c:	2102      	movs	r1, #2
    182e:	0020      	movs	r0, r4
    1830:	4b05      	ldr	r3, [pc, #20]	; (1848 <_usb_on_suspend+0x28>)
    1832:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1834:	2001      	movs	r0, #1
    1836:	4b05      	ldr	r3, [pc, #20]	; (184c <_usb_on_suspend+0x2c>)
    1838:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <_usb_on_suspend+0x30>)
    183c:	4798      	blx	r3
}
    183e:	bd10      	pop	{r4, pc}
    1840:	20000614 	.word	0x20000614
    1844:	00001fe9 	.word	0x00001fe9
    1848:	00001fc9 	.word	0x00001fc9
    184c:	000011d9 	.word	0x000011d9
    1850:	00001ec1 	.word	0x00001ec1

00001854 <udd_ep_abort>:
{
    1854:	b510      	push	{r4, lr}
    1856:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    1858:	0001      	movs	r1, r0
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <udd_ep_abort+0x30>)
    185c:	4b0a      	ldr	r3, [pc, #40]	; (1888 <udd_ep_abort+0x34>)
    185e:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    1860:	0020      	movs	r0, r4
    1862:	4b0a      	ldr	r3, [pc, #40]	; (188c <udd_ep_abort+0x38>)
    1864:	4798      	blx	r3
	if (!ptr_job->busy) {
    1866:	7c83      	ldrb	r3, [r0, #18]
    1868:	07db      	lsls	r3, r3, #31
    186a:	d50a      	bpl.n	1882 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    186c:	7c83      	ldrb	r3, [r0, #18]
    186e:	2201      	movs	r2, #1
    1870:	4393      	bics	r3, r2
    1872:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1874:	6803      	ldr	r3, [r0, #0]
    1876:	2b00      	cmp	r3, #0
    1878:	d003      	beq.n	1882 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    187a:	68c1      	ldr	r1, [r0, #12]
    187c:	0022      	movs	r2, r4
    187e:	2001      	movs	r0, #1
    1880:	4798      	blx	r3
}
    1882:	bd10      	pop	{r4, pc}
    1884:	20000614 	.word	0x20000614
    1888:	00002449 	.word	0x00002449
    188c:	00001299 	.word	0x00001299

00001890 <udd_is_high_speed>:
}
    1890:	2000      	movs	r0, #0
    1892:	4770      	bx	lr

00001894 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <udd_get_frame_number+0xc>)
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	8a18      	ldrh	r0, [r3, #16]
    189a:	0480      	lsls	r0, r0, #18
    189c:	0d40      	lsrs	r0, r0, #21
}
    189e:	4770      	bx	lr
    18a0:	20000614 	.word	0x20000614

000018a4 <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    18a4:	4b02      	ldr	r3, [pc, #8]	; (18b0 <udd_get_micro_frame_number+0xc>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	8a18      	ldrh	r0, [r3, #16]
    18aa:	b280      	uxth	r0, r0
}
    18ac:	4770      	bx	lr
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	20000614 	.word	0x20000614

000018b4 <udd_ep_free>:
{
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	b082      	sub	sp, #8
    18b8:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    18ba:	ad01      	add	r5, sp, #4
    18bc:	0028      	movs	r0, r5
    18be:	4b0d      	ldr	r3, [pc, #52]	; (18f4 <udd_ep_free+0x40>)
    18c0:	4798      	blx	r3
	udd_ep_abort(ep);
    18c2:	0020      	movs	r0, r4
    18c4:	4b0c      	ldr	r3, [pc, #48]	; (18f8 <udd_ep_free+0x44>)
    18c6:	4798      	blx	r3
	config_ep.ep_address = ep;
    18c8:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    18ca:	2300      	movs	r3, #0
    18cc:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    18ce:	4e0b      	ldr	r6, [pc, #44]	; (18fc <udd_ep_free+0x48>)
    18d0:	0029      	movs	r1, r5
    18d2:	0030      	movs	r0, r6
    18d4:	4b0a      	ldr	r3, [pc, #40]	; (1900 <udd_ep_free+0x4c>)
    18d6:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    18d8:	210f      	movs	r1, #15
    18da:	4021      	ands	r1, r4
    18dc:	2200      	movs	r2, #0
    18de:	0030      	movs	r0, r6
    18e0:	4b08      	ldr	r3, [pc, #32]	; (1904 <udd_ep_free+0x50>)
    18e2:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    18e4:	2200      	movs	r2, #0
    18e6:	0021      	movs	r1, r4
    18e8:	0030      	movs	r0, r6
    18ea:	4b07      	ldr	r3, [pc, #28]	; (1908 <udd_ep_free+0x54>)
    18ec:	4798      	blx	r3
}
    18ee:	b002      	add	sp, #8
    18f0:	bd70      	pop	{r4, r5, r6, pc}
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	000021f5 	.word	0x000021f5
    18f8:	00001855 	.word	0x00001855
    18fc:	20000614 	.word	0x20000614
    1900:	00002205 	.word	0x00002205
    1904:	0000202d 	.word	0x0000202d
    1908:	00002125 	.word	0x00002125

0000190c <udd_ep_alloc>:
{
    190c:	b5f0      	push	{r4, r5, r6, r7, lr}
    190e:	b083      	sub	sp, #12
    1910:	0005      	movs	r5, r0
    1912:	000f      	movs	r7, r1
    1914:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    1916:	ae01      	add	r6, sp, #4
    1918:	0030      	movs	r0, r6
    191a:	4b36      	ldr	r3, [pc, #216]	; (19f4 <udd_ep_alloc+0xe8>)
    191c:	4798      	blx	r3
	config_ep.ep_address = ep;
    191e:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    1920:	2c08      	cmp	r4, #8
    1922:	d813      	bhi.n	194c <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    1924:	2200      	movs	r2, #0
    1926:	ab01      	add	r3, sp, #4
    1928:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    192a:	0028      	movs	r0, r5
    192c:	4b32      	ldr	r3, [pc, #200]	; (19f8 <udd_ep_alloc+0xec>)
    192e:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    1930:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    1932:	2103      	movs	r1, #3
    1934:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    1936:	2901      	cmp	r1, #1
    1938:	d038      	beq.n	19ac <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    193a:	2902      	cmp	r1, #2
    193c:	d043      	beq.n	19c6 <udd_ep_alloc+0xba>
		return false;
    193e:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    1940:	2903      	cmp	r1, #3
    1942:	d13d      	bne.n	19c0 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1944:	2204      	movs	r2, #4
    1946:	ab01      	add	r3, sp, #4
    1948:	70da      	strb	r2, [r3, #3]
    194a:	e032      	b.n	19b2 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    194c:	2c10      	cmp	r4, #16
    194e:	d803      	bhi.n	1958 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    1950:	2201      	movs	r2, #1
    1952:	ab01      	add	r3, sp, #4
    1954:	705a      	strb	r2, [r3, #1]
    1956:	e7e8      	b.n	192a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    1958:	2c20      	cmp	r4, #32
    195a:	d803      	bhi.n	1964 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    195c:	2202      	movs	r2, #2
    195e:	ab01      	add	r3, sp, #4
    1960:	705a      	strb	r2, [r3, #1]
    1962:	e7e2      	b.n	192a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    1964:	2c40      	cmp	r4, #64	; 0x40
    1966:	d803      	bhi.n	1970 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    1968:	2203      	movs	r2, #3
    196a:	ab01      	add	r3, sp, #4
    196c:	705a      	strb	r2, [r3, #1]
    196e:	e7dc      	b.n	192a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    1970:	2c80      	cmp	r4, #128	; 0x80
    1972:	d803      	bhi.n	197c <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    1974:	2204      	movs	r2, #4
    1976:	ab01      	add	r3, sp, #4
    1978:	705a      	strb	r2, [r3, #1]
    197a:	e7d6      	b.n	192a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    197c:	2380      	movs	r3, #128	; 0x80
    197e:	005b      	lsls	r3, r3, #1
    1980:	429c      	cmp	r4, r3
    1982:	d803      	bhi.n	198c <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    1984:	2205      	movs	r2, #5
    1986:	ab01      	add	r3, sp, #4
    1988:	705a      	strb	r2, [r3, #1]
    198a:	e7ce      	b.n	192a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    198c:	2380      	movs	r3, #128	; 0x80
    198e:	009b      	lsls	r3, r3, #2
    1990:	429c      	cmp	r4, r3
    1992:	d803      	bhi.n	199c <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    1994:	2206      	movs	r2, #6
    1996:	ab01      	add	r3, sp, #4
    1998:	705a      	strb	r2, [r3, #1]
    199a:	e7c6      	b.n	192a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    199c:	4a17      	ldr	r2, [pc, #92]	; (19fc <udd_ep_alloc+0xf0>)
		return false;
    199e:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    19a0:	4294      	cmp	r4, r2
    19a2:	d80d      	bhi.n	19c0 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    19a4:	2207      	movs	r2, #7
    19a6:	ab01      	add	r3, sp, #4
    19a8:	705a      	strb	r2, [r3, #1]
    19aa:	e7be      	b.n	192a <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    19ac:	2202      	movs	r2, #2
    19ae:	ab01      	add	r3, sp, #4
    19b0:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    19b2:	a901      	add	r1, sp, #4
    19b4:	4812      	ldr	r0, [pc, #72]	; (1a00 <udd_ep_alloc+0xf4>)
    19b6:	4b13      	ldr	r3, [pc, #76]	; (1a04 <udd_ep_alloc+0xf8>)
    19b8:	4798      	blx	r3
		return false;
    19ba:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    19bc:	2800      	cmp	r0, #0
    19be:	d006      	beq.n	19ce <udd_ep_alloc+0xc2>
}
    19c0:	0018      	movs	r0, r3
    19c2:	b003      	add	sp, #12
    19c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    19c6:	2203      	movs	r2, #3
    19c8:	ab01      	add	r3, sp, #4
    19ca:	70da      	strb	r2, [r3, #3]
    19cc:	e7f1      	b.n	19b2 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    19ce:	210f      	movs	r1, #15
    19d0:	4029      	ands	r1, r5
    19d2:	4c0b      	ldr	r4, [pc, #44]	; (1a00 <udd_ep_alloc+0xf4>)
    19d4:	4b0c      	ldr	r3, [pc, #48]	; (1a08 <udd_ep_alloc+0xfc>)
    19d6:	2200      	movs	r2, #0
    19d8:	0020      	movs	r0, r4
    19da:	4e0c      	ldr	r6, [pc, #48]	; (1a0c <udd_ep_alloc+0x100>)
    19dc:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    19de:	2200      	movs	r2, #0
    19e0:	0029      	movs	r1, r5
    19e2:	0020      	movs	r0, r4
    19e4:	4e0a      	ldr	r6, [pc, #40]	; (1a10 <udd_ep_alloc+0x104>)
    19e6:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    19e8:	2201      	movs	r2, #1
    19ea:	0029      	movs	r1, r5
    19ec:	0020      	movs	r0, r4
    19ee:	47b0      	blx	r6
	return true;
    19f0:	2301      	movs	r3, #1
    19f2:	e7e5      	b.n	19c0 <udd_ep_alloc+0xb4>
    19f4:	000021f5 	.word	0x000021f5
    19f8:	00001299 	.word	0x00001299
    19fc:	000003ff 	.word	0x000003ff
    1a00:	20000614 	.word	0x20000614
    1a04:	00002205 	.word	0x00002205
    1a08:	000012bd 	.word	0x000012bd
    1a0c:	00002005 	.word	0x00002005
    1a10:	00002055 	.word	0x00002055

00001a14 <udd_ep_is_halted>:
{
    1a14:	b510      	push	{r4, lr}
    1a16:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    1a18:	4801      	ldr	r0, [pc, #4]	; (1a20 <udd_ep_is_halted+0xc>)
    1a1a:	4b02      	ldr	r3, [pc, #8]	; (1a24 <udd_ep_is_halted+0x10>)
    1a1c:	4798      	blx	r3
}
    1a1e:	bd10      	pop	{r4, pc}
    1a20:	20000614 	.word	0x20000614
    1a24:	0000247f 	.word	0x0000247f

00001a28 <udd_ep_set_halt>:
{
    1a28:	b510      	push	{r4, lr}
    1a2a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1a2c:	230f      	movs	r3, #15
    1a2e:	4003      	ands	r3, r0
		return false;
    1a30:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1a32:	2b08      	cmp	r3, #8
    1a34:	d900      	bls.n	1a38 <udd_ep_set_halt+0x10>
}
    1a36:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    1a38:	0021      	movs	r1, r4
    1a3a:	4804      	ldr	r0, [pc, #16]	; (1a4c <udd_ep_set_halt+0x24>)
    1a3c:	4b04      	ldr	r3, [pc, #16]	; (1a50 <udd_ep_set_halt+0x28>)
    1a3e:	4798      	blx	r3
	udd_ep_abort(ep);
    1a40:	0020      	movs	r0, r4
    1a42:	4b04      	ldr	r3, [pc, #16]	; (1a54 <udd_ep_set_halt+0x2c>)
    1a44:	4798      	blx	r3
	return true;
    1a46:	2001      	movs	r0, #1
    1a48:	e7f5      	b.n	1a36 <udd_ep_set_halt+0xe>
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	20000614 	.word	0x20000614
    1a50:	000024a9 	.word	0x000024a9
    1a54:	00001855 	.word	0x00001855

00001a58 <_usb_ep0_on_tansfer_ok>:
{
    1a58:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    1a5a:	4b34      	ldr	r3, [pc, #208]	; (1b2c <_usb_ep0_on_tansfer_ok+0xd4>)
    1a5c:	781b      	ldrb	r3, [r3, #0]
    1a5e:	2b01      	cmp	r3, #1
    1a60:	d00a      	beq.n	1a78 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1a62:	2b02      	cmp	r3, #2
    1a64:	d05f      	beq.n	1b26 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    1a66:	4b32      	ldr	r3, [pc, #200]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1a68:	691b      	ldr	r3, [r3, #16]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d000      	beq.n	1a70 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    1a6e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1a70:	2200      	movs	r2, #0
    1a72:	4b2e      	ldr	r3, [pc, #184]	; (1b2c <_usb_ep0_on_tansfer_ok+0xd4>)
    1a74:	701a      	strb	r2, [r3, #0]
}
    1a76:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1a78:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1a7a:	4b2d      	ldr	r3, [pc, #180]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1a7c:	899b      	ldrh	r3, [r3, #12]
    1a7e:	4a2d      	ldr	r2, [pc, #180]	; (1b34 <_usb_ep0_on_tansfer_ok+0xdc>)
    1a80:	8814      	ldrh	r4, [r2, #0]
    1a82:	1962      	adds	r2, r4, r5
    1a84:	4293      	cmp	r3, r2
    1a86:	da01      	bge.n	1a8c <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1a88:	1b1d      	subs	r5, r3, r4
    1a8a:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    1a8c:	4b28      	ldr	r3, [pc, #160]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1a8e:	6898      	ldr	r0, [r3, #8]
    1a90:	1900      	adds	r0, r0, r4
    1a92:	002a      	movs	r2, r5
    1a94:	4928      	ldr	r1, [pc, #160]	; (1b38 <_usb_ep0_on_tansfer_ok+0xe0>)
    1a96:	4b29      	ldr	r3, [pc, #164]	; (1b3c <_usb_ep0_on_tansfer_ok+0xe4>)
    1a98:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    1a9a:	1964      	adds	r4, r4, r5
    1a9c:	b2a4      	uxth	r4, r4
    1a9e:	4b25      	ldr	r3, [pc, #148]	; (1b34 <_usb_ep0_on_tansfer_ok+0xdc>)
    1aa0:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1aa2:	2d40      	cmp	r5, #64	; 0x40
    1aa4:	d00a      	beq.n	1abc <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1aa6:	4b22      	ldr	r3, [pc, #136]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1aa8:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1aaa:	695b      	ldr	r3, [r3, #20]
    1aac:	2b00      	cmp	r3, #0
    1aae:	d002      	beq.n	1ab6 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1ab0:	4798      	blx	r3
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d014      	beq.n	1ae0 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    1ab6:	4b22      	ldr	r3, [pc, #136]	; (1b40 <_usb_ep0_on_tansfer_ok+0xe8>)
    1ab8:	4798      	blx	r3
    1aba:	e7dc      	b.n	1a76 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1abc:	4b1c      	ldr	r3, [pc, #112]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1abe:	88da      	ldrh	r2, [r3, #6]
    1ac0:	4b20      	ldr	r3, [pc, #128]	; (1b44 <_usb_ep0_on_tansfer_ok+0xec>)
    1ac2:	881b      	ldrh	r3, [r3, #0]
    1ac4:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1ac6:	429a      	cmp	r2, r3
    1ac8:	dded      	ble.n	1aa6 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1aca:	4b19      	ldr	r3, [pc, #100]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1acc:	899b      	ldrh	r3, [r3, #12]
    1ace:	42a3      	cmp	r3, r4
    1ad0:	d00c      	beq.n	1aec <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1ad2:	2340      	movs	r3, #64	; 0x40
    1ad4:	4a18      	ldr	r2, [pc, #96]	; (1b38 <_usb_ep0_on_tansfer_ok+0xe0>)
    1ad6:	2100      	movs	r1, #0
    1ad8:	481b      	ldr	r0, [pc, #108]	; (1b48 <_usb_ep0_on_tansfer_ok+0xf0>)
    1ada:	4c1c      	ldr	r4, [pc, #112]	; (1b4c <_usb_ep0_on_tansfer_ok+0xf4>)
    1adc:	47a0      	blx	r4
    1ade:	e7ca      	b.n	1a76 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1ae0:	2205      	movs	r2, #5
    1ae2:	4b12      	ldr	r3, [pc, #72]	; (1b2c <_usb_ep0_on_tansfer_ok+0xd4>)
    1ae4:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    1ae6:	4b1a      	ldr	r3, [pc, #104]	; (1b50 <_usb_ep0_on_tansfer_ok+0xf8>)
    1ae8:	4798      	blx	r3
    1aea:	e7c4      	b.n	1a76 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    1aec:	4b10      	ldr	r3, [pc, #64]	; (1b30 <_usb_ep0_on_tansfer_ok+0xd8>)
    1aee:	695b      	ldr	r3, [r3, #20]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d00b      	beq.n	1b0c <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    1af4:	4798      	blx	r3
    1af6:	2800      	cmp	r0, #0
    1af8:	d00f      	beq.n	1b1a <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1afa:	4912      	ldr	r1, [pc, #72]	; (1b44 <_usb_ep0_on_tansfer_ok+0xec>)
    1afc:	4a0d      	ldr	r2, [pc, #52]	; (1b34 <_usb_ep0_on_tansfer_ok+0xdc>)
    1afe:	880b      	ldrh	r3, [r1, #0]
    1b00:	8810      	ldrh	r0, [r2, #0]
    1b02:	181b      	adds	r3, r3, r0
    1b04:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    1b06:	2300      	movs	r3, #0
    1b08:	8013      	strh	r3, [r2, #0]
    1b0a:	e7e2      	b.n	1ad2 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1b0c:	2205      	movs	r2, #5
    1b0e:	4b07      	ldr	r3, [pc, #28]	; (1b2c <_usb_ep0_on_tansfer_ok+0xd4>)
    1b10:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1b12:	2000      	movs	r0, #0
    1b14:	4b0e      	ldr	r3, [pc, #56]	; (1b50 <_usb_ep0_on_tansfer_ok+0xf8>)
    1b16:	4798      	blx	r3
    1b18:	e7ad      	b.n	1a76 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1b1a:	2205      	movs	r2, #5
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <_usb_ep0_on_tansfer_ok+0xd4>)
    1b1e:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1b20:	4b0b      	ldr	r3, [pc, #44]	; (1b50 <_usb_ep0_on_tansfer_ok+0xf8>)
    1b22:	4798      	blx	r3
    1b24:	e7a7      	b.n	1a76 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    1b26:	4b0b      	ldr	r3, [pc, #44]	; (1b54 <_usb_ep0_on_tansfer_ok+0xfc>)
    1b28:	4798      	blx	r3
    1b2a:	e7a4      	b.n	1a76 <_usb_ep0_on_tansfer_ok+0x1e>
    1b2c:	2000038a 	.word	0x2000038a
    1b30:	2000077c 	.word	0x2000077c
    1b34:	20000386 	.word	0x20000386
    1b38:	20000794 	.word	0x20000794
    1b3c:	00004a45 	.word	0x00004a45
    1b40:	000015f1 	.word	0x000015f1
    1b44:	20000388 	.word	0x20000388
    1b48:	20000614 	.word	0x20000614
    1b4c:	000025a9 	.word	0x000025a9
    1b50:	00001a29 	.word	0x00001a29
    1b54:	00001681 	.word	0x00001681

00001b58 <udd_ep_clear_halt>:
{
    1b58:	b570      	push	{r4, r5, r6, lr}
    1b5a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1b5c:	230f      	movs	r3, #15
    1b5e:	4003      	ands	r3, r0
		return false;
    1b60:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1b62:	2b08      	cmp	r3, #8
    1b64:	d900      	bls.n	1b68 <udd_ep_clear_halt+0x10>
}
    1b66:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    1b68:	0020      	movs	r0, r4
    1b6a:	4b09      	ldr	r3, [pc, #36]	; (1b90 <udd_ep_clear_halt+0x38>)
    1b6c:	4798      	blx	r3
    1b6e:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    1b70:	0021      	movs	r1, r4
    1b72:	4808      	ldr	r0, [pc, #32]	; (1b94 <udd_ep_clear_halt+0x3c>)
    1b74:	4b08      	ldr	r3, [pc, #32]	; (1b98 <udd_ep_clear_halt+0x40>)
    1b76:	4798      	blx	r3
	if (ptr_job->busy == true) {
    1b78:	7cab      	ldrb	r3, [r5, #18]
	return true;
    1b7a:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    1b7c:	07db      	lsls	r3, r3, #31
    1b7e:	d5f2      	bpl.n	1b66 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    1b80:	7cab      	ldrb	r3, [r5, #18]
    1b82:	2201      	movs	r2, #1
    1b84:	4393      	bics	r3, r2
    1b86:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1b88:	682b      	ldr	r3, [r5, #0]
    1b8a:	4798      	blx	r3
	return true;
    1b8c:	2001      	movs	r0, #1
    1b8e:	e7ea      	b.n	1b66 <udd_ep_clear_halt+0xe>
    1b90:	00001299 	.word	0x00001299
    1b94:	20000614 	.word	0x20000614
    1b98:	000024cf 	.word	0x000024cf

00001b9c <udd_ep_run>:
{
    1b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b9e:	b087      	sub	sp, #28
    1ba0:	0005      	movs	r5, r0
    1ba2:	9103      	str	r1, [sp, #12]
    1ba4:	9202      	str	r2, [sp, #8]
    1ba6:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    1ba8:	260f      	movs	r6, #15
    1baa:	4006      	ands	r6, r0
		return false;
    1bac:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1bae:	2e08      	cmp	r6, #8
    1bb0:	d902      	bls.n	1bb8 <udd_ep_run+0x1c>
}
    1bb2:	0020      	movs	r0, r4
    1bb4:	b007      	add	sp, #28
    1bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1bb8:	4b64      	ldr	r3, [pc, #400]	; (1d4c <udd_ep_run+0x1b0>)
    1bba:	4798      	blx	r3
    1bbc:	1e04      	subs	r4, r0, #0
    1bbe:	d000      	beq.n	1bc2 <udd_ep_run+0x26>
    1bc0:	e0bd      	b.n	1d3e <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    1bc2:	0028      	movs	r0, r5
    1bc4:	4b62      	ldr	r3, [pc, #392]	; (1d50 <udd_ep_run+0x1b4>)
    1bc6:	4798      	blx	r3
    1bc8:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1bca:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1bce:	425a      	negs	r2, r3
    1bd0:	4153      	adcs	r3, r2
    1bd2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    1bd4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1bd6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1bda:	2200      	movs	r2, #0
    1bdc:	4b5d      	ldr	r3, [pc, #372]	; (1d54 <udd_ep_run+0x1b8>)
    1bde:	701a      	strb	r2, [r3, #0]
	return flags;
    1be0:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    1be2:	7c83      	ldrb	r3, [r0, #18]
    1be4:	07db      	lsls	r3, r3, #31
    1be6:	d508      	bpl.n	1bfa <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    1be8:	2a00      	cmp	r2, #0
    1bea:	d0e2      	beq.n	1bb2 <udd_ep_run+0x16>
		cpu_irq_enable();
    1bec:	2201      	movs	r2, #1
    1bee:	4b59      	ldr	r3, [pc, #356]	; (1d54 <udd_ep_run+0x1b8>)
    1bf0:	701a      	strb	r2, [r3, #0]
    1bf2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1bf6:	b662      	cpsie	i
    1bf8:	e7db      	b.n	1bb2 <udd_ep_run+0x16>
	ptr_job->busy = true;
    1bfa:	7c83      	ldrb	r3, [r0, #18]
    1bfc:	2101      	movs	r1, #1
    1bfe:	430b      	orrs	r3, r1
    1c00:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    1c02:	2a00      	cmp	r2, #0
    1c04:	d005      	beq.n	1c12 <udd_ep_run+0x76>
		cpu_irq_enable();
    1c06:	2201      	movs	r2, #1
    1c08:	4b52      	ldr	r3, [pc, #328]	; (1d54 <udd_ep_run+0x1b8>)
    1c0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1c0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c10:	b662      	cpsie	i
	ptr_job->buf = buf;
    1c12:	9b02      	ldr	r3, [sp, #8]
    1c14:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1c1a:	2300      	movs	r3, #0
    1c1c:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    1c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c20:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    1c22:	2301      	movs	r3, #1
    1c24:	9a03      	ldr	r2, [sp, #12]
    1c26:	4013      	ands	r3, r2
    1c28:	005a      	lsls	r2, r3, #1
    1c2a:	7cbb      	ldrb	r3, [r7, #18]
    1c2c:	2102      	movs	r1, #2
    1c2e:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    1c30:	4313      	orrs	r3, r2
    1c32:	2204      	movs	r2, #4
    1c34:	4393      	bics	r3, r2
    1c36:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    1c38:	b26b      	sxtb	r3, r5
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	db20      	blt.n	1c80 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    1c3e:	9b01      	ldr	r3, [sp, #4]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d06f      	beq.n	1d24 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    1c44:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c46:	4b44      	ldr	r3, [pc, #272]	; (1d58 <udd_ep_run+0x1bc>)
    1c48:	429c      	cmp	r4, r3
    1c4a:	d95a      	bls.n	1d02 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1c4c:	8a39      	ldrh	r1, [r7, #16]
    1c4e:	001c      	movs	r4, r3
    1c50:	0018      	movs	r0, r3
    1c52:	4b42      	ldr	r3, [pc, #264]	; (1d5c <udd_ep_run+0x1c0>)
    1c54:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1c56:	1a63      	subs	r3, r4, r1
    1c58:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    1c5a:	8a3b      	ldrh	r3, [r7, #16]
    1c5c:	429a      	cmp	r2, r3
    1c5e:	d257      	bcs.n	1d10 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    1c60:	7cba      	ldrb	r2, [r7, #18]
    1c62:	2104      	movs	r1, #4
    1c64:	430a      	orrs	r2, r1
    1c66:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    1c68:	1e72      	subs	r2, r6, #1
    1c6a:	00d2      	lsls	r2, r2, #3
    1c6c:	493c      	ldr	r1, [pc, #240]	; (1d60 <udd_ep_run+0x1c4>)
    1c6e:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1c70:	0031      	movs	r1, r6
    1c72:	483c      	ldr	r0, [pc, #240]	; (1d64 <udd_ep_run+0x1c8>)
    1c74:	4c3c      	ldr	r4, [pc, #240]	; (1d68 <udd_ep_run+0x1cc>)
    1c76:	47a0      	blx	r4
				return (STATUS_OK ==
    1c78:	4244      	negs	r4, r0
    1c7a:	4144      	adcs	r4, r0
    1c7c:	b2e4      	uxtb	r4, r4
    1c7e:	e798      	b.n	1bb2 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    1c80:	9b01      	ldr	r3, [sp, #4]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d027      	beq.n	1cd6 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    1c86:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c88:	4b33      	ldr	r3, [pc, #204]	; (1d58 <udd_ep_run+0x1bc>)
    1c8a:	429d      	cmp	r5, r3
    1c8c:	d906      	bls.n	1c9c <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1c8e:	8a39      	ldrh	r1, [r7, #16]
    1c90:	001d      	movs	r5, r3
    1c92:	0018      	movs	r0, r3
    1c94:	4b31      	ldr	r3, [pc, #196]	; (1d5c <udd_ep_run+0x1c0>)
    1c96:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1c98:	1a6b      	subs	r3, r5, r1
    1c9a:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1c9c:	7cbb      	ldrb	r3, [r7, #18]
    1c9e:	079b      	lsls	r3, r3, #30
    1ca0:	d507      	bpl.n	1cb2 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    1ca2:	8a39      	ldrh	r1, [r7, #16]
    1ca4:	0028      	movs	r0, r5
    1ca6:	4b31      	ldr	r3, [pc, #196]	; (1d6c <udd_ep_run+0x1d0>)
    1ca8:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1caa:	b289      	uxth	r1, r1
    1cac:	424c      	negs	r4, r1
    1cae:	414c      	adcs	r4, r1
    1cb0:	b2e4      	uxtb	r4, r4
    1cb2:	2001      	movs	r0, #1
    1cb4:	4020      	ands	r0, r4
    1cb6:	0040      	lsls	r0, r0, #1
    1cb8:	7cbc      	ldrb	r4, [r7, #18]
    1cba:	2302      	movs	r3, #2
    1cbc:	439c      	bics	r4, r3
    1cbe:	4304      	orrs	r4, r0
    1cc0:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    1cc2:	002b      	movs	r3, r5
    1cc4:	9a02      	ldr	r2, [sp, #8]
    1cc6:	0031      	movs	r1, r6
    1cc8:	4826      	ldr	r0, [pc, #152]	; (1d64 <udd_ep_run+0x1c8>)
    1cca:	4c29      	ldr	r4, [pc, #164]	; (1d70 <udd_ep_run+0x1d4>)
    1ccc:	47a0      	blx	r4
		return (STATUS_OK ==
    1cce:	4244      	negs	r4, r0
    1cd0:	4144      	adcs	r4, r0
    1cd2:	b2e4      	uxtb	r4, r4
    1cd4:	e76d      	b.n	1bb2 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    1cd6:	7cbb      	ldrb	r3, [r7, #18]
    1cd8:	079b      	lsls	r3, r3, #30
    1cda:	d505      	bpl.n	1ce8 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    1cdc:	7cbb      	ldrb	r3, [r7, #18]
    1cde:	2202      	movs	r2, #2
    1ce0:	4393      	bics	r3, r2
    1ce2:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    1ce4:	2500      	movs	r5, #0
    1ce6:	e7ec      	b.n	1cc2 <udd_ep_run+0x126>
			ptr_job->busy = false;
    1ce8:	7cbb      	ldrb	r3, [r7, #18]
    1cea:	2201      	movs	r2, #1
    1cec:	4393      	bics	r3, r2
    1cee:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d025      	beq.n	1d42 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1cf6:	002a      	movs	r2, r5
    1cf8:	2100      	movs	r1, #0
    1cfa:	2000      	movs	r0, #0
    1cfc:	4798      	blx	r3
			return true;
    1cfe:	2401      	movs	r4, #1
    1d00:	e757      	b.n	1bb2 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    1d02:	8a39      	ldrh	r1, [r7, #16]
    1d04:	0020      	movs	r0, r4
    1d06:	4b19      	ldr	r3, [pc, #100]	; (1d6c <udd_ep_run+0x1d0>)
    1d08:	4798      	blx	r3
    1d0a:	1a63      	subs	r3, r4, r1
    1d0c:	b29a      	uxth	r2, r3
    1d0e:	e7a4      	b.n	1c5a <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1d10:	0013      	movs	r3, r2
    1d12:	9a02      	ldr	r2, [sp, #8]
    1d14:	0031      	movs	r1, r6
    1d16:	4813      	ldr	r0, [pc, #76]	; (1d64 <udd_ep_run+0x1c8>)
    1d18:	4c13      	ldr	r4, [pc, #76]	; (1d68 <udd_ep_run+0x1cc>)
    1d1a:	47a0      	blx	r4
				return (STATUS_OK ==
    1d1c:	4244      	negs	r4, r0
    1d1e:	4144      	adcs	r4, r0
    1d20:	b2e4      	uxtb	r4, r4
    1d22:	e746      	b.n	1bb2 <udd_ep_run+0x16>
			ptr_job->busy = false;
    1d24:	7cbb      	ldrb	r3, [r7, #18]
    1d26:	2201      	movs	r2, #1
    1d28:	4393      	bics	r3, r2
    1d2a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d009      	beq.n	1d46 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1d32:	002a      	movs	r2, r5
    1d34:	2100      	movs	r1, #0
    1d36:	2000      	movs	r0, #0
    1d38:	4798      	blx	r3
			return true;
    1d3a:	2401      	movs	r4, #1
    1d3c:	e739      	b.n	1bb2 <udd_ep_run+0x16>
		return false;
    1d3e:	2400      	movs	r4, #0
    1d40:	e737      	b.n	1bb2 <udd_ep_run+0x16>
			return true;
    1d42:	2401      	movs	r4, #1
    1d44:	e735      	b.n	1bb2 <udd_ep_run+0x16>
			return true;
    1d46:	2401      	movs	r4, #1
    1d48:	e733      	b.n	1bb2 <udd_ep_run+0x16>
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00001a15 	.word	0x00001a15
    1d50:	00001299 	.word	0x00001299
    1d54:	200000f0 	.word	0x200000f0
    1d58:	00001fff 	.word	0x00001fff
    1d5c:	0000495d 	.word	0x0000495d
    1d60:	200005d4 	.word	0x200005d4
    1d64:	20000614 	.word	0x20000614
    1d68:	000025a9 	.word	0x000025a9
    1d6c:	00004789 	.word	0x00004789
    1d70:	00002555 	.word	0x00002555

00001d74 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1d74:	4b02      	ldr	r3, [pc, #8]	; (1d80 <udd_set_address+0xc>)
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	2280      	movs	r2, #128	; 0x80
    1d7a:	4310      	orrs	r0, r2
    1d7c:	7298      	strb	r0, [r3, #10]
}
    1d7e:	4770      	bx	lr
    1d80:	20000614 	.word	0x20000614

00001d84 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1d84:	4b02      	ldr	r3, [pc, #8]	; (1d90 <udd_getaddress+0xc>)
    1d86:	681b      	ldr	r3, [r3, #0]
    1d88:	7a98      	ldrb	r0, [r3, #10]
    1d8a:	0640      	lsls	r0, r0, #25
    1d8c:	0e40      	lsrs	r0, r0, #25
}
    1d8e:	4770      	bx	lr
    1d90:	20000614 	.word	0x20000614

00001d94 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    1d94:	4b01      	ldr	r3, [pc, #4]	; (1d9c <udd_set_setup_payload+0x8>)
    1d96:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1d98:	8199      	strh	r1, [r3, #12]
}
    1d9a:	4770      	bx	lr
    1d9c:	2000077c 	.word	0x2000077c

00001da0 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    1da0:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    1da2:	2003      	movs	r0, #3
    1da4:	4b16      	ldr	r3, [pc, #88]	; (1e00 <udd_attach+0x60>)
    1da6:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1da8:	4c16      	ldr	r4, [pc, #88]	; (1e04 <udd_attach+0x64>)
    1daa:	6822      	ldr	r2, [r4, #0]
    1dac:	8913      	ldrh	r3, [r2, #8]
    1dae:	2101      	movs	r1, #1
    1db0:	438b      	bics	r3, r1
    1db2:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    1db4:	4a14      	ldr	r2, [pc, #80]	; (1e08 <udd_attach+0x68>)
    1db6:	3103      	adds	r1, #3
    1db8:	0020      	movs	r0, r4
    1dba:	4e14      	ldr	r6, [pc, #80]	; (1e0c <udd_attach+0x6c>)
    1dbc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    1dbe:	4a14      	ldr	r2, [pc, #80]	; (1e10 <udd_attach+0x70>)
    1dc0:	2100      	movs	r1, #0
    1dc2:	0020      	movs	r0, r4
    1dc4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    1dc6:	4a13      	ldr	r2, [pc, #76]	; (1e14 <udd_attach+0x74>)
    1dc8:	2101      	movs	r1, #1
    1dca:	0020      	movs	r0, r4
    1dcc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    1dce:	4a12      	ldr	r2, [pc, #72]	; (1e18 <udd_attach+0x78>)
    1dd0:	2102      	movs	r1, #2
    1dd2:	0020      	movs	r0, r4
    1dd4:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1dd6:	2104      	movs	r1, #4
    1dd8:	0020      	movs	r0, r4
    1dda:	4d10      	ldr	r5, [pc, #64]	; (1e1c <udd_attach+0x7c>)
    1ddc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    1dde:	2100      	movs	r1, #0
    1de0:	0020      	movs	r0, r4
    1de2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    1de4:	2101      	movs	r1, #1
    1de6:	0020      	movs	r0, r4
    1de8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1dea:	2102      	movs	r1, #2
    1dec:	0020      	movs	r0, r4
    1dee:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1df0:	4a0b      	ldr	r2, [pc, #44]	; (1e20 <udd_attach+0x80>)
    1df2:	2106      	movs	r1, #6
    1df4:	0020      	movs	r0, r4
    1df6:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1df8:	2106      	movs	r1, #6
    1dfa:	0020      	movs	r0, r4
    1dfc:	47a8      	blx	r5
#endif
}
    1dfe:	bd70      	pop	{r4, r5, r6, pc}
    1e00:	000011d9 	.word	0x000011d9
    1e04:	20000614 	.word	0x20000614
    1e08:	00001821 	.word	0x00001821
    1e0c:	00001fa5 	.word	0x00001fa5
    1e10:	0000180d 	.word	0x0000180d
    1e14:	00001541 	.word	0x00001541
    1e18:	000014d1 	.word	0x000014d1
    1e1c:	00001fc9 	.word	0x00001fc9
    1e20:	0000149d 	.word	0x0000149d

00001e24 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    1e24:	b570      	push	{r4, r5, r6, lr}
    1e26:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e28:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e2c:	425a      	negs	r2, r3
    1e2e:	4153      	adcs	r3, r2
    1e30:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1e32:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e38:	2600      	movs	r6, #0
    1e3a:	4b18      	ldr	r3, [pc, #96]	; (1e9c <udd_enable+0x78>)
    1e3c:	701e      	strb	r6, [r3, #0]
	return flags;
    1e3e:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    1e40:	ad01      	add	r5, sp, #4
    1e42:	0028      	movs	r0, r5
    1e44:	4b16      	ldr	r3, [pc, #88]	; (1ea0 <udd_enable+0x7c>)
    1e46:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    1e48:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    1e4a:	4e16      	ldr	r6, [pc, #88]	; (1ea4 <udd_enable+0x80>)
    1e4c:	002a      	movs	r2, r5
    1e4e:	4916      	ldr	r1, [pc, #88]	; (1ea8 <udd_enable+0x84>)
    1e50:	0030      	movs	r0, r6
    1e52:	4b16      	ldr	r3, [pc, #88]	; (1eac <udd_enable+0x88>)
    1e54:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    1e56:	0030      	movs	r0, r6
    1e58:	4b15      	ldr	r3, [pc, #84]	; (1eb0 <udd_enable+0x8c>)
    1e5a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1e5c:	4b15      	ldr	r3, [pc, #84]	; (1eb4 <udd_enable+0x90>)
    1e5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1e60:	069b      	lsls	r3, r3, #26
    1e62:	d414      	bmi.n	1e8e <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1e64:	4913      	ldr	r1, [pc, #76]	; (1eb4 <udd_enable+0x90>)
    1e66:	22d0      	movs	r2, #208	; 0xd0
    1e68:	68cb      	ldr	r3, [r1, #12]
    1e6a:	4013      	ands	r3, r2
    1e6c:	2bd0      	cmp	r3, #208	; 0xd0
    1e6e:	d1fb      	bne.n	1e68 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    1e70:	2001      	movs	r0, #1
    1e72:	4b11      	ldr	r3, [pc, #68]	; (1eb8 <udd_enable+0x94>)
    1e74:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    1e76:	4b11      	ldr	r3, [pc, #68]	; (1ebc <udd_enable+0x98>)
    1e78:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1e7a:	2c00      	cmp	r4, #0
    1e7c:	d005      	beq.n	1e8a <udd_enable+0x66>
		cpu_irq_enable();
    1e7e:	2201      	movs	r2, #1
    1e80:	4b06      	ldr	r3, [pc, #24]	; (1e9c <udd_enable+0x78>)
    1e82:	701a      	strb	r2, [r3, #0]
    1e84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1e88:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    1e8a:	b002      	add	sp, #8
    1e8c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1e8e:	4909      	ldr	r1, [pc, #36]	; (1eb4 <udd_enable+0x90>)
    1e90:	2210      	movs	r2, #16
    1e92:	68cb      	ldr	r3, [r1, #12]
    1e94:	421a      	tst	r2, r3
    1e96:	d0fc      	beq.n	1e92 <udd_enable+0x6e>
    1e98:	e7ea      	b.n	1e70 <udd_enable+0x4c>
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	200000f0 	.word	0x200000f0
    1ea0:	00002d1d 	.word	0x00002d1d
    1ea4:	20000614 	.word	0x20000614
    1ea8:	41005000 	.word	0x41005000
    1eac:	00002d2d 	.word	0x00002d2d
    1eb0:	00002629 	.word	0x00002629
    1eb4:	40000800 	.word	0x40000800
    1eb8:	000011d9 	.word	0x000011d9
    1ebc:	00001da1 	.word	0x00001da1

00001ec0 <main_suspend_action>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ec0:	2280      	movs	r2, #128	; 0x80
    1ec2:	05d2      	lsls	r2, r2, #23
    1ec4:	4b01      	ldr	r3, [pc, #4]	; (1ecc <main_suspend_action+0xc>)
    1ec6:	619a      	str	r2, [r3, #24]
static volatile bool main_b_cdc_enable = false;

void main_suspend_action(void)
{
	ui_powerdown();
}
    1ec8:	4770      	bx	lr
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	41004480 	.word	0x41004480

00001ed0 <main_resume_action>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ed0:	2280      	movs	r2, #128	; 0x80
    1ed2:	05d2      	lsls	r2, r2, #23
    1ed4:	4b01      	ldr	r3, [pc, #4]	; (1edc <main_resume_action+0xc>)
    1ed6:	615a      	str	r2, [r3, #20]

void main_resume_action(void)
{
	ui_wakeup();
}
    1ed8:	4770      	bx	lr
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	41004480 	.word	0x41004480

00001ee0 <main_cdc_enable>:
{
	main_b_msc_enable = false;
}

bool main_cdc_enable(uint8_t port)
{
    1ee0:	b510      	push	{r4, lr}
	main_b_cdc_enable = true;
    1ee2:	2201      	movs	r2, #1
    1ee4:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <main_cdc_enable+0x10>)
    1ee6:	701a      	strb	r2, [r3, #0]
	// Open communication
	debug_open(port);
    1ee8:	4b02      	ldr	r3, [pc, #8]	; (1ef4 <main_cdc_enable+0x14>)
    1eea:	4798      	blx	r3
	return true;
}
    1eec:	2001      	movs	r0, #1
    1eee:	bd10      	pop	{r4, pc}
    1ef0:	200004cd 	.word	0x200004cd
    1ef4:	00003ca9 	.word	0x00003ca9

00001ef8 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    1ef8:	b510      	push	{r4, lr}
	main_b_cdc_enable = false;
    1efa:	2200      	movs	r2, #0
    1efc:	4b02      	ldr	r3, [pc, #8]	; (1f08 <main_cdc_disable+0x10>)
    1efe:	701a      	strb	r2, [r3, #0]
	// Close communication
	debug_close(port);
    1f00:	4b02      	ldr	r3, [pc, #8]	; (1f0c <main_cdc_disable+0x14>)
    1f02:	4798      	blx	r3
}
    1f04:	bd10      	pop	{r4, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	200004cd 	.word	0x200004cd
    1f0c:	00003ce1 	.word	0x00003ce1

00001f10 <main_cdc_set_dtr>:
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
	}
}
    1f10:	4770      	bx	lr
	...

00001f14 <ui_init>:
    1f14:	2280      	movs	r2, #128	; 0x80
    1f16:	05d2      	lsls	r2, r2, #23
    1f18:	4b01      	ldr	r3, [pc, #4]	; (1f20 <ui_init+0xc>)
    1f1a:	615a      	str	r2, [r3, #20]

void ui_init(void)
{
	/* Initialize LEDs */
	LED_On(LED_0_PIN);
}
    1f1c:	4770      	bx	lr
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	41004480 	.word	0x41004480

00001f24 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    1f24:	2280      	movs	r2, #128	; 0x80
    1f26:	05d2      	lsls	r2, r2, #23
    1f28:	4b01      	ldr	r3, [pc, #4]	; (1f30 <ui_powerdown+0xc>)
    1f2a:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    1f2c:	4770      	bx	lr
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	41004480 	.word	0x41004480

00001f34 <ui_com_rx_start>:


void ui_com_rx_start(void)
{

}
    1f34:	4770      	bx	lr

00001f36 <ui_com_rx_stop>:


void ui_com_rx_stop(void)
{

}
    1f36:	4770      	bx	lr

00001f38 <ui_com_tx_start>:


void ui_com_tx_start(void)
{

}
    1f38:	4770      	bx	lr

00001f3a <ui_com_tx_stop>:


void ui_com_tx_stop(void)
{

}
    1f3a:	4770      	bx	lr

00001f3c <ui_com_overflow>:


void ui_com_overflow(void)
{

}
    1f3c:	4770      	bx	lr
	...

00001f40 <ui_process>:
{
	
}

void ui_process(uint16_t framenumber)
{
    1f40:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
    1f42:	21fa      	movs	r1, #250	; 0xfa
    1f44:	0089      	lsls	r1, r1, #2
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <ui_process+0x2c>)
    1f48:	4798      	blx	r3
    1f4a:	b289      	uxth	r1, r1
    1f4c:	2900      	cmp	r1, #0
    1f4e:	d104      	bne.n	1f5a <ui_process+0x1a>
		port_base->OUTCLR.reg = pin_mask;
    1f50:	2280      	movs	r2, #128	; 0x80
    1f52:	05d2      	lsls	r2, r2, #23
    1f54:	4b06      	ldr	r3, [pc, #24]	; (1f70 <ui_process+0x30>)
    1f56:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
    1f58:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
    1f5a:	23fa      	movs	r3, #250	; 0xfa
    1f5c:	005b      	lsls	r3, r3, #1
    1f5e:	4299      	cmp	r1, r3
    1f60:	d1fa      	bne.n	1f58 <ui_process+0x18>
		port_base->OUTSET.reg = pin_mask;
    1f62:	2280      	movs	r2, #128	; 0x80
    1f64:	05d2      	lsls	r2, r2, #23
    1f66:	4b02      	ldr	r3, [pc, #8]	; (1f70 <ui_process+0x30>)
    1f68:	619a      	str	r2, [r3, #24]
}
    1f6a:	e7f5      	b.n	1f58 <ui_process+0x18>
    1f6c:	00004789 	.word	0x00004789
    1f70:	41004480 	.word	0x41004480

00001f74 <main_sof_action>:
{
    1f74:	b510      	push	{r4, lr}
	if ((!main_b_msc_enable) ||
    1f76:	4b07      	ldr	r3, [pc, #28]	; (1f94 <main_sof_action+0x20>)
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d003      	beq.n	1f86 <main_sof_action+0x12>
		(!main_b_cdc_enable))
    1f7e:	4b06      	ldr	r3, [pc, #24]	; (1f98 <main_sof_action+0x24>)
    1f80:	781b      	ldrb	r3, [r3, #0]
	if ((!main_b_msc_enable) ||
    1f82:	2b00      	cmp	r3, #0
    1f84:	d100      	bne.n	1f88 <main_sof_action+0x14>
}
    1f86:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    1f88:	4b04      	ldr	r3, [pc, #16]	; (1f9c <main_sof_action+0x28>)
    1f8a:	4798      	blx	r3
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <main_sof_action+0x2c>)
    1f8e:	4798      	blx	r3
    1f90:	e7f9      	b.n	1f86 <main_sof_action+0x12>
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	200004ce 	.word	0x200004ce
    1f98:	200004cd 	.word	0x200004cd
    1f9c:	00001895 	.word	0x00001895
    1fa0:	00001f41 	.word	0x00001f41

00001fa4 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    1fa4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    1fa6:	000b      	movs	r3, r1
    1fa8:	332e      	adds	r3, #46	; 0x2e
    1faa:	009b      	lsls	r3, r3, #2
    1fac:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    1fae:	22aa      	movs	r2, #170	; 0xaa
    1fb0:	0052      	lsls	r2, r2, #1
    1fb2:	0049      	lsls	r1, r1, #1
    1fb4:	5a83      	ldrh	r3, [r0, r2]
    1fb6:	4c03      	ldr	r4, [pc, #12]	; (1fc4 <usb_device_register_callback+0x20>)
    1fb8:	5b09      	ldrh	r1, [r1, r4]
    1fba:	430b      	orrs	r3, r1
    1fbc:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    1fbe:	2000      	movs	r0, #0
    1fc0:	bd10      	pop	{r4, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	00004a84 	.word	0x00004a84

00001fc8 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    1fc8:	0049      	lsls	r1, r1, #1
    1fca:	4b06      	ldr	r3, [pc, #24]	; (1fe4 <usb_device_enable_callback+0x1c>)
    1fcc:	5acb      	ldrh	r3, [r1, r3]
    1fce:	6802      	ldr	r2, [r0, #0]
    1fd0:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    1fd2:	21ab      	movs	r1, #171	; 0xab
    1fd4:	0049      	lsls	r1, r1, #1
    1fd6:	5a42      	ldrh	r2, [r0, r1]
    1fd8:	431a      	orrs	r2, r3
    1fda:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    1fdc:	6802      	ldr	r2, [r0, #0]
    1fde:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    1fe0:	2000      	movs	r0, #0
    1fe2:	4770      	bx	lr
    1fe4:	00004a84 	.word	0x00004a84

00001fe8 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    1fe8:	0049      	lsls	r1, r1, #1
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fec:	5aca      	ldrh	r2, [r1, r3]
    1fee:	21ab      	movs	r1, #171	; 0xab
    1ff0:	0049      	lsls	r1, r1, #1
    1ff2:	5a43      	ldrh	r3, [r0, r1]
    1ff4:	4393      	bics	r3, r2
    1ff6:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    1ff8:	6803      	ldr	r3, [r0, #0]
    1ffa:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    1ffc:	2000      	movs	r0, #0
    1ffe:	4770      	bx	lr
    2000:	00004a84 	.word	0x00004a84

00002004 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2004:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    2006:	008c      	lsls	r4, r1, #2
    2008:	18a4      	adds	r4, r4, r2
    200a:	3434      	adds	r4, #52	; 0x34
    200c:	00a4      	lsls	r4, r4, #2
    200e:	1904      	adds	r4, r0, r4
    2010:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2012:	1840      	adds	r0, r0, r1
    2014:	3059      	adds	r0, #89	; 0x59
    2016:	30ff      	adds	r0, #255	; 0xff
    2018:	7803      	ldrb	r3, [r0, #0]
    201a:	4903      	ldr	r1, [pc, #12]	; (2028 <usb_device_endpoint_register_callback+0x24>)
    201c:	5c8a      	ldrb	r2, [r1, r2]
    201e:	4313      	orrs	r3, r2
    2020:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2022:	2000      	movs	r0, #0
    2024:	bd10      	pop	{r4, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	00004a94 	.word	0x00004a94

0000202c <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    202c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    202e:	008b      	lsls	r3, r1, #2
    2030:	189b      	adds	r3, r3, r2
    2032:	3334      	adds	r3, #52	; 0x34
    2034:	009b      	lsls	r3, r3, #2
    2036:	18c3      	adds	r3, r0, r3
    2038:	2400      	movs	r4, #0
    203a:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    203c:	1840      	adds	r0, r0, r1
    203e:	3059      	adds	r0, #89	; 0x59
    2040:	30ff      	adds	r0, #255	; 0xff
    2042:	4b03      	ldr	r3, [pc, #12]	; (2050 <usb_device_endpoint_unregister_callback+0x24>)
    2044:	5c9a      	ldrb	r2, [r3, r2]
    2046:	7803      	ldrb	r3, [r0, #0]
    2048:	4393      	bics	r3, r2
    204a:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    204c:	2000      	movs	r0, #0
    204e:	bd10      	pop	{r4, pc}
    2050:	00004a94 	.word	0x00004a94

00002054 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2054:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2056:	230f      	movs	r3, #15
    2058:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    205a:	18c4      	adds	r4, r0, r3
    205c:	3461      	adds	r4, #97	; 0x61
    205e:	34ff      	adds	r4, #255	; 0xff
    2060:	7825      	ldrb	r5, [r4, #0]
    2062:	4e2f      	ldr	r6, [pc, #188]	; (2120 <usb_device_endpoint_enable_callback+0xcc>)
    2064:	5cb6      	ldrb	r6, [r6, r2]
    2066:	4335      	orrs	r5, r6
    2068:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    206a:	2a00      	cmp	r2, #0
    206c:	d129      	bne.n	20c2 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    206e:	2b00      	cmp	r3, #0
    2070:	d112      	bne.n	2098 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2072:	2503      	movs	r5, #3
    2074:	240a      	movs	r4, #10
    2076:	34ff      	adds	r4, #255	; 0xff
    2078:	6806      	ldr	r6, [r0, #0]
    207a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    207c:	2a03      	cmp	r2, #3
    207e:	d109      	bne.n	2094 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2080:	b249      	sxtb	r1, r1
    2082:	2900      	cmp	r1, #0
    2084:	db44      	blt.n	2110 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    2086:	6802      	ldr	r2, [r0, #0]
    2088:	015b      	lsls	r3, r3, #5
    208a:	18d3      	adds	r3, r2, r3
    208c:	330a      	adds	r3, #10
    208e:	33ff      	adds	r3, #255	; 0xff
    2090:	2220      	movs	r2, #32
    2092:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2094:	2000      	movs	r0, #0
    2096:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    2098:	b24c      	sxtb	r4, r1
    209a:	2c00      	cmp	r4, #0
    209c:	db08      	blt.n	20b0 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    209e:	015c      	lsls	r4, r3, #5
    20a0:	6805      	ldr	r5, [r0, #0]
    20a2:	46ac      	mov	ip, r5
    20a4:	4464      	add	r4, ip
    20a6:	340a      	adds	r4, #10
    20a8:	34ff      	adds	r4, #255	; 0xff
    20aa:	2501      	movs	r5, #1
    20ac:	7025      	strb	r5, [r4, #0]
    20ae:	e7e5      	b.n	207c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    20b0:	015c      	lsls	r4, r3, #5
    20b2:	6805      	ldr	r5, [r0, #0]
    20b4:	46ac      	mov	ip, r5
    20b6:	4464      	add	r4, ip
    20b8:	340a      	adds	r4, #10
    20ba:	34ff      	adds	r4, #255	; 0xff
    20bc:	2502      	movs	r5, #2
    20be:	7025      	strb	r5, [r4, #0]
    20c0:	e7dc      	b.n	207c <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    20c2:	2a01      	cmp	r2, #1
    20c4:	d11a      	bne.n	20fc <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    20c6:	2b00      	cmp	r3, #0
    20c8:	d105      	bne.n	20d6 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    20ca:	6802      	ldr	r2, [r0, #0]
    20cc:	210c      	movs	r1, #12
    20ce:	230a      	movs	r3, #10
    20d0:	33ff      	adds	r3, #255	; 0xff
    20d2:	54d1      	strb	r1, [r2, r3]
    20d4:	e7de      	b.n	2094 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    20d6:	b249      	sxtb	r1, r1
    20d8:	2900      	cmp	r1, #0
    20da:	db07      	blt.n	20ec <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    20dc:	6802      	ldr	r2, [r0, #0]
    20de:	015b      	lsls	r3, r3, #5
    20e0:	18d3      	adds	r3, r2, r3
    20e2:	330a      	adds	r3, #10
    20e4:	33ff      	adds	r3, #255	; 0xff
    20e6:	2204      	movs	r2, #4
    20e8:	701a      	strb	r2, [r3, #0]
    20ea:	e7d3      	b.n	2094 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    20ec:	6802      	ldr	r2, [r0, #0]
    20ee:	015b      	lsls	r3, r3, #5
    20f0:	18d3      	adds	r3, r2, r3
    20f2:	330a      	adds	r3, #10
    20f4:	33ff      	adds	r3, #255	; 0xff
    20f6:	2208      	movs	r2, #8
    20f8:	701a      	strb	r2, [r3, #0]
    20fa:	e7cb      	b.n	2094 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    20fc:	2a02      	cmp	r2, #2
    20fe:	d1bd      	bne.n	207c <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2100:	6802      	ldr	r2, [r0, #0]
    2102:	015b      	lsls	r3, r3, #5
    2104:	18d3      	adds	r3, r2, r3
    2106:	330a      	adds	r3, #10
    2108:	33ff      	adds	r3, #255	; 0xff
    210a:	2210      	movs	r2, #16
    210c:	701a      	strb	r2, [r3, #0]
    210e:	e7c1      	b.n	2094 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2110:	6802      	ldr	r2, [r0, #0]
    2112:	015b      	lsls	r3, r3, #5
    2114:	18d3      	adds	r3, r2, r3
    2116:	330a      	adds	r3, #10
    2118:	33ff      	adds	r3, #255	; 0xff
    211a:	2240      	movs	r2, #64	; 0x40
    211c:	701a      	strb	r2, [r3, #0]
    211e:	e7b9      	b.n	2094 <usb_device_endpoint_enable_callback+0x40>
    2120:	00004a94 	.word	0x00004a94

00002124 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2124:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2126:	230f      	movs	r3, #15
    2128:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    212a:	18c4      	adds	r4, r0, r3
    212c:	3461      	adds	r4, #97	; 0x61
    212e:	34ff      	adds	r4, #255	; 0xff
    2130:	4d2f      	ldr	r5, [pc, #188]	; (21f0 <usb_device_endpoint_disable_callback+0xcc>)
    2132:	5cae      	ldrb	r6, [r5, r2]
    2134:	7825      	ldrb	r5, [r4, #0]
    2136:	43b5      	bics	r5, r6
    2138:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    213a:	2a00      	cmp	r2, #0
    213c:	d129      	bne.n	2192 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    213e:	2b00      	cmp	r3, #0
    2140:	d112      	bne.n	2168 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2142:	2503      	movs	r5, #3
    2144:	2484      	movs	r4, #132	; 0x84
    2146:	0064      	lsls	r4, r4, #1
    2148:	6806      	ldr	r6, [r0, #0]
    214a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    214c:	2a03      	cmp	r2, #3
    214e:	d109      	bne.n	2164 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2150:	b249      	sxtb	r1, r1
    2152:	2900      	cmp	r1, #0
    2154:	db44      	blt.n	21e0 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    2156:	6802      	ldr	r2, [r0, #0]
    2158:	015b      	lsls	r3, r3, #5
    215a:	18d3      	adds	r3, r2, r3
    215c:	3309      	adds	r3, #9
    215e:	33ff      	adds	r3, #255	; 0xff
    2160:	2220      	movs	r2, #32
    2162:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2164:	2000      	movs	r0, #0
    2166:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    2168:	b24c      	sxtb	r4, r1
    216a:	2c00      	cmp	r4, #0
    216c:	db08      	blt.n	2180 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    216e:	015c      	lsls	r4, r3, #5
    2170:	6805      	ldr	r5, [r0, #0]
    2172:	46ac      	mov	ip, r5
    2174:	4464      	add	r4, ip
    2176:	3409      	adds	r4, #9
    2178:	34ff      	adds	r4, #255	; 0xff
    217a:	2501      	movs	r5, #1
    217c:	7025      	strb	r5, [r4, #0]
    217e:	e7e5      	b.n	214c <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2180:	015c      	lsls	r4, r3, #5
    2182:	6805      	ldr	r5, [r0, #0]
    2184:	46ac      	mov	ip, r5
    2186:	4464      	add	r4, ip
    2188:	3409      	adds	r4, #9
    218a:	34ff      	adds	r4, #255	; 0xff
    218c:	2502      	movs	r5, #2
    218e:	7025      	strb	r5, [r4, #0]
    2190:	e7dc      	b.n	214c <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2192:	2a01      	cmp	r2, #1
    2194:	d11a      	bne.n	21cc <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    2196:	2b00      	cmp	r3, #0
    2198:	d105      	bne.n	21a6 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    219a:	6802      	ldr	r2, [r0, #0]
    219c:	210c      	movs	r1, #12
    219e:	3309      	adds	r3, #9
    21a0:	33ff      	adds	r3, #255	; 0xff
    21a2:	54d1      	strb	r1, [r2, r3]
    21a4:	e7de      	b.n	2164 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    21a6:	b249      	sxtb	r1, r1
    21a8:	2900      	cmp	r1, #0
    21aa:	db07      	blt.n	21bc <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    21ac:	6802      	ldr	r2, [r0, #0]
    21ae:	015b      	lsls	r3, r3, #5
    21b0:	18d3      	adds	r3, r2, r3
    21b2:	3309      	adds	r3, #9
    21b4:	33ff      	adds	r3, #255	; 0xff
    21b6:	2204      	movs	r2, #4
    21b8:	701a      	strb	r2, [r3, #0]
    21ba:	e7d3      	b.n	2164 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    21bc:	6802      	ldr	r2, [r0, #0]
    21be:	015b      	lsls	r3, r3, #5
    21c0:	18d3      	adds	r3, r2, r3
    21c2:	3309      	adds	r3, #9
    21c4:	33ff      	adds	r3, #255	; 0xff
    21c6:	2208      	movs	r2, #8
    21c8:	701a      	strb	r2, [r3, #0]
    21ca:	e7cb      	b.n	2164 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    21cc:	2a02      	cmp	r2, #2
    21ce:	d1bd      	bne.n	214c <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    21d0:	6802      	ldr	r2, [r0, #0]
    21d2:	015b      	lsls	r3, r3, #5
    21d4:	18d3      	adds	r3, r2, r3
    21d6:	3309      	adds	r3, #9
    21d8:	33ff      	adds	r3, #255	; 0xff
    21da:	2210      	movs	r2, #16
    21dc:	701a      	strb	r2, [r3, #0]
    21de:	e7c1      	b.n	2164 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    21e0:	6802      	ldr	r2, [r0, #0]
    21e2:	015b      	lsls	r3, r3, #5
    21e4:	18d3      	adds	r3, r2, r3
    21e6:	3309      	adds	r3, #9
    21e8:	33ff      	adds	r3, #255	; 0xff
    21ea:	2240      	movs	r2, #64	; 0x40
    21ec:	701a      	strb	r2, [r3, #0]
    21ee:	e7b9      	b.n	2164 <usb_device_endpoint_disable_callback+0x40>
    21f0:	00004a94 	.word	0x00004a94

000021f4 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    21f4:	2300      	movs	r3, #0
    21f6:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    21f8:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    21fa:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    21fc:	3301      	adds	r3, #1
    21fe:	70c3      	strb	r3, [r0, #3]
}
    2200:	4770      	bx	lr
	...

00002204 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2206:	780c      	ldrb	r4, [r1, #0]
    2208:	230f      	movs	r3, #15
    220a:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    220c:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    220e:	78ca      	ldrb	r2, [r1, #3]
    2210:	2a04      	cmp	r2, #4
    2212:	d870      	bhi.n	22f6 <usb_device_endpoint_set_config+0xf2>
    2214:	0092      	lsls	r2, r2, #2
    2216:	4d89      	ldr	r5, [pc, #548]	; (243c <usb_device_endpoint_set_config+0x238>)
    2218:	58aa      	ldr	r2, [r5, r2]
    221a:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    221c:	6802      	ldr	r2, [r0, #0]
    221e:	3308      	adds	r3, #8
    2220:	015b      	lsls	r3, r3, #5
    2222:	2100      	movs	r1, #0
    2224:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    2226:	2200      	movs	r2, #0
    2228:	e082      	b.n	2330 <usb_device_endpoint_set_config+0x12c>
    222a:	015c      	lsls	r4, r3, #5
    222c:	6802      	ldr	r2, [r0, #0]
    222e:	4694      	mov	ip, r2
    2230:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2232:	2280      	movs	r2, #128	; 0x80
    2234:	0052      	lsls	r2, r2, #1
    2236:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    2238:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    223a:	076d      	lsls	r5, r5, #29
    223c:	d178      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    223e:	32e4      	adds	r2, #228	; 0xe4
    2240:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2242:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    2244:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2246:	422e      	tst	r6, r5
    2248:	d172      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    224a:	3d5f      	subs	r5, #95	; 0x5f
    224c:	32e4      	adds	r2, #228	; 0xe4
    224e:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2250:	001a      	movs	r2, r3
    2252:	3208      	adds	r2, #8
    2254:	0152      	lsls	r2, r2, #5
    2256:	6804      	ldr	r4, [r0, #0]
    2258:	18a4      	adds	r4, r4, r2
    225a:	352f      	adds	r5, #47	; 0x2f
    225c:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    225e:	6800      	ldr	r0, [r0, #0]
    2260:	1882      	adds	r2, r0, r2
    2262:	2080      	movs	r0, #128	; 0x80
    2264:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    2266:	788a      	ldrb	r2, [r1, #2]
    2268:	2a00      	cmp	r2, #0
    226a:	d01f      	beq.n	22ac <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    226c:	0158      	lsls	r0, r3, #5
    226e:	4a74      	ldr	r2, [pc, #464]	; (2440 <usb_device_endpoint_set_config+0x23c>)
    2270:	1812      	adds	r2, r2, r0
    2272:	6854      	ldr	r4, [r2, #4]
    2274:	2080      	movs	r0, #128	; 0x80
    2276:	0600      	lsls	r0, r0, #24
    2278:	4304      	orrs	r4, r0
    227a:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    227c:	6954      	ldr	r4, [r2, #20]
    227e:	4320      	orrs	r0, r4
    2280:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2282:	2507      	movs	r5, #7
    2284:	784c      	ldrb	r4, [r1, #1]
    2286:	015a      	lsls	r2, r3, #5
    2288:	4b6d      	ldr	r3, [pc, #436]	; (2440 <usb_device_endpoint_set_config+0x23c>)
    228a:	189b      	adds	r3, r3, r2
    228c:	6858      	ldr	r0, [r3, #4]
    228e:	402c      	ands	r4, r5
    2290:	0724      	lsls	r4, r4, #28
    2292:	4e6c      	ldr	r6, [pc, #432]	; (2444 <usb_device_endpoint_set_config+0x240>)
    2294:	4030      	ands	r0, r6
    2296:	4320      	orrs	r0, r4
    2298:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    229a:	7849      	ldrb	r1, [r1, #1]
    229c:	695a      	ldr	r2, [r3, #20]
    229e:	4029      	ands	r1, r5
    22a0:	0709      	lsls	r1, r1, #28
    22a2:	4032      	ands	r2, r6
    22a4:	430a      	orrs	r2, r1
    22a6:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    22a8:	2200      	movs	r2, #0
    22aa:	e041      	b.n	2330 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    22ac:	0158      	lsls	r0, r3, #5
    22ae:	4a64      	ldr	r2, [pc, #400]	; (2440 <usb_device_endpoint_set_config+0x23c>)
    22b0:	1812      	adds	r2, r2, r0
    22b2:	6850      	ldr	r0, [r2, #4]
    22b4:	0040      	lsls	r0, r0, #1
    22b6:	0840      	lsrs	r0, r0, #1
    22b8:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    22ba:	6950      	ldr	r0, [r2, #20]
    22bc:	0040      	lsls	r0, r0, #1
    22be:	0840      	lsrs	r0, r0, #1
    22c0:	6150      	str	r0, [r2, #20]
    22c2:	e7de      	b.n	2282 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    22c4:	2c00      	cmp	r4, #0
    22c6:	db35      	blt.n	2334 <usb_device_endpoint_set_config+0x130>
    22c8:	015d      	lsls	r5, r3, #5
    22ca:	6802      	ldr	r2, [r0, #0]
    22cc:	4694      	mov	ip, r2
    22ce:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    22d0:	2280      	movs	r2, #128	; 0x80
    22d2:	0052      	lsls	r2, r2, #1
    22d4:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    22d6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    22d8:	0776      	lsls	r6, r6, #29
    22da:	d129      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    22dc:	2680      	movs	r6, #128	; 0x80
    22de:	0076      	lsls	r6, r6, #1
    22e0:	5daa      	ldrb	r2, [r5, r6]
    22e2:	2702      	movs	r7, #2
    22e4:	433a      	orrs	r2, r7
    22e6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    22e8:	6802      	ldr	r2, [r0, #0]
    22ea:	0018      	movs	r0, r3
    22ec:	3008      	adds	r0, #8
    22ee:	0140      	lsls	r0, r0, #5
    22f0:	1812      	adds	r2, r2, r0
    22f2:	2040      	movs	r0, #64	; 0x40
    22f4:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    22f6:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    22f8:	784f      	ldrb	r7, [r1, #1]
    22fa:	005d      	lsls	r5, r3, #1
    22fc:	18ad      	adds	r5, r5, r2
    22fe:	012d      	lsls	r5, r5, #4
    2300:	4e4f      	ldr	r6, [pc, #316]	; (2440 <usb_device_endpoint_set_config+0x23c>)
    2302:	1975      	adds	r5, r6, r5
    2304:	6868      	ldr	r0, [r5, #4]
    2306:	2407      	movs	r4, #7
    2308:	403c      	ands	r4, r7
    230a:	0724      	lsls	r4, r4, #28
    230c:	4e4d      	ldr	r6, [pc, #308]	; (2444 <usb_device_endpoint_set_config+0x240>)
    230e:	4030      	ands	r0, r6
    2310:	4320      	orrs	r0, r4
    2312:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    2314:	7889      	ldrb	r1, [r1, #2]
    2316:	2900      	cmp	r1, #0
    2318:	d000      	beq.n	231c <usb_device_endpoint_set_config+0x118>
    231a:	e088      	b.n	242e <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    231c:	005b      	lsls	r3, r3, #1
    231e:	189b      	adds	r3, r3, r2
    2320:	011b      	lsls	r3, r3, #4
    2322:	4a47      	ldr	r2, [pc, #284]	; (2440 <usb_device_endpoint_set_config+0x23c>)
    2324:	18d3      	adds	r3, r2, r3
    2326:	685a      	ldr	r2, [r3, #4]
    2328:	0052      	lsls	r2, r2, #1
    232a:	0852      	lsrs	r2, r2, #1
    232c:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    232e:	2200      	movs	r2, #0
}
    2330:	0010      	movs	r0, r2
    2332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2334:	015d      	lsls	r5, r3, #5
    2336:	6802      	ldr	r2, [r0, #0]
    2338:	4694      	mov	ip, r2
    233a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    233c:	2280      	movs	r2, #128	; 0x80
    233e:	0052      	lsls	r2, r2, #1
    2340:	5caf      	ldrb	r7, [r5, r2]
    2342:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2344:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2346:	4237      	tst	r7, r6
    2348:	d1f2      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    234a:	3690      	adds	r6, #144	; 0x90
    234c:	5daa      	ldrb	r2, [r5, r6]
    234e:	2720      	movs	r7, #32
    2350:	433a      	orrs	r2, r7
    2352:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2354:	6802      	ldr	r2, [r0, #0]
    2356:	0018      	movs	r0, r3
    2358:	3008      	adds	r0, #8
    235a:	0140      	lsls	r0, r0, #5
    235c:	1812      	adds	r2, r2, r0
    235e:	2080      	movs	r0, #128	; 0x80
    2360:	7110      	strb	r0, [r2, #4]
    2362:	e7c8      	b.n	22f6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2364:	2c00      	cmp	r4, #0
    2366:	db17      	blt.n	2398 <usb_device_endpoint_set_config+0x194>
    2368:	015d      	lsls	r5, r3, #5
    236a:	6802      	ldr	r2, [r0, #0]
    236c:	4694      	mov	ip, r2
    236e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2370:	2280      	movs	r2, #128	; 0x80
    2372:	0052      	lsls	r2, r2, #1
    2374:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2376:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2378:	0776      	lsls	r6, r6, #29
    237a:	d1d9      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    237c:	2680      	movs	r6, #128	; 0x80
    237e:	0076      	lsls	r6, r6, #1
    2380:	5daa      	ldrb	r2, [r5, r6]
    2382:	2703      	movs	r7, #3
    2384:	433a      	orrs	r2, r7
    2386:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2388:	6802      	ldr	r2, [r0, #0]
    238a:	0018      	movs	r0, r3
    238c:	3008      	adds	r0, #8
    238e:	0140      	lsls	r0, r0, #5
    2390:	1812      	adds	r2, r2, r0
    2392:	2040      	movs	r0, #64	; 0x40
    2394:	7150      	strb	r0, [r2, #5]
    2396:	e7ae      	b.n	22f6 <usb_device_endpoint_set_config+0xf2>
    2398:	015d      	lsls	r5, r3, #5
    239a:	6802      	ldr	r2, [r0, #0]
    239c:	4694      	mov	ip, r2
    239e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    23a0:	2280      	movs	r2, #128	; 0x80
    23a2:	0052      	lsls	r2, r2, #1
    23a4:	5caf      	ldrb	r7, [r5, r2]
    23a6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    23a8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    23aa:	4237      	tst	r7, r6
    23ac:	d1c0      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    23ae:	3690      	adds	r6, #144	; 0x90
    23b0:	5daa      	ldrb	r2, [r5, r6]
    23b2:	2730      	movs	r7, #48	; 0x30
    23b4:	433a      	orrs	r2, r7
    23b6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    23b8:	6802      	ldr	r2, [r0, #0]
    23ba:	0018      	movs	r0, r3
    23bc:	3008      	adds	r0, #8
    23be:	0140      	lsls	r0, r0, #5
    23c0:	1812      	adds	r2, r2, r0
    23c2:	2080      	movs	r0, #128	; 0x80
    23c4:	7110      	strb	r0, [r2, #4]
    23c6:	e796      	b.n	22f6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    23c8:	2c00      	cmp	r4, #0
    23ca:	db17      	blt.n	23fc <usb_device_endpoint_set_config+0x1f8>
    23cc:	015d      	lsls	r5, r3, #5
    23ce:	6802      	ldr	r2, [r0, #0]
    23d0:	4694      	mov	ip, r2
    23d2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    23d4:	2280      	movs	r2, #128	; 0x80
    23d6:	0052      	lsls	r2, r2, #1
    23d8:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    23da:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    23dc:	0776      	lsls	r6, r6, #29
    23de:	d1a7      	bne.n	2330 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    23e0:	2680      	movs	r6, #128	; 0x80
    23e2:	0076      	lsls	r6, r6, #1
    23e4:	5daa      	ldrb	r2, [r5, r6]
    23e6:	2704      	movs	r7, #4
    23e8:	433a      	orrs	r2, r7
    23ea:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    23ec:	6802      	ldr	r2, [r0, #0]
    23ee:	0018      	movs	r0, r3
    23f0:	3008      	adds	r0, #8
    23f2:	0140      	lsls	r0, r0, #5
    23f4:	1812      	adds	r2, r2, r0
    23f6:	2040      	movs	r0, #64	; 0x40
    23f8:	7150      	strb	r0, [r2, #5]
    23fa:	e77c      	b.n	22f6 <usb_device_endpoint_set_config+0xf2>
    23fc:	015d      	lsls	r5, r3, #5
    23fe:	6802      	ldr	r2, [r0, #0]
    2400:	4694      	mov	ip, r2
    2402:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2404:	2280      	movs	r2, #128	; 0x80
    2406:	0052      	lsls	r2, r2, #1
    2408:	5caf      	ldrb	r7, [r5, r2]
    240a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    240c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    240e:	4237      	tst	r7, r6
    2410:	d000      	beq.n	2414 <usb_device_endpoint_set_config+0x210>
    2412:	e78d      	b.n	2330 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2414:	3690      	adds	r6, #144	; 0x90
    2416:	5daa      	ldrb	r2, [r5, r6]
    2418:	2740      	movs	r7, #64	; 0x40
    241a:	433a      	orrs	r2, r7
    241c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    241e:	6802      	ldr	r2, [r0, #0]
    2420:	0018      	movs	r0, r3
    2422:	3008      	adds	r0, #8
    2424:	0140      	lsls	r0, r0, #5
    2426:	1812      	adds	r2, r2, r0
    2428:	2080      	movs	r0, #128	; 0x80
    242a:	7110      	strb	r0, [r2, #4]
    242c:	e763      	b.n	22f6 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    242e:	6869      	ldr	r1, [r5, #4]
    2430:	2380      	movs	r3, #128	; 0x80
    2432:	061b      	lsls	r3, r3, #24
    2434:	430b      	orrs	r3, r1
    2436:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    2438:	2200      	movs	r2, #0
    243a:	e779      	b.n	2330 <usb_device_endpoint_set_config+0x12c>
    243c:	00004a70 	.word	0x00004a70
    2440:	200007d4 	.word	0x200007d4
    2444:	8fffffff 	.word	0x8fffffff

00002448 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2448:	230f      	movs	r3, #15
    244a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    244c:	b249      	sxtb	r1, r1
    244e:	2900      	cmp	r1, #0
    2450:	db0a      	blt.n	2468 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2452:	3308      	adds	r3, #8
    2454:	015b      	lsls	r3, r3, #5
    2456:	6802      	ldr	r2, [r0, #0]
    2458:	18d2      	adds	r2, r2, r3
    245a:	2140      	movs	r1, #64	; 0x40
    245c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    245e:	6802      	ldr	r2, [r0, #0]
    2460:	18d3      	adds	r3, r2, r3
    2462:	2201      	movs	r2, #1
    2464:	71da      	strb	r2, [r3, #7]
	}
}
    2466:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2468:	3308      	adds	r3, #8
    246a:	015b      	lsls	r3, r3, #5
    246c:	6802      	ldr	r2, [r0, #0]
    246e:	18d2      	adds	r2, r2, r3
    2470:	2180      	movs	r1, #128	; 0x80
    2472:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2474:	6802      	ldr	r2, [r0, #0]
    2476:	18d3      	adds	r3, r2, r3
    2478:	2202      	movs	r2, #2
    247a:	71da      	strb	r2, [r3, #7]
    247c:	e7f3      	b.n	2466 <usb_device_endpoint_abort_job+0x1e>

0000247e <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    247e:	230f      	movs	r3, #15
    2480:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2482:	b249      	sxtb	r1, r1
    2484:	2900      	cmp	r1, #0
    2486:	db07      	blt.n	2498 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2488:	6802      	ldr	r2, [r0, #0]
    248a:	3308      	adds	r3, #8
    248c:	015b      	lsls	r3, r3, #5
    248e:	18d3      	adds	r3, r2, r3
    2490:	7998      	ldrb	r0, [r3, #6]
    2492:	06c0      	lsls	r0, r0, #27
    2494:	0fc0      	lsrs	r0, r0, #31
	}
}
    2496:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2498:	6802      	ldr	r2, [r0, #0]
    249a:	3308      	adds	r3, #8
    249c:	015b      	lsls	r3, r3, #5
    249e:	18d3      	adds	r3, r2, r3
    24a0:	7998      	ldrb	r0, [r3, #6]
    24a2:	0680      	lsls	r0, r0, #26
    24a4:	0fc0      	lsrs	r0, r0, #31
    24a6:	e7f6      	b.n	2496 <usb_device_endpoint_is_halted+0x18>

000024a8 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24a8:	230f      	movs	r3, #15
    24aa:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    24ac:	b249      	sxtb	r1, r1
    24ae:	2900      	cmp	r1, #0
    24b0:	db06      	blt.n	24c0 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    24b2:	6802      	ldr	r2, [r0, #0]
    24b4:	3308      	adds	r3, #8
    24b6:	015b      	lsls	r3, r3, #5
    24b8:	18d3      	adds	r3, r2, r3
    24ba:	2210      	movs	r2, #16
    24bc:	715a      	strb	r2, [r3, #5]
	}
}
    24be:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    24c0:	6802      	ldr	r2, [r0, #0]
    24c2:	3308      	adds	r3, #8
    24c4:	015b      	lsls	r3, r3, #5
    24c6:	18d3      	adds	r3, r2, r3
    24c8:	2220      	movs	r2, #32
    24ca:	715a      	strb	r2, [r3, #5]
    24cc:	e7f7      	b.n	24be <usb_device_endpoint_set_halt+0x16>

000024ce <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    24ce:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24d0:	230f      	movs	r3, #15
    24d2:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    24d4:	b249      	sxtb	r1, r1
    24d6:	2900      	cmp	r1, #0
    24d8:	db1d      	blt.n	2516 <usb_device_endpoint_clear_halt+0x48>
    24da:	0159      	lsls	r1, r3, #5
    24dc:	6802      	ldr	r2, [r0, #0]
    24de:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    24e0:	2483      	movs	r4, #131	; 0x83
    24e2:	0064      	lsls	r4, r4, #1
    24e4:	5d14      	ldrb	r4, [r2, r4]
    24e6:	06e4      	lsls	r4, r4, #27
    24e8:	d514      	bpl.n	2514 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    24ea:	2510      	movs	r5, #16
    24ec:	2482      	movs	r4, #130	; 0x82
    24ee:	0064      	lsls	r4, r4, #1
    24f0:	5515      	strb	r5, [r2, r4]
    24f2:	6802      	ldr	r2, [r0, #0]
    24f4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    24f6:	2108      	movs	r1, #8
    24f8:	31ff      	adds	r1, #255	; 0xff
    24fa:	5c51      	ldrb	r1, [r2, r1]
    24fc:	0689      	lsls	r1, r1, #26
    24fe:	d509      	bpl.n	2514 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2500:	3ce4      	subs	r4, #228	; 0xe4
    2502:	2108      	movs	r1, #8
    2504:	31ff      	adds	r1, #255	; 0xff
    2506:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2508:	6802      	ldr	r2, [r0, #0]
    250a:	3308      	adds	r3, #8
    250c:	015b      	lsls	r3, r3, #5
    250e:	18d3      	adds	r3, r2, r3
    2510:	2201      	movs	r2, #1
    2512:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2514:	bd30      	pop	{r4, r5, pc}
    2516:	0159      	lsls	r1, r3, #5
    2518:	6802      	ldr	r2, [r0, #0]
    251a:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    251c:	2483      	movs	r4, #131	; 0x83
    251e:	0064      	lsls	r4, r4, #1
    2520:	5d14      	ldrb	r4, [r2, r4]
    2522:	06a4      	lsls	r4, r4, #26
    2524:	d5f6      	bpl.n	2514 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    2526:	2520      	movs	r5, #32
    2528:	2482      	movs	r4, #130	; 0x82
    252a:	0064      	lsls	r4, r4, #1
    252c:	5515      	strb	r5, [r2, r4]
    252e:	6802      	ldr	r2, [r0, #0]
    2530:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2532:	2108      	movs	r1, #8
    2534:	31ff      	adds	r1, #255	; 0xff
    2536:	5c51      	ldrb	r1, [r2, r1]
    2538:	0649      	lsls	r1, r1, #25
    253a:	d5eb      	bpl.n	2514 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    253c:	3cc4      	subs	r4, #196	; 0xc4
    253e:	2108      	movs	r1, #8
    2540:	31ff      	adds	r1, #255	; 0xff
    2542:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2544:	6802      	ldr	r2, [r0, #0]
    2546:	3308      	adds	r3, #8
    2548:	015b      	lsls	r3, r3, #5
    254a:	18d3      	adds	r3, r2, r3
    254c:	2202      	movs	r2, #2
    254e:	711a      	strb	r2, [r3, #4]
    2550:	e7e0      	b.n	2514 <usb_device_endpoint_clear_halt+0x46>
	...

00002554 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2554:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2556:	000c      	movs	r4, r1
    2558:	3408      	adds	r4, #8
    255a:	0164      	lsls	r4, r4, #5
    255c:	6805      	ldr	r5, [r0, #0]
    255e:	5d64      	ldrb	r4, [r4, r5]
    2560:	0664      	lsls	r4, r4, #25
    2562:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2564:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2566:	2c00      	cmp	r4, #0
    2568:	d101      	bne.n	256e <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    256a:	0028      	movs	r0, r5
    256c:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    256e:	014c      	lsls	r4, r1, #5
    2570:	4d0b      	ldr	r5, [pc, #44]	; (25a0 <usb_device_endpoint_write_buffer_job+0x4c>)
    2572:	192d      	adds	r5, r5, r4
    2574:	002c      	movs	r4, r5
    2576:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2578:	696a      	ldr	r2, [r5, #20]
    257a:	4d0a      	ldr	r5, [pc, #40]	; (25a4 <usb_device_endpoint_write_buffer_job+0x50>)
    257c:	402a      	ands	r2, r5
    257e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2580:	6962      	ldr	r2, [r4, #20]
    2582:	049b      	lsls	r3, r3, #18
    2584:	0c9b      	lsrs	r3, r3, #18
    2586:	0b92      	lsrs	r2, r2, #14
    2588:	0392      	lsls	r2, r2, #14
    258a:	4313      	orrs	r3, r2
    258c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    258e:	6803      	ldr	r3, [r0, #0]
    2590:	3108      	adds	r1, #8
    2592:	0149      	lsls	r1, r1, #5
    2594:	1859      	adds	r1, r3, r1
    2596:	2380      	movs	r3, #128	; 0x80
    2598:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    259a:	2500      	movs	r5, #0
    259c:	e7e5      	b.n	256a <usb_device_endpoint_write_buffer_job+0x16>
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	200007d4 	.word	0x200007d4
    25a4:	f0003fff 	.word	0xf0003fff

000025a8 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    25a8:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    25aa:	000c      	movs	r4, r1
    25ac:	3408      	adds	r4, #8
    25ae:	0164      	lsls	r4, r4, #5
    25b0:	6805      	ldr	r5, [r0, #0]
    25b2:	5d64      	ldrb	r4, [r4, r5]
    25b4:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    25b6:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    25b8:	2c00      	cmp	r4, #0
    25ba:	d101      	bne.n	25c0 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    25bc:	0028      	movs	r0, r5
    25be:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    25c0:	4c0b      	ldr	r4, [pc, #44]	; (25f0 <usb_device_endpoint_read_buffer_job+0x48>)
    25c2:	014d      	lsls	r5, r1, #5
    25c4:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    25c6:	1962      	adds	r2, r4, r5
    25c8:	6854      	ldr	r4, [r2, #4]
    25ca:	049b      	lsls	r3, r3, #18
    25cc:	091b      	lsrs	r3, r3, #4
    25ce:	4d09      	ldr	r5, [pc, #36]	; (25f4 <usb_device_endpoint_read_buffer_job+0x4c>)
    25d0:	402c      	ands	r4, r5
    25d2:	4323      	orrs	r3, r4
    25d4:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    25d6:	6853      	ldr	r3, [r2, #4]
    25d8:	0b9b      	lsrs	r3, r3, #14
    25da:	039b      	lsls	r3, r3, #14
    25dc:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    25de:	6803      	ldr	r3, [r0, #0]
    25e0:	3108      	adds	r1, #8
    25e2:	0149      	lsls	r1, r1, #5
    25e4:	1859      	adds	r1, r3, r1
    25e6:	2340      	movs	r3, #64	; 0x40
    25e8:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    25ea:	2500      	movs	r5, #0
    25ec:	e7e6      	b.n	25bc <usb_device_endpoint_read_buffer_job+0x14>
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	200007d4 	.word	0x200007d4
    25f4:	f0003fff 	.word	0xf0003fff

000025f8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    25f8:	4b09      	ldr	r3, [pc, #36]	; (2620 <usb_device_endpoint_setup_buffer_job+0x28>)
    25fa:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    25fc:	685a      	ldr	r2, [r3, #4]
    25fe:	4909      	ldr	r1, [pc, #36]	; (2624 <usb_device_endpoint_setup_buffer_job+0x2c>)
    2600:	4011      	ands	r1, r2
    2602:	2280      	movs	r2, #128	; 0x80
    2604:	0292      	lsls	r2, r2, #10
    2606:	430a      	orrs	r2, r1
    2608:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    260a:	685a      	ldr	r2, [r3, #4]
    260c:	0b92      	lsrs	r2, r2, #14
    260e:	0392      	lsls	r2, r2, #14
    2610:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2612:	6802      	ldr	r2, [r0, #0]
    2614:	2140      	movs	r1, #64	; 0x40
    2616:	2382      	movs	r3, #130	; 0x82
    2618:	005b      	lsls	r3, r3, #1
    261a:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    261c:	2000      	movs	r0, #0
    261e:	4770      	bx	lr
    2620:	200007d4 	.word	0x200007d4
    2624:	f0003fff 	.word	0xf0003fff

00002628 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    2628:	6802      	ldr	r2, [r0, #0]
    262a:	7813      	ldrb	r3, [r2, #0]
    262c:	2102      	movs	r1, #2
    262e:	430b      	orrs	r3, r1
    2630:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    2632:	6802      	ldr	r2, [r0, #0]
    2634:	7893      	ldrb	r3, [r2, #2]
    2636:	2b02      	cmp	r3, #2
    2638:	d0fc      	beq.n	2634 <usb_enable+0xc>
}
    263a:	4770      	bx	lr

0000263c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    263c:	b5f0      	push	{r4, r5, r6, r7, lr}
    263e:	46de      	mov	lr, fp
    2640:	4657      	mov	r7, sl
    2642:	464e      	mov	r6, r9
    2644:	4645      	mov	r5, r8
    2646:	b5e0      	push	{r5, r6, r7, lr}
    2648:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    264a:	4bc4      	ldr	r3, [pc, #784]	; (295c <USB_Handler+0x320>)
    264c:	681f      	ldr	r7, [r3, #0]
    264e:	683d      	ldr	r5, [r7, #0]
    2650:	782b      	ldrb	r3, [r5, #0]
    2652:	09db      	lsrs	r3, r3, #7
    2654:	d114      	bne.n	2680 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2656:	8c2e      	ldrh	r6, [r5, #32]
    2658:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    265a:	2e00      	cmp	r6, #0
    265c:	d000      	beq.n	2660 <USB_Handler+0x24>
    265e:	e22d      	b.n	2abc <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2660:	8bae      	ldrh	r6, [r5, #28]
    2662:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2664:	23ab      	movs	r3, #171	; 0xab
    2666:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    2668:	5afb      	ldrh	r3, [r7, r3]
    266a:	22aa      	movs	r2, #170	; 0xaa
    266c:	0052      	lsls	r2, r2, #1
    266e:	5abd      	ldrh	r5, [r7, r2]
    2670:	401d      	ands	r5, r3
    2672:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2674:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    2676:	4fba      	ldr	r7, [pc, #744]	; (2960 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2678:	4bb8      	ldr	r3, [pc, #736]	; (295c <USB_Handler+0x320>)
    267a:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    267c:	4698      	mov	r8, r3
    267e:	e208      	b.n	2a92 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2680:	8c2b      	ldrh	r3, [r5, #32]
    2682:	b29b      	uxth	r3, r3
    2684:	2b00      	cmp	r3, #0
    2686:	d100      	bne.n	268a <USB_Handler+0x4e>
    2688:	e13d      	b.n	2906 <USB_Handler+0x2ca>
    268a:	8c28      	ldrh	r0, [r5, #32]
    268c:	b280      	uxth	r0, r0
    268e:	4bb5      	ldr	r3, [pc, #724]	; (2964 <USB_Handler+0x328>)
    2690:	4798      	blx	r3
    2692:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    2694:	281f      	cmp	r0, #31
    2696:	d900      	bls.n	269a <USB_Handler+0x5e>
    2698:	e135      	b.n	2906 <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    269a:	0003      	movs	r3, r0
    269c:	3308      	adds	r3, #8
    269e:	015b      	lsls	r3, r3, #5
    26a0:	18ed      	adds	r5, r5, r3
    26a2:	79ed      	ldrb	r5, [r5, #7]
    26a4:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    26a6:	07ab      	lsls	r3, r5, #30
    26a8:	d041      	beq.n	272e <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    26aa:	4aaf      	ldr	r2, [pc, #700]	; (2968 <USB_Handler+0x32c>)
    26ac:	2301      	movs	r3, #1
    26ae:	4083      	lsls	r3, r0
    26b0:	6811      	ldr	r1, [r2, #0]
    26b2:	4399      	bics	r1, r3
    26b4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    26b6:	0003      	movs	r3, r0
    26b8:	3308      	adds	r3, #8
    26ba:	015b      	lsls	r3, r3, #5
    26bc:	683a      	ldr	r2, [r7, #0]
    26be:	4694      	mov	ip, r2
    26c0:	4463      	add	r3, ip
    26c2:	2203      	movs	r2, #3
    26c4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    26c6:	183b      	adds	r3, r7, r0
    26c8:	33ae      	adds	r3, #174	; 0xae
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	07db      	lsls	r3, r3, #31
    26ce:	d52e      	bpl.n	272e <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    26d0:	4ba6      	ldr	r3, [pc, #664]	; (296c <USB_Handler+0x330>)
    26d2:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    26d4:	683a      	ldr	r2, [r7, #0]
    26d6:	0003      	movs	r3, r0
    26d8:	3308      	adds	r3, #8
    26da:	015b      	lsls	r3, r3, #5
    26dc:	5c9b      	ldrb	r3, [r3, r2]
    26de:	079b      	lsls	r3, r3, #30
    26e0:	0f9b      	lsrs	r3, r3, #30
    26e2:	2b01      	cmp	r3, #1
    26e4:	d100      	bne.n	26e8 <USB_Handler+0xac>
    26e6:	e094      	b.n	2812 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    26e8:	0142      	lsls	r2, r0, #5
    26ea:	4ba1      	ldr	r3, [pc, #644]	; (2970 <USB_Handler+0x334>)
    26ec:	189b      	adds	r3, r3, r2
    26ee:	685a      	ldr	r2, [r3, #4]
    26f0:	0112      	lsls	r2, r2, #4
    26f2:	0c92      	lsrs	r2, r2, #18
    26f4:	b290      	uxth	r0, r2
    26f6:	499d      	ldr	r1, [pc, #628]	; (296c <USB_Handler+0x330>)
    26f8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    26fa:	685a      	ldr	r2, [r3, #4]
    26fc:	0492      	lsls	r2, r2, #18
    26fe:	0c92      	lsrs	r2, r2, #18
    2700:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2702:	685a      	ldr	r2, [r3, #4]
    2704:	499b      	ldr	r1, [pc, #620]	; (2974 <USB_Handler+0x338>)
    2706:	400a      	ands	r2, r1
    2708:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    270a:	2800      	cmp	r0, #0
    270c:	d107      	bne.n	271e <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    270e:	0162      	lsls	r2, r4, #5
    2710:	4b97      	ldr	r3, [pc, #604]	; (2970 <USB_Handler+0x334>)
    2712:	189b      	adds	r3, r3, r2
    2714:	685b      	ldr	r3, [r3, #4]
    2716:	049b      	lsls	r3, r3, #18
    2718:	0c9b      	lsrs	r3, r3, #18
    271a:	4a94      	ldr	r2, [pc, #592]	; (296c <USB_Handler+0x330>)
    271c:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    271e:	4b8f      	ldr	r3, [pc, #572]	; (295c <USB_Handler+0x320>)
    2720:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    2722:	1ca3      	adds	r3, r4, #2
    2724:	011b      	lsls	r3, r3, #4
    2726:	18c3      	adds	r3, r0, r3
    2728:	685b      	ldr	r3, [r3, #4]
    272a:	4990      	ldr	r1, [pc, #576]	; (296c <USB_Handler+0x330>)
    272c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    272e:	076b      	lsls	r3, r5, #29
    2730:	d51f      	bpl.n	2772 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2732:	4b8a      	ldr	r3, [pc, #552]	; (295c <USB_Handler+0x320>)
    2734:	6818      	ldr	r0, [r3, #0]
    2736:	6802      	ldr	r2, [r0, #0]
    2738:	0023      	movs	r3, r4
    273a:	3308      	adds	r3, #8
    273c:	015b      	lsls	r3, r3, #5
    273e:	5c9b      	ldrb	r3, [r3, r2]
    2740:	069b      	lsls	r3, r3, #26
    2742:	0f5b      	lsrs	r3, r3, #29
    2744:	2b02      	cmp	r3, #2
    2746:	d075      	beq.n	2834 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    2748:	0023      	movs	r3, r4
    274a:	3308      	adds	r3, #8
    274c:	015b      	lsls	r3, r3, #5
    274e:	5c9b      	ldrb	r3, [r3, r2]
    2750:	069b      	lsls	r3, r3, #26
    2752:	0f5b      	lsrs	r3, r3, #29
    2754:	2b03      	cmp	r3, #3
    2756:	d100      	bne.n	275a <USB_Handler+0x11e>
    2758:	e09e      	b.n	2898 <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    275a:	0162      	lsls	r2, r4, #5
    275c:	4b84      	ldr	r3, [pc, #528]	; (2970 <USB_Handler+0x334>)
    275e:	189b      	adds	r3, r3, r2
    2760:	2200      	movs	r2, #0
    2762:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2764:	6803      	ldr	r3, [r0, #0]
    2766:	0022      	movs	r2, r4
    2768:	3208      	adds	r2, #8
    276a:	0152      	lsls	r2, r2, #5
    276c:	189b      	adds	r3, r3, r2
    276e:	2204      	movs	r2, #4
    2770:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2772:	072b      	lsls	r3, r5, #28
    2774:	d515      	bpl.n	27a2 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2776:	4a7c      	ldr	r2, [pc, #496]	; (2968 <USB_Handler+0x32c>)
    2778:	2301      	movs	r3, #1
    277a:	40a3      	lsls	r3, r4
    277c:	6811      	ldr	r1, [r2, #0]
    277e:	4399      	bics	r1, r3
    2780:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2782:	4b76      	ldr	r3, [pc, #472]	; (295c <USB_Handler+0x320>)
    2784:	6818      	ldr	r0, [r3, #0]
    2786:	0023      	movs	r3, r4
    2788:	3308      	adds	r3, #8
    278a:	015b      	lsls	r3, r3, #5
    278c:	6802      	ldr	r2, [r0, #0]
    278e:	4694      	mov	ip, r2
    2790:	4463      	add	r3, ip
    2792:	2208      	movs	r2, #8
    2794:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2796:	1903      	adds	r3, r0, r4
    2798:	33ae      	adds	r3, #174	; 0xae
    279a:	781b      	ldrb	r3, [r3, #0]
    279c:	079b      	lsls	r3, r3, #30
    279e:	d500      	bpl.n	27a2 <USB_Handler+0x166>
    27a0:	e094      	b.n	28cc <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    27a2:	06eb      	lsls	r3, r5, #27
    27a4:	d515      	bpl.n	27d2 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    27a6:	4a70      	ldr	r2, [pc, #448]	; (2968 <USB_Handler+0x32c>)
    27a8:	2301      	movs	r3, #1
    27aa:	40a3      	lsls	r3, r4
    27ac:	6811      	ldr	r1, [r2, #0]
    27ae:	4399      	bics	r1, r3
    27b0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    27b2:	4b6a      	ldr	r3, [pc, #424]	; (295c <USB_Handler+0x320>)
    27b4:	6818      	ldr	r0, [r3, #0]
    27b6:	0023      	movs	r3, r4
    27b8:	3308      	adds	r3, #8
    27ba:	015b      	lsls	r3, r3, #5
    27bc:	6802      	ldr	r2, [r0, #0]
    27be:	4694      	mov	ip, r2
    27c0:	4463      	add	r3, ip
    27c2:	2210      	movs	r2, #16
    27c4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    27c6:	1903      	adds	r3, r0, r4
    27c8:	33ae      	adds	r3, #174	; 0xae
    27ca:	781b      	ldrb	r3, [r3, #0]
    27cc:	075b      	lsls	r3, r3, #29
    27ce:	d500      	bpl.n	27d2 <USB_Handler+0x196>
    27d0:	e08a      	b.n	28e8 <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    27d2:	06ab      	lsls	r3, r5, #26
    27d4:	d400      	bmi.n	27d8 <USB_Handler+0x19c>
    27d6:	e12f      	b.n	2a38 <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    27d8:	4a63      	ldr	r2, [pc, #396]	; (2968 <USB_Handler+0x32c>)
    27da:	2301      	movs	r3, #1
    27dc:	40a3      	lsls	r3, r4
    27de:	6811      	ldr	r1, [r2, #0]
    27e0:	4399      	bics	r1, r3
    27e2:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    27e4:	4b5d      	ldr	r3, [pc, #372]	; (295c <USB_Handler+0x320>)
    27e6:	6818      	ldr	r0, [r3, #0]
    27e8:	0023      	movs	r3, r4
    27ea:	3308      	adds	r3, #8
    27ec:	015b      	lsls	r3, r3, #5
    27ee:	6802      	ldr	r2, [r0, #0]
    27f0:	4694      	mov	ip, r2
    27f2:	4463      	add	r3, ip
    27f4:	2220      	movs	r2, #32
    27f6:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    27f8:	1903      	adds	r3, r0, r4
    27fa:	33ae      	adds	r3, #174	; 0xae
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	071b      	lsls	r3, r3, #28
    2800:	d400      	bmi.n	2804 <USB_Handler+0x1c8>
    2802:	e119      	b.n	2a38 <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    2804:	4959      	ldr	r1, [pc, #356]	; (296c <USB_Handler+0x330>)
    2806:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    2808:	0124      	lsls	r4, r4, #4
    280a:	1904      	adds	r4, r0, r4
    280c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    280e:	4798      	blx	r3
    2810:	e112      	b.n	2a38 <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2812:	0142      	lsls	r2, r0, #5
    2814:	4b56      	ldr	r3, [pc, #344]	; (2970 <USB_Handler+0x334>)
    2816:	189b      	adds	r3, r3, r2
    2818:	685a      	ldr	r2, [r3, #4]
    281a:	0492      	lsls	r2, r2, #18
    281c:	0c92      	lsrs	r2, r2, #18
    281e:	4953      	ldr	r1, [pc, #332]	; (296c <USB_Handler+0x330>)
    2820:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2822:	685a      	ldr	r2, [r3, #4]
    2824:	0112      	lsls	r2, r2, #4
    2826:	0c92      	lsrs	r2, r2, #18
    2828:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    282a:	685a      	ldr	r2, [r3, #4]
    282c:	0b92      	lsrs	r2, r2, #14
    282e:	0392      	lsls	r2, r2, #14
    2830:	605a      	str	r2, [r3, #4]
    2832:	e774      	b.n	271e <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    2834:	0023      	movs	r3, r4
    2836:	3308      	adds	r3, #8
    2838:	015b      	lsls	r3, r3, #5
    283a:	5c9b      	ldrb	r3, [r3, r2]
    283c:	079b      	lsls	r3, r3, #30
    283e:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2840:	2b01      	cmp	r3, #1
    2842:	d181      	bne.n	2748 <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    2844:	0161      	lsls	r1, r4, #5
    2846:	4b4a      	ldr	r3, [pc, #296]	; (2970 <USB_Handler+0x334>)
    2848:	185b      	adds	r3, r3, r1
    284a:	3308      	adds	r3, #8
    284c:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    284e:	07db      	lsls	r3, r3, #31
    2850:	d400      	bmi.n	2854 <USB_Handler+0x218>
    2852:	e779      	b.n	2748 <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    2854:	4a44      	ldr	r2, [pc, #272]	; (2968 <USB_Handler+0x32c>)
    2856:	2301      	movs	r3, #1
    2858:	40a3      	lsls	r3, r4
    285a:	6811      	ldr	r1, [r2, #0]
    285c:	4399      	bics	r1, r3
    285e:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2860:	0162      	lsls	r2, r4, #5
    2862:	4b43      	ldr	r3, [pc, #268]	; (2970 <USB_Handler+0x334>)
    2864:	189b      	adds	r3, r3, r2
    2866:	2200      	movs	r2, #0
    2868:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    286a:	0023      	movs	r3, r4
    286c:	3308      	adds	r3, #8
    286e:	015b      	lsls	r3, r3, #5
    2870:	6802      	ldr	r2, [r0, #0]
    2872:	4694      	mov	ip, r2
    2874:	4463      	add	r3, ip
    2876:	2204      	movs	r2, #4
    2878:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    287a:	1903      	adds	r3, r0, r4
    287c:	33ae      	adds	r3, #174	; 0xae
    287e:	781b      	ldrb	r3, [r3, #0]
    2880:	079b      	lsls	r3, r3, #30
    2882:	d400      	bmi.n	2886 <USB_Handler+0x24a>
    2884:	e775      	b.n	2772 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    2886:	4939      	ldr	r1, [pc, #228]	; (296c <USB_Handler+0x330>)
    2888:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    288a:	2310      	movs	r3, #16
    288c:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    288e:	0123      	lsls	r3, r4, #4
    2890:	18c3      	adds	r3, r0, r3
    2892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2894:	4798      	blx	r3
    2896:	e76c      	b.n	2772 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    2898:	0023      	movs	r3, r4
    289a:	3308      	adds	r3, #8
    289c:	015b      	lsls	r3, r3, #5
    289e:	5c9b      	ldrb	r3, [r3, r2]
    28a0:	079b      	lsls	r3, r3, #30
    28a2:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    28a4:	2b01      	cmp	r3, #1
    28a6:	d000      	beq.n	28aa <USB_Handler+0x26e>
    28a8:	e757      	b.n	275a <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    28aa:	0162      	lsls	r2, r4, #5
    28ac:	4b30      	ldr	r3, [pc, #192]	; (2970 <USB_Handler+0x334>)
    28ae:	189b      	adds	r3, r3, r2
    28b0:	2200      	movs	r2, #0
    28b2:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    28b4:	0023      	movs	r3, r4
    28b6:	3308      	adds	r3, #8
    28b8:	015b      	lsls	r3, r3, #5
    28ba:	6802      	ldr	r2, [r0, #0]
    28bc:	18d2      	adds	r2, r2, r3
    28be:	2104      	movs	r1, #4
    28c0:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    28c2:	6802      	ldr	r2, [r0, #0]
    28c4:	18d3      	adds	r3, r2, r3
    28c6:	2210      	movs	r2, #16
    28c8:	715a      	strb	r2, [r3, #5]
    28ca:	e752      	b.n	2772 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    28cc:	4927      	ldr	r1, [pc, #156]	; (296c <USB_Handler+0x330>)
    28ce:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    28d0:	0162      	lsls	r2, r4, #5
    28d2:	4b27      	ldr	r3, [pc, #156]	; (2970 <USB_Handler+0x334>)
    28d4:	189b      	adds	r3, r3, r2
    28d6:	89db      	ldrh	r3, [r3, #14]
    28d8:	221f      	movs	r2, #31
    28da:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    28dc:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    28de:	0123      	lsls	r3, r4, #4
    28e0:	18c3      	adds	r3, r0, r3
    28e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28e4:	4798      	blx	r3
    28e6:	e75c      	b.n	27a2 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    28e8:	4920      	ldr	r1, [pc, #128]	; (296c <USB_Handler+0x330>)
    28ea:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    28ec:	0162      	lsls	r2, r4, #5
    28ee:	4b20      	ldr	r3, [pc, #128]	; (2970 <USB_Handler+0x334>)
    28f0:	189b      	adds	r3, r3, r2
    28f2:	685b      	ldr	r3, [r3, #4]
    28f4:	011b      	lsls	r3, r3, #4
    28f6:	0c9b      	lsrs	r3, r3, #18
    28f8:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    28fa:	0123      	lsls	r3, r4, #4
    28fc:	18c3      	adds	r3, r0, r3
    28fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2900:	2100      	movs	r1, #0
    2902:	4798      	blx	r3
    2904:	e765      	b.n	27d2 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    2906:	8bac      	ldrh	r4, [r5, #28]
    2908:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    290a:	0763      	lsls	r3, r4, #29
    290c:	d538      	bpl.n	2980 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    290e:	2304      	movs	r3, #4
    2910:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2912:	4b15      	ldr	r3, [pc, #84]	; (2968 <USB_Handler+0x32c>)
    2914:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    2916:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2918:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    291a:	2610      	movs	r6, #16
    291c:	e002      	b.n	2924 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    291e:	3301      	adds	r3, #1
    2920:	2b08      	cmp	r3, #8
    2922:	d029      	beq.n	2978 <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2924:	0002      	movs	r2, r0
    2926:	409a      	lsls	r2, r3
    2928:	4215      	tst	r5, r2
    292a:	d0f8      	beq.n	291e <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    292c:	6839      	ldr	r1, [r7, #0]
    292e:	001a      	movs	r2, r3
    2930:	3208      	adds	r2, #8
    2932:	0152      	lsls	r2, r2, #5
    2934:	5c52      	ldrb	r2, [r2, r1]
    2936:	0692      	lsls	r2, r2, #26
    2938:	0f52      	lsrs	r2, r2, #29
    293a:	2a03      	cmp	r2, #3
    293c:	d1ef      	bne.n	291e <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    293e:	001a      	movs	r2, r3
    2940:	3208      	adds	r2, #8
    2942:	0152      	lsls	r2, r2, #5
    2944:	5c52      	ldrb	r2, [r2, r1]
    2946:	0792      	lsls	r2, r2, #30
    2948:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    294a:	2a01      	cmp	r2, #1
    294c:	d1e7      	bne.n	291e <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    294e:	001a      	movs	r2, r3
    2950:	3208      	adds	r2, #8
    2952:	0152      	lsls	r2, r2, #5
    2954:	1889      	adds	r1, r1, r2
    2956:	710e      	strb	r6, [r1, #4]
    2958:	e7e1      	b.n	291e <USB_Handler+0x2e2>
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	200004d0 	.word	0x200004d0
    2960:	00004a84 	.word	0x00004a84
    2964:	00004969 	.word	0x00004969
    2968:	200004e0 	.word	0x200004e0
    296c:	200004e4 	.word	0x200004e4
    2970:	200007d4 	.word	0x200007d4
    2974:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    2978:	339d      	adds	r3, #157	; 0x9d
    297a:	5cfb      	ldrb	r3, [r7, r3]
    297c:	07db      	lsls	r3, r3, #31
    297e:	d462      	bmi.n	2a46 <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    2980:	0723      	lsls	r3, r4, #28
    2982:	d50b      	bpl.n	299c <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    2984:	2200      	movs	r2, #0
    2986:	4baf      	ldr	r3, [pc, #700]	; (2c44 <USB_Handler+0x608>)
    2988:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    298a:	4baf      	ldr	r3, [pc, #700]	; (2c48 <USB_Handler+0x60c>)
    298c:	6818      	ldr	r0, [r3, #0]
    298e:	2308      	movs	r3, #8
    2990:	6802      	ldr	r2, [r0, #0]
    2992:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    2994:	339d      	adds	r3, #157	; 0x9d
    2996:	5cc3      	ldrb	r3, [r0, r3]
    2998:	079b      	lsls	r3, r3, #30
    299a:	d458      	bmi.n	2a4e <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    299c:	0663      	lsls	r3, r4, #25
    299e:	d508      	bpl.n	29b2 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    29a0:	4ba9      	ldr	r3, [pc, #676]	; (2c48 <USB_Handler+0x60c>)
    29a2:	6818      	ldr	r0, [r3, #0]
    29a4:	2340      	movs	r3, #64	; 0x40
    29a6:	6802      	ldr	r2, [r0, #0]
    29a8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    29aa:	3365      	adds	r3, #101	; 0x65
    29ac:	5cc3      	ldrb	r3, [r0, r3]
    29ae:	06db      	lsls	r3, r3, #27
    29b0:	d450      	bmi.n	2a54 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    29b2:	06a3      	lsls	r3, r4, #26
    29b4:	d508      	bpl.n	29c8 <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    29b6:	4ba4      	ldr	r3, [pc, #656]	; (2c48 <USB_Handler+0x60c>)
    29b8:	6818      	ldr	r0, [r3, #0]
    29ba:	2320      	movs	r3, #32
    29bc:	6802      	ldr	r2, [r0, #0]
    29be:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    29c0:	3385      	adds	r3, #133	; 0x85
    29c2:	5cc3      	ldrb	r3, [r0, r3]
    29c4:	071b      	lsls	r3, r3, #28
    29c6:	d448      	bmi.n	2a5a <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    29c8:	06e3      	lsls	r3, r4, #27
    29ca:	d508      	bpl.n	29de <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    29cc:	4b9e      	ldr	r3, [pc, #632]	; (2c48 <USB_Handler+0x60c>)
    29ce:	6818      	ldr	r0, [r3, #0]
    29d0:	2310      	movs	r3, #16
    29d2:	6802      	ldr	r2, [r0, #0]
    29d4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    29d6:	3395      	adds	r3, #149	; 0x95
    29d8:	5cc3      	ldrb	r3, [r0, r3]
    29da:	075b      	lsls	r3, r3, #29
    29dc:	d440      	bmi.n	2a60 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    29de:	0623      	lsls	r3, r4, #24
    29e0:	d50b      	bpl.n	29fa <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    29e2:	2200      	movs	r2, #0
    29e4:	4b97      	ldr	r3, [pc, #604]	; (2c44 <USB_Handler+0x608>)
    29e6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    29e8:	4b97      	ldr	r3, [pc, #604]	; (2c48 <USB_Handler+0x60c>)
    29ea:	6818      	ldr	r0, [r3, #0]
    29ec:	2380      	movs	r3, #128	; 0x80
    29ee:	6802      	ldr	r2, [r0, #0]
    29f0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    29f2:	3325      	adds	r3, #37	; 0x25
    29f4:	5cc3      	ldrb	r3, [r0, r3]
    29f6:	069b      	lsls	r3, r3, #26
    29f8:	d435      	bmi.n	2a66 <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    29fa:	05e3      	lsls	r3, r4, #23
    29fc:	d50c      	bpl.n	2a18 <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    29fe:	2200      	movs	r2, #0
    2a00:	4b90      	ldr	r3, [pc, #576]	; (2c44 <USB_Handler+0x608>)
    2a02:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    2a04:	4b90      	ldr	r3, [pc, #576]	; (2c48 <USB_Handler+0x60c>)
    2a06:	6818      	ldr	r0, [r3, #0]
    2a08:	2380      	movs	r3, #128	; 0x80
    2a0a:	005b      	lsls	r3, r3, #1
    2a0c:	6802      	ldr	r2, [r0, #0]
    2a0e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    2a10:	3b5b      	subs	r3, #91	; 0x5b
    2a12:	5cc3      	ldrb	r3, [r0, r3]
    2a14:	065b      	lsls	r3, r3, #25
    2a16:	d429      	bmi.n	2a6c <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    2a18:	05a3      	lsls	r3, r4, #22
    2a1a:	d50d      	bpl.n	2a38 <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    2a1c:	2200      	movs	r2, #0
    2a1e:	4b89      	ldr	r3, [pc, #548]	; (2c44 <USB_Handler+0x608>)
    2a20:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    2a22:	4b89      	ldr	r3, [pc, #548]	; (2c48 <USB_Handler+0x60c>)
    2a24:	6818      	ldr	r0, [r3, #0]
    2a26:	2380      	movs	r3, #128	; 0x80
    2a28:	009b      	lsls	r3, r3, #2
    2a2a:	6802      	ldr	r2, [r0, #0]
    2a2c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    2a2e:	3b5c      	subs	r3, #92	; 0x5c
    2a30:	3bff      	subs	r3, #255	; 0xff
    2a32:	5cc3      	ldrb	r3, [r0, r3]
    2a34:	2b7f      	cmp	r3, #127	; 0x7f
    2a36:	d81c      	bhi.n	2a72 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    2a38:	b003      	add	sp, #12
    2a3a:	bc3c      	pop	{r2, r3, r4, r5}
    2a3c:	4690      	mov	r8, r2
    2a3e:	4699      	mov	r9, r3
    2a40:	46a2      	mov	sl, r4
    2a42:	46ab      	mov	fp, r5
    2a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	0038      	movs	r0, r7
    2a4a:	4798      	blx	r3
    2a4c:	e798      	b.n	2980 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    2a4e:	6883      	ldr	r3, [r0, #8]
    2a50:	4798      	blx	r3
    2a52:	e7a3      	b.n	299c <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    2a54:	6943      	ldr	r3, [r0, #20]
    2a56:	4798      	blx	r3
    2a58:	e7ab      	b.n	29b2 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    2a5a:	6903      	ldr	r3, [r0, #16]
    2a5c:	4798      	blx	r3
    2a5e:	e7b3      	b.n	29c8 <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    2a60:	68c3      	ldr	r3, [r0, #12]
    2a62:	4798      	blx	r3
    2a64:	e7bb      	b.n	29de <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    2a66:	6983      	ldr	r3, [r0, #24]
    2a68:	4798      	blx	r3
    2a6a:	e7c6      	b.n	29fa <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    2a6c:	69c3      	ldr	r3, [r0, #28]
    2a6e:	4798      	blx	r3
    2a70:	e7d2      	b.n	2a18 <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    2a72:	6a03      	ldr	r3, [r0, #32]
    2a74:	4798      	blx	r3
    2a76:	e7df      	b.n	2a38 <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2a78:	0023      	movs	r3, r4
    2a7a:	332e      	adds	r3, #46	; 0x2e
    2a7c:	009b      	lsls	r3, r3, #2
    2a7e:	4642      	mov	r2, r8
    2a80:	6812      	ldr	r2, [r2, #0]
    2a82:	589b      	ldr	r3, [r3, r2]
    2a84:	4971      	ldr	r1, [pc, #452]	; (2c4c <USB_Handler+0x610>)
    2a86:	4642      	mov	r2, r8
    2a88:	6810      	ldr	r0, [r2, #0]
    2a8a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2a8c:	3401      	adds	r4, #1
    2a8e:	2c07      	cmp	r4, #7
    2a90:	d0d2      	beq.n	2a38 <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    2a92:	0063      	lsls	r3, r4, #1
    2a94:	5bdb      	ldrh	r3, [r3, r7]
    2a96:	4233      	tst	r3, r6
    2a98:	d003      	beq.n	2aa2 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2a9a:	464a      	mov	r2, r9
    2a9c:	6812      	ldr	r2, [r2, #0]
    2a9e:	6812      	ldr	r2, [r2, #0]
    2aa0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    2aa2:	422b      	tst	r3, r5
    2aa4:	d0f2      	beq.n	2a8c <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    2aa6:	2c06      	cmp	r4, #6
    2aa8:	d1e6      	bne.n	2a78 <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    2aaa:	4b69      	ldr	r3, [pc, #420]	; (2c50 <USB_Handler+0x614>)
    2aac:	891b      	ldrh	r3, [r3, #8]
    2aae:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    2ab0:	2280      	movs	r2, #128	; 0x80
    2ab2:	0052      	lsls	r2, r2, #1
    2ab4:	4013      	ands	r3, r2
    2ab6:	4a65      	ldr	r2, [pc, #404]	; (2c4c <USB_Handler+0x610>)
    2ab8:	6013      	str	r3, [r2, #0]
    2aba:	e7dd      	b.n	2a78 <USB_Handler+0x43c>
    2abc:	003c      	movs	r4, r7
    2abe:	3459      	adds	r4, #89	; 0x59
    2ac0:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    2ac2:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    2ac4:	2201      	movs	r2, #1
    2ac6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2ac8:	325f      	adds	r2, #95	; 0x5f
    2aca:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2acc:	3a50      	subs	r2, #80	; 0x50
    2ace:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2ad0:	3a0d      	subs	r2, #13
    2ad2:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2ad4:	46b8      	mov	r8, r7
    2ad6:	002f      	movs	r7, r5
    2ad8:	e0c3      	b.n	2c62 <USB_Handler+0x626>
    2ada:	002a      	movs	r2, r5
    2adc:	003d      	movs	r5, r7
    2ade:	4647      	mov	r7, r8
    2ae0:	4690      	mov	r8, r2
    2ae2:	015b      	lsls	r3, r3, #5
    2ae4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2ae6:	2308      	movs	r3, #8
    2ae8:	33ff      	adds	r3, #255	; 0xff
    2aea:	5ceb      	ldrb	r3, [r5, r3]
    2aec:	065b      	lsls	r3, r3, #25
    2aee:	d515      	bpl.n	2b1c <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2af0:	2240      	movs	r2, #64	; 0x40
    2af2:	2308      	movs	r3, #8
    2af4:	33ff      	adds	r3, #255	; 0xff
    2af6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2af8:	3b88      	subs	r3, #136	; 0x88
    2afa:	3bff      	subs	r3, #255	; 0xff
    2afc:	4642      	mov	r2, r8
    2afe:	4313      	orrs	r3, r2
    2b00:	4a54      	ldr	r2, [pc, #336]	; (2c54 <USB_Handler+0x618>)
    2b02:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2b04:	2360      	movs	r3, #96	; 0x60
    2b06:	420b      	tst	r3, r1
    2b08:	d096      	beq.n	2a38 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    2b0a:	9b01      	ldr	r3, [sp, #4]
    2b0c:	011b      	lsls	r3, r3, #4
    2b0e:	18fb      	adds	r3, r7, r3
    2b10:	33e0      	adds	r3, #224	; 0xe0
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	494f      	ldr	r1, [pc, #316]	; (2c54 <USB_Handler+0x618>)
    2b16:	0038      	movs	r0, r7
    2b18:	4798      	blx	r3
    2b1a:	e78d      	b.n	2a38 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2b1c:	2308      	movs	r3, #8
    2b1e:	33ff      	adds	r3, #255	; 0xff
    2b20:	5ceb      	ldrb	r3, [r5, r3]
    2b22:	069b      	lsls	r3, r3, #26
    2b24:	d5ee      	bpl.n	2b04 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2b26:	2220      	movs	r2, #32
    2b28:	2308      	movs	r3, #8
    2b2a:	33ff      	adds	r3, #255	; 0xff
    2b2c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2b2e:	4b49      	ldr	r3, [pc, #292]	; (2c54 <USB_Handler+0x618>)
    2b30:	4642      	mov	r2, r8
    2b32:	719a      	strb	r2, [r3, #6]
    2b34:	e7e6      	b.n	2b04 <USB_Handler+0x4c8>
    2b36:	003d      	movs	r5, r7
    2b38:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    2b3a:	9a01      	ldr	r2, [sp, #4]
    2b3c:	0013      	movs	r3, r2
    2b3e:	3308      	adds	r3, #8
    2b40:	015b      	lsls	r3, r3, #5
    2b42:	18ed      	adds	r5, r5, r3
    2b44:	2310      	movs	r3, #16
    2b46:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    2b48:	18bb      	adds	r3, r7, r2
    2b4a:	3361      	adds	r3, #97	; 0x61
    2b4c:	33ff      	adds	r3, #255	; 0xff
    2b4e:	781b      	ldrb	r3, [r3, #0]
    2b50:	06db      	lsls	r3, r3, #27
    2b52:	d400      	bmi.n	2b56 <USB_Handler+0x51a>
    2b54:	e770      	b.n	2a38 <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2b56:	0010      	movs	r0, r2
    2b58:	0152      	lsls	r2, r2, #5
    2b5a:	4b3d      	ldr	r3, [pc, #244]	; (2c50 <USB_Handler+0x614>)
    2b5c:	189b      	adds	r3, r3, r2
    2b5e:	685b      	ldr	r3, [r3, #4]
    2b60:	049b      	lsls	r3, r3, #18
    2b62:	0c9b      	lsrs	r3, r3, #18
    2b64:	493b      	ldr	r1, [pc, #236]	; (2c54 <USB_Handler+0x618>)
    2b66:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    2b68:	0103      	lsls	r3, r0, #4
    2b6a:	18fb      	adds	r3, r7, r3
    2b6c:	33dc      	adds	r3, #220	; 0xdc
    2b6e:	681b      	ldr	r3, [r3, #0]
    2b70:	4640      	mov	r0, r8
    2b72:	4798      	blx	r3
    2b74:	e760      	b.n	2a38 <USB_Handler+0x3fc>
    2b76:	002a      	movs	r2, r5
    2b78:	003d      	movs	r5, r7
    2b7a:	4647      	mov	r7, r8
    2b7c:	4690      	mov	r8, r2
    2b7e:	015b      	lsls	r3, r3, #5
    2b80:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2b82:	2308      	movs	r3, #8
    2b84:	33ff      	adds	r3, #255	; 0xff
    2b86:	5ceb      	ldrb	r3, [r5, r3]
    2b88:	079b      	lsls	r3, r3, #30
    2b8a:	d51e      	bpl.n	2bca <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2b8c:	2202      	movs	r2, #2
    2b8e:	2308      	movs	r3, #8
    2b90:	33ff      	adds	r3, #255	; 0xff
    2b92:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2b94:	482f      	ldr	r0, [pc, #188]	; (2c54 <USB_Handler+0x618>)
    2b96:	3b88      	subs	r3, #136	; 0x88
    2b98:	3bff      	subs	r3, #255	; 0xff
    2b9a:	4642      	mov	r2, r8
    2b9c:	4313      	orrs	r3, r2
    2b9e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	015a      	lsls	r2, r3, #5
    2ba4:	4b2a      	ldr	r3, [pc, #168]	; (2c50 <USB_Handler+0x614>)
    2ba6:	189b      	adds	r3, r3, r2
    2ba8:	3310      	adds	r3, #16
    2baa:	685b      	ldr	r3, [r3, #4]
    2bac:	049b      	lsls	r3, r3, #18
    2bae:	0c9b      	lsrs	r3, r3, #18
    2bb0:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2bb2:	078b      	lsls	r3, r1, #30
    2bb4:	d100      	bne.n	2bb8 <USB_Handler+0x57c>
    2bb6:	e73f      	b.n	2a38 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    2bb8:	9b01      	ldr	r3, [sp, #4]
    2bba:	330d      	adds	r3, #13
    2bbc:	011b      	lsls	r3, r3, #4
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	685b      	ldr	r3, [r3, #4]
    2bc2:	4924      	ldr	r1, [pc, #144]	; (2c54 <USB_Handler+0x618>)
    2bc4:	0038      	movs	r0, r7
    2bc6:	4798      	blx	r3
    2bc8:	e736      	b.n	2a38 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2bca:	2308      	movs	r3, #8
    2bcc:	33ff      	adds	r3, #255	; 0xff
    2bce:	5ceb      	ldrb	r3, [r5, r3]
    2bd0:	07db      	lsls	r3, r3, #31
    2bd2:	d5ee      	bpl.n	2bb2 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2bd4:	2201      	movs	r2, #1
    2bd6:	2308      	movs	r3, #8
    2bd8:	33ff      	adds	r3, #255	; 0xff
    2bda:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2bdc:	481d      	ldr	r0, [pc, #116]	; (2c54 <USB_Handler+0x618>)
    2bde:	4643      	mov	r3, r8
    2be0:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2be2:	9b01      	ldr	r3, [sp, #4]
    2be4:	015b      	lsls	r3, r3, #5
    2be6:	4a1a      	ldr	r2, [pc, #104]	; (2c50 <USB_Handler+0x614>)
    2be8:	18d2      	adds	r2, r2, r3
    2bea:	6853      	ldr	r3, [r2, #4]
    2bec:	049b      	lsls	r3, r3, #18
    2bee:	0c9b      	lsrs	r3, r3, #18
    2bf0:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2bf2:	6853      	ldr	r3, [r2, #4]
    2bf4:	011b      	lsls	r3, r3, #4
    2bf6:	0c9b      	lsrs	r3, r3, #18
    2bf8:	8083      	strh	r3, [r0, #4]
    2bfa:	e7da      	b.n	2bb2 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2bfc:	2208      	movs	r2, #8
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	5c9a      	ldrb	r2, [r3, r2]
    2c02:	0752      	lsls	r2, r2, #29
    2c04:	d579      	bpl.n	2cfa <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2c06:	2004      	movs	r0, #4
    2c08:	2208      	movs	r2, #8
    2c0a:	32ff      	adds	r2, #255	; 0xff
    2c0c:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2c0e:	9801      	ldr	r0, [sp, #4]
    2c10:	0142      	lsls	r2, r0, #5
    2c12:	4b0f      	ldr	r3, [pc, #60]	; (2c50 <USB_Handler+0x614>)
    2c14:	189b      	adds	r3, r3, r2
    2c16:	7a9b      	ldrb	r3, [r3, #10]
    2c18:	079b      	lsls	r3, r3, #30
    2c1a:	d505      	bpl.n	2c28 <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2c1c:	4b0c      	ldr	r3, [pc, #48]	; (2c50 <USB_Handler+0x614>)
    2c1e:	189b      	adds	r3, r3, r2
    2c20:	7a9a      	ldrb	r2, [r3, #10]
    2c22:	2002      	movs	r0, #2
    2c24:	4382      	bics	r2, r0
    2c26:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2c28:	4b0a      	ldr	r3, [pc, #40]	; (2c54 <USB_Handler+0x618>)
    2c2a:	4642      	mov	r2, r8
    2c2c:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2c2e:	9b01      	ldr	r3, [sp, #4]
    2c30:	3308      	adds	r3, #8
    2c32:	015b      	lsls	r3, r3, #5
    2c34:	683a      	ldr	r2, [r7, #0]
    2c36:	4694      	mov	ip, r2
    2c38:	4463      	add	r3, ip
    2c3a:	79db      	ldrb	r3, [r3, #7]
    2c3c:	07db      	lsls	r3, r3, #31
    2c3e:	d55c      	bpl.n	2cfa <USB_Handler+0x6be>
    2c40:	e6fa      	b.n	2a38 <USB_Handler+0x3fc>
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	200004e0 	.word	0x200004e0
    2c48:	200004d0 	.word	0x200004d0
    2c4c:	200004d4 	.word	0x200004d4
    2c50:	200007d4 	.word	0x200007d4
    2c54:	200004d8 	.word	0x200004d8
    2c58:	3301      	adds	r3, #1
    2c5a:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2c5c:	2b08      	cmp	r3, #8
    2c5e:	d100      	bne.n	2c62 <USB_Handler+0x626>
    2c60:	e6ea      	b.n	2a38 <USB_Handler+0x3fc>
    2c62:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    2c64:	9301      	str	r3, [sp, #4]
    2c66:	0032      	movs	r2, r6
    2c68:	411a      	asrs	r2, r3
    2c6a:	4661      	mov	r1, ip
    2c6c:	4211      	tst	r1, r2
    2c6e:	d0f3      	beq.n	2c58 <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2c70:	001a      	movs	r2, r3
    2c72:	3208      	adds	r2, #8
    2c74:	0152      	lsls	r2, r2, #5
    2c76:	18ba      	adds	r2, r7, r2
    2c78:	79d2      	ldrb	r2, [r2, #7]
    2c7a:	b2d2      	uxtb	r2, r2
    2c7c:	7a21      	ldrb	r1, [r4, #8]
    2c7e:	4011      	ands	r1, r2
    2c80:	7820      	ldrb	r0, [r4, #0]
    2c82:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2c84:	4648      	mov	r0, r9
    2c86:	4210      	tst	r0, r2
    2c88:	d000      	beq.n	2c8c <USB_Handler+0x650>
    2c8a:	e726      	b.n	2ada <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2c8c:	4650      	mov	r0, sl
    2c8e:	4210      	tst	r0, r2
    2c90:	d000      	beq.n	2c94 <USB_Handler+0x658>
    2c92:	e750      	b.n	2b36 <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2c94:	4658      	mov	r0, fp
    2c96:	4210      	tst	r0, r2
    2c98:	d000      	beq.n	2c9c <USB_Handler+0x660>
    2c9a:	e76c      	b.n	2b76 <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2c9c:	200c      	movs	r0, #12
    2c9e:	4210      	tst	r0, r2
    2ca0:	d0da      	beq.n	2c58 <USB_Handler+0x61c>
    2ca2:	002a      	movs	r2, r5
    2ca4:	003d      	movs	r5, r7
    2ca6:	4647      	mov	r7, r8
    2ca8:	4690      	mov	r8, r2
    2caa:	015b      	lsls	r3, r3, #5
    2cac:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2cae:	2208      	movs	r2, #8
    2cb0:	32ff      	adds	r2, #255	; 0xff
    2cb2:	5c9a      	ldrb	r2, [r3, r2]
    2cb4:	0712      	lsls	r2, r2, #28
    2cb6:	d5a1      	bpl.n	2bfc <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2cb8:	3804      	subs	r0, #4
    2cba:	2208      	movs	r2, #8
    2cbc:	32ff      	adds	r2, #255	; 0xff
    2cbe:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2cc0:	9801      	ldr	r0, [sp, #4]
    2cc2:	0142      	lsls	r2, r0, #5
    2cc4:	4b13      	ldr	r3, [pc, #76]	; (2d14 <USB_Handler+0x6d8>)
    2cc6:	189b      	adds	r3, r3, r2
    2cc8:	7e9b      	ldrb	r3, [r3, #26]
    2cca:	079b      	lsls	r3, r3, #30
    2ccc:	d505      	bpl.n	2cda <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2cce:	4b11      	ldr	r3, [pc, #68]	; (2d14 <USB_Handler+0x6d8>)
    2cd0:	189b      	adds	r3, r3, r2
    2cd2:	7e9a      	ldrb	r2, [r3, #26]
    2cd4:	2002      	movs	r0, #2
    2cd6:	4382      	bics	r2, r0
    2cd8:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2cda:	2380      	movs	r3, #128	; 0x80
    2cdc:	425b      	negs	r3, r3
    2cde:	4642      	mov	r2, r8
    2ce0:	4313      	orrs	r3, r2
    2ce2:	4a0d      	ldr	r2, [pc, #52]	; (2d18 <USB_Handler+0x6dc>)
    2ce4:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2ce6:	9b01      	ldr	r3, [sp, #4]
    2ce8:	3308      	adds	r3, #8
    2cea:	015b      	lsls	r3, r3, #5
    2cec:	683a      	ldr	r2, [r7, #0]
    2cee:	4694      	mov	ip, r2
    2cf0:	4463      	add	r3, ip
    2cf2:	79db      	ldrb	r3, [r3, #7]
    2cf4:	079b      	lsls	r3, r3, #30
    2cf6:	d500      	bpl.n	2cfa <USB_Handler+0x6be>
    2cf8:	e69e      	b.n	2a38 <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2cfa:	230c      	movs	r3, #12
    2cfc:	420b      	tst	r3, r1
    2cfe:	d100      	bne.n	2d02 <USB_Handler+0x6c6>
    2d00:	e69a      	b.n	2a38 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2d02:	9b01      	ldr	r3, [sp, #4]
    2d04:	011b      	lsls	r3, r3, #4
    2d06:	18fb      	adds	r3, r7, r3
    2d08:	33d8      	adds	r3, #216	; 0xd8
    2d0a:	681b      	ldr	r3, [r3, #0]
    2d0c:	4902      	ldr	r1, [pc, #8]	; (2d18 <USB_Handler+0x6dc>)
    2d0e:	0038      	movs	r0, r7
    2d10:	4798      	blx	r3
    2d12:	e691      	b.n	2a38 <USB_Handler+0x3fc>
    2d14:	200007d4 	.word	0x200007d4
    2d18:	200004d8 	.word	0x200004d8

00002d1c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2d1c:	2200      	movs	r2, #0
    2d1e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    2d20:	2301      	movs	r3, #1
    2d22:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    2d24:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    2d26:	70c3      	strb	r3, [r0, #3]
}
    2d28:	4770      	bx	lr
	...

00002d2c <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	46ce      	mov	lr, r9
    2d30:	4647      	mov	r7, r8
    2d32:	b580      	push	{r7, lr}
    2d34:	b083      	sub	sp, #12
    2d36:	0004      	movs	r4, r0
    2d38:	000d      	movs	r5, r1
    2d3a:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    2d3c:	2300      	movs	r3, #0
    2d3e:	4a6e      	ldr	r2, [pc, #440]	; (2ef8 <usb_init+0x1cc>)
    2d40:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    2d42:	4a6e      	ldr	r2, [pc, #440]	; (2efc <usb_init+0x1d0>)
    2d44:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2d46:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2d48:	496d      	ldr	r1, [pc, #436]	; (2f00 <usb_init+0x1d4>)
    2d4a:	69ca      	ldr	r2, [r1, #28]
    2d4c:	2020      	movs	r0, #32
    2d4e:	4302      	orrs	r2, r0
    2d50:	61ca      	str	r2, [r1, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d52:	af01      	add	r7, sp, #4
    2d54:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2d56:	2201      	movs	r2, #1
    2d58:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    2d5a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2d5c:	3306      	adds	r3, #6
    2d5e:	4699      	mov	r9, r3
    2d60:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2d62:	0039      	movs	r1, r7
    2d64:	3808      	subs	r0, #8
    2d66:	4b67      	ldr	r3, [pc, #412]	; (2f04 <usb_init+0x1d8>)
    2d68:	4698      	mov	r8, r3
    2d6a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2d6c:	464b      	mov	r3, r9
    2d6e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2d70:	0039      	movs	r1, r7
    2d72:	2019      	movs	r0, #25
    2d74:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    2d76:	78b3      	ldrb	r3, [r6, #2]
    2d78:	466a      	mov	r2, sp
    2d7a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2d7c:	4669      	mov	r1, sp
    2d7e:	2006      	movs	r0, #6
    2d80:	4b61      	ldr	r3, [pc, #388]	; (2f08 <usb_init+0x1dc>)
    2d82:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    2d84:	2006      	movs	r0, #6
    2d86:	4b61      	ldr	r3, [pc, #388]	; (2f0c <usb_init+0x1e0>)
    2d88:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2d8a:	782b      	ldrb	r3, [r5, #0]
    2d8c:	2201      	movs	r2, #1
    2d8e:	4313      	orrs	r3, r2
    2d90:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2d92:	78ab      	ldrb	r3, [r5, #2]
    2d94:	07db      	lsls	r3, r3, #31
    2d96:	d4fc      	bmi.n	2d92 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2d98:	4a5d      	ldr	r2, [pc, #372]	; (2f10 <usb_init+0x1e4>)
    2d9a:	78d3      	ldrb	r3, [r2, #3]
    2d9c:	2103      	movs	r1, #3
    2d9e:	438b      	bics	r3, r1
    2da0:	2102      	movs	r1, #2
    2da2:	430b      	orrs	r3, r1
    2da4:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2da6:	78d3      	ldrb	r3, [r2, #3]
    2da8:	210c      	movs	r1, #12
    2daa:	438b      	bics	r3, r1
    2dac:	2108      	movs	r1, #8
    2dae:	430b      	orrs	r3, r1
    2db0:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2db2:	4b58      	ldr	r3, [pc, #352]	; (2f14 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    2db4:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2db6:	039b      	lsls	r3, r3, #14
    2db8:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2dba:	2b1f      	cmp	r3, #31
    2dbc:	d100      	bne.n	2dc0 <usb_init+0x94>
    2dbe:	e08f      	b.n	2ee0 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    2dc0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2dc2:	019b      	lsls	r3, r3, #6
    2dc4:	4954      	ldr	r1, [pc, #336]	; (2f18 <usb_init+0x1ec>)
    2dc6:	400a      	ands	r2, r1
    2dc8:	4313      	orrs	r3, r2
    2dca:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2dcc:	4b51      	ldr	r3, [pc, #324]	; (2f14 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2dd2:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2dd4:	2b1f      	cmp	r3, #31
    2dd6:	d100      	bne.n	2dda <usb_init+0xae>
    2dd8:	e084      	b.n	2ee4 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2dda:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2ddc:	211f      	movs	r1, #31
    2dde:	438a      	bics	r2, r1
    2de0:	4313      	orrs	r3, r2
    2de2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2de4:	4b4b      	ldr	r3, [pc, #300]	; (2f14 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    2de6:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2de8:	019b      	lsls	r3, r3, #6
    2dea:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2dec:	2b07      	cmp	r3, #7
    2dee:	d100      	bne.n	2df2 <usb_init+0xc6>
    2df0:	e07a      	b.n	2ee8 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    2df2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2df4:	031b      	lsls	r3, r3, #12
    2df6:	4949      	ldr	r1, [pc, #292]	; (2f1c <usb_init+0x1f0>)
    2df8:	400a      	ands	r2, r1
    2dfa:	4313      	orrs	r3, r2
    2dfc:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2dfe:	7832      	ldrb	r2, [r6, #0]
    2e00:	7829      	ldrb	r1, [r5, #0]
    2e02:	01d2      	lsls	r2, r2, #7
    2e04:	237f      	movs	r3, #127	; 0x7f
    2e06:	400b      	ands	r3, r1
    2e08:	4313      	orrs	r3, r2
    2e0a:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2e0c:	7871      	ldrb	r1, [r6, #1]
    2e0e:	782b      	ldrb	r3, [r5, #0]
    2e10:	2201      	movs	r2, #1
    2e12:	400a      	ands	r2, r1
    2e14:	0092      	lsls	r2, r2, #2
    2e16:	2104      	movs	r1, #4
    2e18:	438b      	bics	r3, r1
    2e1a:	4313      	orrs	r3, r2
    2e1c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2e1e:	4b40      	ldr	r3, [pc, #256]	; (2f20 <usb_init+0x1f4>)
    2e20:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2e22:	78f3      	ldrb	r3, [r6, #3]
    2e24:	2b01      	cmp	r3, #1
    2e26:	d061      	beq.n	2eec <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d106      	bne.n	2e3a <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2e2c:	6822      	ldr	r2, [r4, #0]
    2e2e:	8913      	ldrh	r3, [r2, #8]
    2e30:	210c      	movs	r1, #12
    2e32:	438b      	bics	r3, r1
    2e34:	2104      	movs	r1, #4
    2e36:	430b      	orrs	r3, r1
    2e38:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    2e3a:	2280      	movs	r2, #128	; 0x80
    2e3c:	0052      	lsls	r2, r2, #1
    2e3e:	2100      	movs	r1, #0
    2e40:	4837      	ldr	r0, [pc, #220]	; (2f20 <usb_init+0x1f4>)
    2e42:	4b38      	ldr	r3, [pc, #224]	; (2f24 <usb_init+0x1f8>)
    2e44:	4798      	blx	r3
    2e46:	1d23      	adds	r3, r4, #4
    2e48:	0021      	movs	r1, r4
    2e4a:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    2e4c:	2200      	movs	r2, #0
    2e4e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    2e50:	428b      	cmp	r3, r1
    2e52:	d1fc      	bne.n	2e4e <usb_init+0x122>
    2e54:	0021      	movs	r1, r4
    2e56:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    2e58:	2200      	movs	r2, #0
    2e5a:	601a      	str	r2, [r3, #0]
    2e5c:	605a      	str	r2, [r3, #4]
    2e5e:	609a      	str	r2, [r3, #8]
    2e60:	60da      	str	r2, [r3, #12]
    2e62:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2e64:	428b      	cmp	r3, r1
    2e66:	d1f8      	bne.n	2e5a <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    2e68:	2300      	movs	r3, #0
    2e6a:	22a4      	movs	r2, #164	; 0xa4
    2e6c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    2e6e:	3201      	adds	r2, #1
    2e70:	54a3      	strb	r3, [r4, r2]
    2e72:	0023      	movs	r3, r4
    2e74:	33a6      	adds	r3, #166	; 0xa6
    2e76:	0021      	movs	r1, r4
    2e78:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    2e7a:	2200      	movs	r2, #0
    2e7c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    2e7e:	721a      	strb	r2, [r3, #8]
    2e80:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2e82:	4299      	cmp	r1, r3
    2e84:	d1fa      	bne.n	2e7c <usb_init+0x150>
    2e86:	0023      	movs	r3, r4
    2e88:	33b8      	adds	r3, #184	; 0xb8
    2e8a:	0021      	movs	r1, r4
    2e8c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2e8e:	2200      	movs	r2, #0
    2e90:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2e92:	428b      	cmp	r3, r1
    2e94:	d1fc      	bne.n	2e90 <usb_init+0x164>
    2e96:	0021      	movs	r1, r4
    2e98:	3155      	adds	r1, #85	; 0x55
    2e9a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2e9c:	2200      	movs	r2, #0
    2e9e:	601a      	str	r2, [r3, #0]
    2ea0:	605a      	str	r2, [r3, #4]
    2ea2:	609a      	str	r2, [r3, #8]
    2ea4:	60da      	str	r2, [r3, #12]
    2ea6:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    2ea8:	428b      	cmp	r3, r1
    2eaa:	d1f8      	bne.n	2e9e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2eac:	2300      	movs	r3, #0
    2eae:	22aa      	movs	r2, #170	; 0xaa
    2eb0:	0052      	lsls	r2, r2, #1
    2eb2:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    2eb4:	3202      	adds	r2, #2
    2eb6:	52a3      	strh	r3, [r4, r2]
    2eb8:	0023      	movs	r3, r4
    2eba:	3359      	adds	r3, #89	; 0x59
    2ebc:	33ff      	adds	r3, #255	; 0xff
    2ebe:	3461      	adds	r4, #97	; 0x61
    2ec0:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    2ec2:	2200      	movs	r2, #0
    2ec4:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    2ec6:	721a      	strb	r2, [r3, #8]
    2ec8:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    2eca:	42a3      	cmp	r3, r4
    2ecc:	d1fa      	bne.n	2ec4 <usb_init+0x198>
    2ece:	2280      	movs	r2, #128	; 0x80
    2ed0:	4b15      	ldr	r3, [pc, #84]	; (2f28 <usb_init+0x1fc>)
    2ed2:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    2ed4:	2000      	movs	r0, #0
    2ed6:	b003      	add	sp, #12
    2ed8:	bc0c      	pop	{r2, r3}
    2eda:	4690      	mov	r8, r2
    2edc:	4699      	mov	r9, r3
    2ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    2ee0:	3b1a      	subs	r3, #26
    2ee2:	e76d      	b.n	2dc0 <usb_init+0x94>
		pad_transp = 29;
    2ee4:	3b02      	subs	r3, #2
    2ee6:	e778      	b.n	2dda <usb_init+0xae>
		pad_trim = 3;
    2ee8:	3b04      	subs	r3, #4
    2eea:	e782      	b.n	2df2 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2eec:	6822      	ldr	r2, [r4, #0]
    2eee:	8913      	ldrh	r3, [r2, #8]
    2ef0:	3108      	adds	r1, #8
    2ef2:	438b      	bics	r3, r1
    2ef4:	8113      	strh	r3, [r2, #8]
    2ef6:	e7a0      	b.n	2e3a <usb_init+0x10e>
    2ef8:	200004e0 	.word	0x200004e0
    2efc:	200004d0 	.word	0x200004d0
    2f00:	40000400 	.word	0x40000400
    2f04:	00004425 	.word	0x00004425
    2f08:	0000432d 	.word	0x0000432d
    2f0c:	000042a1 	.word	0x000042a1
    2f10:	41005000 	.word	0x41005000
    2f14:	00806024 	.word	0x00806024
    2f18:	fffff83f 	.word	0xfffff83f
    2f1c:	ffff8fff 	.word	0xffff8fff
    2f20:	200007d4 	.word	0x200007d4
    2f24:	00004a57 	.word	0x00004a57
    2f28:	e000e100 	.word	0xe000e100

00002f2c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2f2c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2f2e:	2200      	movs	r2, #0
    2f30:	4b10      	ldr	r3, [pc, #64]	; (2f74 <EIC_Handler+0x48>)
    2f32:	701a      	strb	r2, [r3, #0]
    2f34:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2f36:	4910      	ldr	r1, [pc, #64]	; (2f78 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2f38:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2f3a:	4e10      	ldr	r6, [pc, #64]	; (2f7c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2f3c:	4c0d      	ldr	r4, [pc, #52]	; (2f74 <EIC_Handler+0x48>)
    2f3e:	e00a      	b.n	2f56 <EIC_Handler+0x2a>
		return eics[eic_index];
    2f40:	490d      	ldr	r1, [pc, #52]	; (2f78 <EIC_Handler+0x4c>)
    2f42:	e008      	b.n	2f56 <EIC_Handler+0x2a>
    2f44:	7823      	ldrb	r3, [r4, #0]
    2f46:	3301      	adds	r3, #1
    2f48:	b2db      	uxtb	r3, r3
    2f4a:	7023      	strb	r3, [r4, #0]
    2f4c:	2b0f      	cmp	r3, #15
    2f4e:	d810      	bhi.n	2f72 <EIC_Handler+0x46>
		return NULL;
    2f50:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2f52:	2b1f      	cmp	r3, #31
    2f54:	d9f4      	bls.n	2f40 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2f56:	0028      	movs	r0, r5
    2f58:	4018      	ands	r0, r3
    2f5a:	2201      	movs	r2, #1
    2f5c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2f5e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2f60:	4210      	tst	r0, r2
    2f62:	d0ef      	beq.n	2f44 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2f64:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2f66:	009b      	lsls	r3, r3, #2
    2f68:	599b      	ldr	r3, [r3, r6]
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d0ea      	beq.n	2f44 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2f6e:	4798      	blx	r3
    2f70:	e7e8      	b.n	2f44 <EIC_Handler+0x18>
			}
		}
	}
}
    2f72:	bd70      	pop	{r4, r5, r6, pc}
    2f74:	200008d4 	.word	0x200008d4
    2f78:	40001800 	.word	0x40001800
    2f7c:	20000594 	.word	0x20000594

00002f80 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    2f80:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    2f82:	4b0f      	ldr	r3, [pc, #60]	; (2fc0 <RTC_Handler+0x40>)
    2f84:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    2f86:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    2f88:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    2f8a:	8a13      	ldrh	r3, [r2, #16]
    2f8c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    2f8e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    2f90:	79e3      	ldrb	r3, [r4, #7]
    2f92:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    2f94:	b258      	sxtb	r0, r3
    2f96:	2800      	cmp	r0, #0
    2f98:	db06      	blt.n	2fa8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    2f9a:	07db      	lsls	r3, r3, #31
    2f9c:	d503      	bpl.n	2fa6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    2f9e:	07cb      	lsls	r3, r1, #31
    2fa0:	d40a      	bmi.n	2fb8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    2fa2:	2301      	movs	r3, #1
    2fa4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    2fa6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    2fa8:	078b      	lsls	r3, r1, #30
    2faa:	d402      	bmi.n	2fb2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    2fac:	2380      	movs	r3, #128	; 0x80
    2fae:	7223      	strb	r3, [r4, #8]
    2fb0:	e7f9      	b.n	2fa6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    2fb2:	68d3      	ldr	r3, [r2, #12]
    2fb4:	4798      	blx	r3
    2fb6:	e7f9      	b.n	2fac <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    2fb8:	6893      	ldr	r3, [r2, #8]
    2fba:	4798      	blx	r3
    2fbc:	e7f1      	b.n	2fa2 <RTC_Handler+0x22>
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	200008d8 	.word	0x200008d8

00002fc4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fc6:	46c6      	mov	lr, r8
    2fc8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2fca:	0080      	lsls	r0, r0, #2
    2fcc:	4b0e      	ldr	r3, [pc, #56]	; (3008 <_tcc_interrupt_handler+0x44>)
    2fce:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2fd0:	683b      	ldr	r3, [r7, #0]
    2fd2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    2fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2fd8:	4013      	ands	r3, r2
    2fda:	401e      	ands	r6, r3
    2fdc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2fde:	4b0b      	ldr	r3, [pc, #44]	; (300c <_tcc_interrupt_handler+0x48>)
    2fe0:	4698      	mov	r8, r3
    2fe2:	e002      	b.n	2fea <_tcc_interrupt_handler+0x26>
    2fe4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2fe6:	2c30      	cmp	r4, #48	; 0x30
    2fe8:	d00a      	beq.n	3000 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2fea:	4643      	mov	r3, r8
    2fec:	58e5      	ldr	r5, [r4, r3]
    2fee:	4235      	tst	r5, r6
    2ff0:	d0f8      	beq.n	2fe4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2ff2:	193b      	adds	r3, r7, r4
    2ff4:	685b      	ldr	r3, [r3, #4]
    2ff6:	0038      	movs	r0, r7
    2ff8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2ffa:	683b      	ldr	r3, [r7, #0]
    2ffc:	62dd      	str	r5, [r3, #44]	; 0x2c
    2ffe:	e7f1      	b.n	2fe4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    3000:	bc04      	pop	{r2}
    3002:	4690      	mov	r8, r2
    3004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	200008e4 	.word	0x200008e4
    300c:	00004a98 	.word	0x00004a98

00003010 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    3010:	b510      	push	{r4, lr}
    3012:	2000      	movs	r0, #0
    3014:	4b01      	ldr	r3, [pc, #4]	; (301c <TCC0_Handler+0xc>)
    3016:	4798      	blx	r3
    3018:	bd10      	pop	{r4, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	00002fc5 	.word	0x00002fc5

00003020 <TCC1_Handler>:
    3020:	b510      	push	{r4, lr}
    3022:	2001      	movs	r0, #1
    3024:	4b01      	ldr	r3, [pc, #4]	; (302c <TCC1_Handler+0xc>)
    3026:	4798      	blx	r3
    3028:	bd10      	pop	{r4, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	00002fc5 	.word	0x00002fc5

00003030 <TCC2_Handler>:
    3030:	b510      	push	{r4, lr}
    3032:	2002      	movs	r0, #2
    3034:	4b01      	ldr	r3, [pc, #4]	; (303c <TCC2_Handler+0xc>)
    3036:	4798      	blx	r3
    3038:	bd10      	pop	{r4, pc}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	00002fc5 	.word	0x00002fc5

00003040 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3040:	b5f0      	push	{r4, r5, r6, r7, lr}
    3042:	46de      	mov	lr, fp
    3044:	4657      	mov	r7, sl
    3046:	464e      	mov	r6, r9
    3048:	4645      	mov	r5, r8
    304a:	b5e0      	push	{r5, r6, r7, lr}
    304c:	b091      	sub	sp, #68	; 0x44
    304e:	0005      	movs	r5, r0
    3050:	000c      	movs	r4, r1
    3052:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3054:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3056:	0008      	movs	r0, r1
    3058:	4bba      	ldr	r3, [pc, #744]	; (3344 <usart_init+0x304>)
    305a:	4798      	blx	r3
    305c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    305e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3060:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3062:	07db      	lsls	r3, r3, #31
    3064:	d506      	bpl.n	3074 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3066:	b011      	add	sp, #68	; 0x44
    3068:	bc3c      	pop	{r2, r3, r4, r5}
    306a:	4690      	mov	r8, r2
    306c:	4699      	mov	r9, r3
    306e:	46a2      	mov	sl, r4
    3070:	46ab      	mov	fp, r5
    3072:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3074:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3076:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3078:	079b      	lsls	r3, r3, #30
    307a:	d4f4      	bmi.n	3066 <usart_init+0x26>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    307c:	49b2      	ldr	r1, [pc, #712]	; (3348 <usart_init+0x308>)
    307e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3080:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3082:	2301      	movs	r3, #1
    3084:	40bb      	lsls	r3, r7
    3086:	4303      	orrs	r3, r0
    3088:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    308a:	a90f      	add	r1, sp, #60	; 0x3c
    308c:	272d      	movs	r7, #45	; 0x2d
    308e:	5df3      	ldrb	r3, [r6, r7]
    3090:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3092:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3094:	b2d3      	uxtb	r3, r2
    3096:	9302      	str	r3, [sp, #8]
    3098:	0018      	movs	r0, r3
    309a:	4bac      	ldr	r3, [pc, #688]	; (334c <usart_init+0x30c>)
    309c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    309e:	9802      	ldr	r0, [sp, #8]
    30a0:	4bab      	ldr	r3, [pc, #684]	; (3350 <usart_init+0x310>)
    30a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    30a4:	5df0      	ldrb	r0, [r6, r7]
    30a6:	2100      	movs	r1, #0
    30a8:	4baa      	ldr	r3, [pc, #680]	; (3354 <usart_init+0x314>)
    30aa:	4798      	blx	r3
	module->character_size = config->character_size;
    30ac:	7af3      	ldrb	r3, [r6, #11]
    30ae:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    30b0:	2324      	movs	r3, #36	; 0x24
    30b2:	5cf3      	ldrb	r3, [r6, r3]
    30b4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    30b6:	2325      	movs	r3, #37	; 0x25
    30b8:	5cf3      	ldrb	r3, [r6, r3]
    30ba:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    30bc:	7ef3      	ldrb	r3, [r6, #27]
    30be:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    30c0:	7f33      	ldrb	r3, [r6, #28]
    30c2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    30c4:	682b      	ldr	r3, [r5, #0]
    30c6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    30c8:	0018      	movs	r0, r3
    30ca:	4b9e      	ldr	r3, [pc, #632]	; (3344 <usart_init+0x304>)
    30cc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    30ce:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    30d0:	2200      	movs	r2, #0
    30d2:	230e      	movs	r3, #14
    30d4:	a906      	add	r1, sp, #24
    30d6:	468c      	mov	ip, r1
    30d8:	4463      	add	r3, ip
    30da:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    30dc:	8a32      	ldrh	r2, [r6, #16]
    30de:	9202      	str	r2, [sp, #8]
    30e0:	2380      	movs	r3, #128	; 0x80
    30e2:	01db      	lsls	r3, r3, #7
    30e4:	429a      	cmp	r2, r3
    30e6:	d100      	bne.n	30ea <usart_init+0xaa>
    30e8:	e09a      	b.n	3220 <usart_init+0x1e0>
    30ea:	d90f      	bls.n	310c <usart_init+0xcc>
    30ec:	23c0      	movs	r3, #192	; 0xc0
    30ee:	01db      	lsls	r3, r3, #7
    30f0:	9a02      	ldr	r2, [sp, #8]
    30f2:	429a      	cmp	r2, r3
    30f4:	d100      	bne.n	30f8 <usart_init+0xb8>
    30f6:	e08e      	b.n	3216 <usart_init+0x1d6>
    30f8:	2380      	movs	r3, #128	; 0x80
    30fa:	021b      	lsls	r3, r3, #8
    30fc:	429a      	cmp	r2, r3
    30fe:	d000      	beq.n	3102 <usart_init+0xc2>
    3100:	e11b      	b.n	333a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3102:	2303      	movs	r3, #3
    3104:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3106:	2300      	movs	r3, #0
    3108:	9307      	str	r3, [sp, #28]
    310a:	e008      	b.n	311e <usart_init+0xde>
	switch (config->sample_rate) {
    310c:	2380      	movs	r3, #128	; 0x80
    310e:	019b      	lsls	r3, r3, #6
    3110:	429a      	cmp	r2, r3
    3112:	d000      	beq.n	3116 <usart_init+0xd6>
    3114:	e111      	b.n	333a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3116:	2310      	movs	r3, #16
    3118:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    311a:	3b0f      	subs	r3, #15
    311c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    311e:	6833      	ldr	r3, [r6, #0]
    3120:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3122:	68f3      	ldr	r3, [r6, #12]
    3124:	469b      	mov	fp, r3
		config->sample_adjustment |
    3126:	6973      	ldr	r3, [r6, #20]
    3128:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    312a:	7e33      	ldrb	r3, [r6, #24]
    312c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    312e:	2326      	movs	r3, #38	; 0x26
    3130:	5cf3      	ldrb	r3, [r6, r3]
    3132:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3134:	6873      	ldr	r3, [r6, #4]
    3136:	4699      	mov	r9, r3
	switch (transfer_mode)
    3138:	2b00      	cmp	r3, #0
    313a:	d100      	bne.n	313e <usart_init+0xfe>
    313c:	e09c      	b.n	3278 <usart_init+0x238>
    313e:	2380      	movs	r3, #128	; 0x80
    3140:	055b      	lsls	r3, r3, #21
    3142:	4599      	cmp	r9, r3
    3144:	d100      	bne.n	3148 <usart_init+0x108>
    3146:	e080      	b.n	324a <usart_init+0x20a>
	if(config->encoding_format_enable) {
    3148:	7e73      	ldrb	r3, [r6, #25]
    314a:	2b00      	cmp	r3, #0
    314c:	d002      	beq.n	3154 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    314e:	7eb3      	ldrb	r3, [r6, #26]
    3150:	4642      	mov	r2, r8
    3152:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    3154:	230e      	movs	r3, #14
    3156:	aa06      	add	r2, sp, #24
    3158:	4694      	mov	ip, r2
    315a:	4463      	add	r3, ip
    315c:	881b      	ldrh	r3, [r3, #0]
    315e:	4642      	mov	r2, r8
    3160:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3162:	9b05      	ldr	r3, [sp, #20]
    3164:	465a      	mov	r2, fp
    3166:	4313      	orrs	r3, r2
    3168:	9a03      	ldr	r2, [sp, #12]
    316a:	4313      	orrs	r3, r2
    316c:	464a      	mov	r2, r9
    316e:	4313      	orrs	r3, r2
    3170:	9f02      	ldr	r7, [sp, #8]
    3172:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3174:	9b04      	ldr	r3, [sp, #16]
    3176:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    3178:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    317a:	4653      	mov	r3, sl
    317c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    317e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    3180:	2327      	movs	r3, #39	; 0x27
    3182:	5cf3      	ldrb	r3, [r6, r3]
    3184:	2b00      	cmp	r3, #0
    3186:	d101      	bne.n	318c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3188:	3304      	adds	r3, #4
    318a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    318c:	7e73      	ldrb	r3, [r6, #25]
    318e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3190:	7f32      	ldrb	r2, [r6, #28]
    3192:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3194:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3196:	7f72      	ldrb	r2, [r6, #29]
    3198:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    319a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    319c:	2224      	movs	r2, #36	; 0x24
    319e:	5cb2      	ldrb	r2, [r6, r2]
    31a0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    31a2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    31a4:	2225      	movs	r2, #37	; 0x25
    31a6:	5cb2      	ldrb	r2, [r6, r2]
    31a8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    31aa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    31ac:	7ab1      	ldrb	r1, [r6, #10]
    31ae:	7af2      	ldrb	r2, [r6, #11]
    31b0:	4311      	orrs	r1, r2
    31b2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    31b4:	8933      	ldrh	r3, [r6, #8]
    31b6:	2bff      	cmp	r3, #255	; 0xff
    31b8:	d100      	bne.n	31bc <usart_init+0x17c>
    31ba:	e081      	b.n	32c0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    31bc:	2280      	movs	r2, #128	; 0x80
    31be:	0452      	lsls	r2, r2, #17
    31c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    31c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    31c4:	232c      	movs	r3, #44	; 0x2c
    31c6:	5cf3      	ldrb	r3, [r6, r3]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d103      	bne.n	31d4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    31cc:	4b62      	ldr	r3, [pc, #392]	; (3358 <usart_init+0x318>)
    31ce:	789b      	ldrb	r3, [r3, #2]
    31d0:	079b      	lsls	r3, r3, #30
    31d2:	d501      	bpl.n	31d8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    31d4:	2380      	movs	r3, #128	; 0x80
    31d6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    31d8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    31da:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    31dc:	2b00      	cmp	r3, #0
    31de:	d1fc      	bne.n	31da <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    31e0:	4643      	mov	r3, r8
    31e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    31e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    31e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    31e8:	2b00      	cmp	r3, #0
    31ea:	d1fc      	bne.n	31e6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    31ec:	4643      	mov	r3, r8
    31ee:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    31f0:	ab0e      	add	r3, sp, #56	; 0x38
    31f2:	2280      	movs	r2, #128	; 0x80
    31f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31f6:	2200      	movs	r2, #0
    31f8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    31fa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    31fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    31fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3200:	930a      	str	r3, [sp, #40]	; 0x28
    3202:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3204:	930b      	str	r3, [sp, #44]	; 0x2c
    3206:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3208:	930c      	str	r3, [sp, #48]	; 0x30
    320a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    320c:	9302      	str	r3, [sp, #8]
    320e:	930d      	str	r3, [sp, #52]	; 0x34
    3210:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3212:	ae0a      	add	r6, sp, #40	; 0x28
    3214:	e063      	b.n	32de <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3216:	2308      	movs	r3, #8
    3218:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    321a:	3b07      	subs	r3, #7
    321c:	9307      	str	r3, [sp, #28]
    321e:	e77e      	b.n	311e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    3220:	6833      	ldr	r3, [r6, #0]
    3222:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3224:	68f3      	ldr	r3, [r6, #12]
    3226:	469b      	mov	fp, r3
		config->sample_adjustment |
    3228:	6973      	ldr	r3, [r6, #20]
    322a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    322c:	7e33      	ldrb	r3, [r6, #24]
    322e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3230:	2326      	movs	r3, #38	; 0x26
    3232:	5cf3      	ldrb	r3, [r6, r3]
    3234:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3236:	6873      	ldr	r3, [r6, #4]
    3238:	4699      	mov	r9, r3
	switch (transfer_mode)
    323a:	2b00      	cmp	r3, #0
    323c:	d018      	beq.n	3270 <usart_init+0x230>
    323e:	2380      	movs	r3, #128	; 0x80
    3240:	055b      	lsls	r3, r3, #21
    3242:	4599      	cmp	r9, r3
    3244:	d001      	beq.n	324a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    3246:	2000      	movs	r0, #0
    3248:	e025      	b.n	3296 <usart_init+0x256>
			if (!config->use_external_clock) {
    324a:	2327      	movs	r3, #39	; 0x27
    324c:	5cf3      	ldrb	r3, [r6, r3]
    324e:	2b00      	cmp	r3, #0
    3250:	d000      	beq.n	3254 <usart_init+0x214>
    3252:	e779      	b.n	3148 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3254:	6a33      	ldr	r3, [r6, #32]
    3256:	001f      	movs	r7, r3
    3258:	b2c0      	uxtb	r0, r0
    325a:	4b40      	ldr	r3, [pc, #256]	; (335c <usart_init+0x31c>)
    325c:	4798      	blx	r3
    325e:	0001      	movs	r1, r0
    3260:	220e      	movs	r2, #14
    3262:	ab06      	add	r3, sp, #24
    3264:	469c      	mov	ip, r3
    3266:	4462      	add	r2, ip
    3268:	0038      	movs	r0, r7
    326a:	4b3d      	ldr	r3, [pc, #244]	; (3360 <usart_init+0x320>)
    326c:	4798      	blx	r3
    326e:	e012      	b.n	3296 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3270:	2308      	movs	r3, #8
    3272:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3274:	2300      	movs	r3, #0
    3276:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    3278:	2327      	movs	r3, #39	; 0x27
    327a:	5cf3      	ldrb	r3, [r6, r3]
    327c:	2b00      	cmp	r3, #0
    327e:	d00e      	beq.n	329e <usart_init+0x25e>
				status_code =
    3280:	9b06      	ldr	r3, [sp, #24]
    3282:	9300      	str	r3, [sp, #0]
    3284:	9b07      	ldr	r3, [sp, #28]
    3286:	220e      	movs	r2, #14
    3288:	a906      	add	r1, sp, #24
    328a:	468c      	mov	ip, r1
    328c:	4462      	add	r2, ip
    328e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3290:	6a30      	ldr	r0, [r6, #32]
    3292:	4f34      	ldr	r7, [pc, #208]	; (3364 <usart_init+0x324>)
    3294:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    3296:	2800      	cmp	r0, #0
    3298:	d000      	beq.n	329c <usart_init+0x25c>
    329a:	e6e4      	b.n	3066 <usart_init+0x26>
    329c:	e754      	b.n	3148 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    329e:	6a33      	ldr	r3, [r6, #32]
    32a0:	001f      	movs	r7, r3
    32a2:	b2c0      	uxtb	r0, r0
    32a4:	4b2d      	ldr	r3, [pc, #180]	; (335c <usart_init+0x31c>)
    32a6:	4798      	blx	r3
    32a8:	0001      	movs	r1, r0
				status_code =
    32aa:	9b06      	ldr	r3, [sp, #24]
    32ac:	9300      	str	r3, [sp, #0]
    32ae:	9b07      	ldr	r3, [sp, #28]
    32b0:	220e      	movs	r2, #14
    32b2:	a806      	add	r0, sp, #24
    32b4:	4684      	mov	ip, r0
    32b6:	4462      	add	r2, ip
    32b8:	0038      	movs	r0, r7
    32ba:	4f2a      	ldr	r7, [pc, #168]	; (3364 <usart_init+0x324>)
    32bc:	47b8      	blx	r7
    32be:	e7ea      	b.n	3296 <usart_init+0x256>
		if(config->lin_slave_enable) {
    32c0:	7ef3      	ldrb	r3, [r6, #27]
    32c2:	2b00      	cmp	r3, #0
    32c4:	d100      	bne.n	32c8 <usart_init+0x288>
    32c6:	e77d      	b.n	31c4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    32c8:	2380      	movs	r3, #128	; 0x80
    32ca:	04db      	lsls	r3, r3, #19
    32cc:	431f      	orrs	r7, r3
    32ce:	e779      	b.n	31c4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    32d0:	0020      	movs	r0, r4
    32d2:	4b25      	ldr	r3, [pc, #148]	; (3368 <usart_init+0x328>)
    32d4:	4798      	blx	r3
    32d6:	e007      	b.n	32e8 <usart_init+0x2a8>
    32d8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    32da:	2f04      	cmp	r7, #4
    32dc:	d00d      	beq.n	32fa <usart_init+0x2ba>
    32de:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    32e0:	00bb      	lsls	r3, r7, #2
    32e2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    32e4:	2800      	cmp	r0, #0
    32e6:	d0f3      	beq.n	32d0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    32e8:	1c43      	adds	r3, r0, #1
    32ea:	d0f5      	beq.n	32d8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    32ec:	a90e      	add	r1, sp, #56	; 0x38
    32ee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    32f0:	0c00      	lsrs	r0, r0, #16
    32f2:	b2c0      	uxtb	r0, r0
    32f4:	4b1d      	ldr	r3, [pc, #116]	; (336c <usart_init+0x32c>)
    32f6:	4798      	blx	r3
    32f8:	e7ee      	b.n	32d8 <usart_init+0x298>
		module->callback[i]            = NULL;
    32fa:	2300      	movs	r3, #0
    32fc:	60eb      	str	r3, [r5, #12]
    32fe:	612b      	str	r3, [r5, #16]
    3300:	616b      	str	r3, [r5, #20]
    3302:	61ab      	str	r3, [r5, #24]
    3304:	61eb      	str	r3, [r5, #28]
    3306:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    3308:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    330a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    330c:	2200      	movs	r2, #0
    330e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3310:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3312:	3330      	adds	r3, #48	; 0x30
    3314:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    3316:	3301      	adds	r3, #1
    3318:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    331a:	3301      	adds	r3, #1
    331c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    331e:	3301      	adds	r3, #1
    3320:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3322:	6828      	ldr	r0, [r5, #0]
    3324:	4b07      	ldr	r3, [pc, #28]	; (3344 <usart_init+0x304>)
    3326:	4798      	blx	r3
    3328:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    332a:	4911      	ldr	r1, [pc, #68]	; (3370 <usart_init+0x330>)
    332c:	4b11      	ldr	r3, [pc, #68]	; (3374 <usart_init+0x334>)
    332e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3330:	00a4      	lsls	r4, r4, #2
    3332:	4b11      	ldr	r3, [pc, #68]	; (3378 <usart_init+0x338>)
    3334:	50e5      	str	r5, [r4, r3]
	return status_code;
    3336:	2000      	movs	r0, #0
    3338:	e695      	b.n	3066 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    333a:	2310      	movs	r3, #16
    333c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    333e:	2300      	movs	r3, #0
    3340:	9307      	str	r3, [sp, #28]
    3342:	e6ec      	b.n	311e <usart_init+0xde>
    3344:	00003931 	.word	0x00003931
    3348:	40000400 	.word	0x40000400
    334c:	0000432d 	.word	0x0000432d
    3350:	000042a1 	.word	0x000042a1
    3354:	0000376d 	.word	0x0000376d
    3358:	41002000 	.word	0x41002000
    335c:	00004349 	.word	0x00004349
    3360:	000036af 	.word	0x000036af
    3364:	000036d9 	.word	0x000036d9
    3368:	000037b9 	.word	0x000037b9
    336c:	00004425 	.word	0x00004425
    3370:	00003461 	.word	0x00003461
    3374:	0000396d 	.word	0x0000396d
    3378:	200008f0 	.word	0x200008f0

0000337c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    337e:	0006      	movs	r6, r0
    3380:	000c      	movs	r4, r1
    3382:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3384:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    3386:	4b0a      	ldr	r3, [pc, #40]	; (33b0 <_usart_write_buffer+0x34>)
    3388:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    338a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    338c:	b29b      	uxth	r3, r3
    338e:	2b00      	cmp	r3, #0
    3390:	d003      	beq.n	339a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    3392:	4b08      	ldr	r3, [pc, #32]	; (33b4 <_usart_write_buffer+0x38>)
    3394:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    3396:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    3398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    339a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    339c:	4b05      	ldr	r3, [pc, #20]	; (33b4 <_usart_write_buffer+0x38>)
    339e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    33a0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    33a2:	2205      	movs	r2, #5
    33a4:	2333      	movs	r3, #51	; 0x33
    33a6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    33a8:	3b32      	subs	r3, #50	; 0x32
    33aa:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    33ac:	2000      	movs	r0, #0
    33ae:	e7f3      	b.n	3398 <_usart_write_buffer+0x1c>
    33b0:	00003d19 	.word	0x00003d19
    33b4:	00003d59 	.word	0x00003d59

000033b8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    33b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ba:	0004      	movs	r4, r0
    33bc:	000d      	movs	r5, r1
    33be:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    33c0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    33c2:	4b0f      	ldr	r3, [pc, #60]	; (3400 <_usart_read_buffer+0x48>)
    33c4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    33c6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    33c8:	b29b      	uxth	r3, r3
    33ca:	2b00      	cmp	r3, #0
    33cc:	d003      	beq.n	33d6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    33ce:	4b0d      	ldr	r3, [pc, #52]	; (3404 <_usart_read_buffer+0x4c>)
    33d0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    33d2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    33d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    33d6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    33d8:	4b0a      	ldr	r3, [pc, #40]	; (3404 <_usart_read_buffer+0x4c>)
    33da:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    33dc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    33de:	2205      	movs	r2, #5
    33e0:	2332      	movs	r3, #50	; 0x32
    33e2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    33e4:	3b2e      	subs	r3, #46	; 0x2e
    33e6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    33e8:	7a23      	ldrb	r3, [r4, #8]
    33ea:	2b00      	cmp	r3, #0
    33ec:	d001      	beq.n	33f2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    33ee:	2320      	movs	r3, #32
    33f0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    33f2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    33f4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    33f6:	2b00      	cmp	r3, #0
    33f8:	d0ec      	beq.n	33d4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    33fa:	2308      	movs	r3, #8
    33fc:	75bb      	strb	r3, [r7, #22]
    33fe:	e7e9      	b.n	33d4 <_usart_read_buffer+0x1c>
    3400:	00003d19 	.word	0x00003d19
    3404:	00003d59 	.word	0x00003d59

00003408 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3408:	1c93      	adds	r3, r2, #2
    340a:	009b      	lsls	r3, r3, #2
    340c:	18c3      	adds	r3, r0, r3
    340e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    3410:	2130      	movs	r1, #48	; 0x30
    3412:	2301      	movs	r3, #1
    3414:	4093      	lsls	r3, r2
    3416:	001a      	movs	r2, r3
    3418:	5c43      	ldrb	r3, [r0, r1]
    341a:	4313      	orrs	r3, r2
    341c:	5443      	strb	r3, [r0, r1]
}
    341e:	4770      	bx	lr

00003420 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    3420:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3422:	2317      	movs	r3, #23
	if (length == 0) {
    3424:	2a00      	cmp	r2, #0
    3426:	d101      	bne.n	342c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    3428:	0018      	movs	r0, r3
    342a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    342c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    342e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    3430:	2c00      	cmp	r4, #0
    3432:	d0f9      	beq.n	3428 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    3434:	4b01      	ldr	r3, [pc, #4]	; (343c <usart_write_buffer_job+0x1c>)
    3436:	4798      	blx	r3
    3438:	0003      	movs	r3, r0
    343a:	e7f5      	b.n	3428 <usart_write_buffer_job+0x8>
    343c:	0000337d 	.word	0x0000337d

00003440 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3440:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3442:	2317      	movs	r3, #23
	if (length == 0) {
    3444:	2a00      	cmp	r2, #0
    3446:	d101      	bne.n	344c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    3448:	0018      	movs	r0, r3
    344a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    344c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    344e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    3450:	2c00      	cmp	r4, #0
    3452:	d0f9      	beq.n	3448 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    3454:	4b01      	ldr	r3, [pc, #4]	; (345c <usart_read_buffer_job+0x1c>)
    3456:	4798      	blx	r3
    3458:	0003      	movs	r3, r0
    345a:	e7f5      	b.n	3448 <usart_read_buffer_job+0x8>
    345c:	000033b9 	.word	0x000033b9

00003460 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3462:	0080      	lsls	r0, r0, #2
    3464:	4b62      	ldr	r3, [pc, #392]	; (35f0 <_usart_interrupt_handler+0x190>)
    3466:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3468:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    346a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    346c:	2b00      	cmp	r3, #0
    346e:	d1fc      	bne.n	346a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3470:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3472:	7da6      	ldrb	r6, [r4, #22]
    3474:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    3476:	2330      	movs	r3, #48	; 0x30
    3478:	5ceb      	ldrb	r3, [r5, r3]
    347a:	2231      	movs	r2, #49	; 0x31
    347c:	5caf      	ldrb	r7, [r5, r2]
    347e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3480:	07f3      	lsls	r3, r6, #31
    3482:	d522      	bpl.n	34ca <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3484:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3486:	b29b      	uxth	r3, r3
    3488:	2b00      	cmp	r3, #0
    348a:	d01c      	beq.n	34c6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    348c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    348e:	7813      	ldrb	r3, [r2, #0]
    3490:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3492:	1c51      	adds	r1, r2, #1
    3494:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3496:	7969      	ldrb	r1, [r5, #5]
    3498:	2901      	cmp	r1, #1
    349a:	d00e      	beq.n	34ba <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    349c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    349e:	05db      	lsls	r3, r3, #23
    34a0:	0ddb      	lsrs	r3, r3, #23
    34a2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    34a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    34a6:	3b01      	subs	r3, #1
    34a8:	b29b      	uxth	r3, r3
    34aa:	85eb      	strh	r3, [r5, #46]	; 0x2e
    34ac:	2b00      	cmp	r3, #0
    34ae:	d10c      	bne.n	34ca <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    34b0:	3301      	adds	r3, #1
    34b2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    34b4:	3301      	adds	r3, #1
    34b6:	75a3      	strb	r3, [r4, #22]
    34b8:	e007      	b.n	34ca <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    34ba:	7851      	ldrb	r1, [r2, #1]
    34bc:	0209      	lsls	r1, r1, #8
    34be:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    34c0:	3202      	adds	r2, #2
    34c2:	62aa      	str	r2, [r5, #40]	; 0x28
    34c4:	e7eb      	b.n	349e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    34c6:	2301      	movs	r3, #1
    34c8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    34ca:	07b3      	lsls	r3, r6, #30
    34cc:	d506      	bpl.n	34dc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    34ce:	2302      	movs	r3, #2
    34d0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    34d2:	2200      	movs	r2, #0
    34d4:	3331      	adds	r3, #49	; 0x31
    34d6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    34d8:	07fb      	lsls	r3, r7, #31
    34da:	d41a      	bmi.n	3512 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    34dc:	0773      	lsls	r3, r6, #29
    34de:	d565      	bpl.n	35ac <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    34e0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    34e2:	b29b      	uxth	r3, r3
    34e4:	2b00      	cmp	r3, #0
    34e6:	d05f      	beq.n	35a8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    34e8:	8b63      	ldrh	r3, [r4, #26]
    34ea:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    34ec:	071a      	lsls	r2, r3, #28
    34ee:	d414      	bmi.n	351a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    34f0:	223f      	movs	r2, #63	; 0x3f
    34f2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    34f4:	2b00      	cmp	r3, #0
    34f6:	d034      	beq.n	3562 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    34f8:	079a      	lsls	r2, r3, #30
    34fa:	d511      	bpl.n	3520 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    34fc:	221a      	movs	r2, #26
    34fe:	2332      	movs	r3, #50	; 0x32
    3500:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3502:	3b30      	subs	r3, #48	; 0x30
    3504:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3506:	077b      	lsls	r3, r7, #29
    3508:	d550      	bpl.n	35ac <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    350a:	0028      	movs	r0, r5
    350c:	696b      	ldr	r3, [r5, #20]
    350e:	4798      	blx	r3
    3510:	e04c      	b.n	35ac <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3512:	0028      	movs	r0, r5
    3514:	68eb      	ldr	r3, [r5, #12]
    3516:	4798      	blx	r3
    3518:	e7e0      	b.n	34dc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    351a:	2237      	movs	r2, #55	; 0x37
    351c:	4013      	ands	r3, r2
    351e:	e7e9      	b.n	34f4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3520:	075a      	lsls	r2, r3, #29
    3522:	d505      	bpl.n	3530 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    3524:	221e      	movs	r2, #30
    3526:	2332      	movs	r3, #50	; 0x32
    3528:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    352a:	3b2e      	subs	r3, #46	; 0x2e
    352c:	8363      	strh	r3, [r4, #26]
    352e:	e7ea      	b.n	3506 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3530:	07da      	lsls	r2, r3, #31
    3532:	d505      	bpl.n	3540 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    3534:	2213      	movs	r2, #19
    3536:	2332      	movs	r3, #50	; 0x32
    3538:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    353a:	3b31      	subs	r3, #49	; 0x31
    353c:	8363      	strh	r3, [r4, #26]
    353e:	e7e2      	b.n	3506 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3540:	06da      	lsls	r2, r3, #27
    3542:	d505      	bpl.n	3550 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    3544:	2242      	movs	r2, #66	; 0x42
    3546:	2332      	movs	r3, #50	; 0x32
    3548:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    354a:	3b22      	subs	r3, #34	; 0x22
    354c:	8363      	strh	r3, [r4, #26]
    354e:	e7da      	b.n	3506 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3550:	2220      	movs	r2, #32
    3552:	421a      	tst	r2, r3
    3554:	d0d7      	beq.n	3506 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3556:	3221      	adds	r2, #33	; 0x21
    3558:	2332      	movs	r3, #50	; 0x32
    355a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    355c:	3b12      	subs	r3, #18
    355e:	8363      	strh	r3, [r4, #26]
    3560:	e7d1      	b.n	3506 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3562:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3564:	05db      	lsls	r3, r3, #23
    3566:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3568:	b2da      	uxtb	r2, r3
    356a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    356c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    356e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3570:	1c51      	adds	r1, r2, #1
    3572:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3574:	7969      	ldrb	r1, [r5, #5]
    3576:	2901      	cmp	r1, #1
    3578:	d010      	beq.n	359c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    357a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    357c:	3b01      	subs	r3, #1
    357e:	b29b      	uxth	r3, r3
    3580:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3582:	2b00      	cmp	r3, #0
    3584:	d112      	bne.n	35ac <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3586:	3304      	adds	r3, #4
    3588:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    358a:	2200      	movs	r2, #0
    358c:	332e      	adds	r3, #46	; 0x2e
    358e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    3590:	07bb      	lsls	r3, r7, #30
    3592:	d50b      	bpl.n	35ac <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3594:	0028      	movs	r0, r5
    3596:	692b      	ldr	r3, [r5, #16]
    3598:	4798      	blx	r3
    359a:	e007      	b.n	35ac <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    359c:	0a1b      	lsrs	r3, r3, #8
    359e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    35a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    35a2:	3301      	adds	r3, #1
    35a4:	626b      	str	r3, [r5, #36]	; 0x24
    35a6:	e7e8      	b.n	357a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    35a8:	2304      	movs	r3, #4
    35aa:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    35ac:	06f3      	lsls	r3, r6, #27
    35ae:	d504      	bpl.n	35ba <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    35b0:	2310      	movs	r3, #16
    35b2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    35b4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    35b6:	06fb      	lsls	r3, r7, #27
    35b8:	d40e      	bmi.n	35d8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    35ba:	06b3      	lsls	r3, r6, #26
    35bc:	d504      	bpl.n	35c8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    35be:	2320      	movs	r3, #32
    35c0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    35c2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    35c4:	073b      	lsls	r3, r7, #28
    35c6:	d40b      	bmi.n	35e0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    35c8:	0733      	lsls	r3, r6, #28
    35ca:	d504      	bpl.n	35d6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    35cc:	2308      	movs	r3, #8
    35ce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    35d0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    35d2:	06bb      	lsls	r3, r7, #26
    35d4:	d408      	bmi.n	35e8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    35d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    35d8:	0028      	movs	r0, r5
    35da:	69eb      	ldr	r3, [r5, #28]
    35dc:	4798      	blx	r3
    35de:	e7ec      	b.n	35ba <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    35e0:	0028      	movs	r0, r5
    35e2:	69ab      	ldr	r3, [r5, #24]
    35e4:	4798      	blx	r3
    35e6:	e7ef      	b.n	35c8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    35e8:	6a2b      	ldr	r3, [r5, #32]
    35ea:	0028      	movs	r0, r5
    35ec:	4798      	blx	r3
}
    35ee:	e7f2      	b.n	35d6 <_usart_interrupt_handler+0x176>
    35f0:	200008f0 	.word	0x200008f0

000035f4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    35f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35f6:	46de      	mov	lr, fp
    35f8:	4657      	mov	r7, sl
    35fa:	464e      	mov	r6, r9
    35fc:	4645      	mov	r5, r8
    35fe:	b5e0      	push	{r5, r6, r7, lr}
    3600:	b087      	sub	sp, #28
    3602:	4680      	mov	r8, r0
    3604:	9104      	str	r1, [sp, #16]
    3606:	0016      	movs	r6, r2
    3608:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    360a:	2200      	movs	r2, #0
    360c:	2300      	movs	r3, #0
    360e:	2100      	movs	r1, #0
    3610:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    3612:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3614:	2001      	movs	r0, #1
    3616:	0021      	movs	r1, r4
    3618:	9600      	str	r6, [sp, #0]
    361a:	9701      	str	r7, [sp, #4]
    361c:	465c      	mov	r4, fp
    361e:	9403      	str	r4, [sp, #12]
    3620:	4644      	mov	r4, r8
    3622:	9405      	str	r4, [sp, #20]
    3624:	e013      	b.n	364e <long_division+0x5a>
    3626:	2420      	movs	r4, #32
    3628:	1a64      	subs	r4, r4, r1
    362a:	0005      	movs	r5, r0
    362c:	40e5      	lsrs	r5, r4
    362e:	46a8      	mov	r8, r5
    3630:	e014      	b.n	365c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    3632:	9c00      	ldr	r4, [sp, #0]
    3634:	9d01      	ldr	r5, [sp, #4]
    3636:	1b12      	subs	r2, r2, r4
    3638:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    363a:	465c      	mov	r4, fp
    363c:	464d      	mov	r5, r9
    363e:	432c      	orrs	r4, r5
    3640:	46a3      	mov	fp, r4
    3642:	9c03      	ldr	r4, [sp, #12]
    3644:	4645      	mov	r5, r8
    3646:	432c      	orrs	r4, r5
    3648:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    364a:	3901      	subs	r1, #1
    364c:	d325      	bcc.n	369a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    364e:	2420      	movs	r4, #32
    3650:	4264      	negs	r4, r4
    3652:	190c      	adds	r4, r1, r4
    3654:	d4e7      	bmi.n	3626 <long_division+0x32>
    3656:	0005      	movs	r5, r0
    3658:	40a5      	lsls	r5, r4
    365a:	46a8      	mov	r8, r5
    365c:	0004      	movs	r4, r0
    365e:	408c      	lsls	r4, r1
    3660:	46a1      	mov	r9, r4
		r = r << 1;
    3662:	1892      	adds	r2, r2, r2
    3664:	415b      	adcs	r3, r3
    3666:	0014      	movs	r4, r2
    3668:	001d      	movs	r5, r3
		if (n & bit_shift) {
    366a:	9e05      	ldr	r6, [sp, #20]
    366c:	464f      	mov	r7, r9
    366e:	403e      	ands	r6, r7
    3670:	46b4      	mov	ip, r6
    3672:	9e04      	ldr	r6, [sp, #16]
    3674:	4647      	mov	r7, r8
    3676:	403e      	ands	r6, r7
    3678:	46b2      	mov	sl, r6
    367a:	4666      	mov	r6, ip
    367c:	4657      	mov	r7, sl
    367e:	433e      	orrs	r6, r7
    3680:	d003      	beq.n	368a <long_division+0x96>
			r |= 0x01;
    3682:	0006      	movs	r6, r0
    3684:	4326      	orrs	r6, r4
    3686:	0032      	movs	r2, r6
    3688:	002b      	movs	r3, r5
		if (r >= d) {
    368a:	9c00      	ldr	r4, [sp, #0]
    368c:	9d01      	ldr	r5, [sp, #4]
    368e:	429d      	cmp	r5, r3
    3690:	d8db      	bhi.n	364a <long_division+0x56>
    3692:	d1ce      	bne.n	3632 <long_division+0x3e>
    3694:	4294      	cmp	r4, r2
    3696:	d8d8      	bhi.n	364a <long_division+0x56>
    3698:	e7cb      	b.n	3632 <long_division+0x3e>
    369a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    369c:	4658      	mov	r0, fp
    369e:	0019      	movs	r1, r3
    36a0:	b007      	add	sp, #28
    36a2:	bc3c      	pop	{r2, r3, r4, r5}
    36a4:	4690      	mov	r8, r2
    36a6:	4699      	mov	r9, r3
    36a8:	46a2      	mov	sl, r4
    36aa:	46ab      	mov	fp, r5
    36ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036ae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    36ae:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    36b0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36b2:	2340      	movs	r3, #64	; 0x40
    36b4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    36b6:	4281      	cmp	r1, r0
    36b8:	d202      	bcs.n	36c0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    36ba:	0018      	movs	r0, r3
    36bc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    36be:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    36c0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    36c2:	1c63      	adds	r3, r4, #1
    36c4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    36c6:	4288      	cmp	r0, r1
    36c8:	d9f9      	bls.n	36be <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36ca:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    36cc:	2cff      	cmp	r4, #255	; 0xff
    36ce:	d8f4      	bhi.n	36ba <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    36d0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    36d2:	2300      	movs	r3, #0
    36d4:	e7f1      	b.n	36ba <_sercom_get_sync_baud_val+0xc>
	...

000036d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    36d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36da:	b083      	sub	sp, #12
    36dc:	000f      	movs	r7, r1
    36de:	0016      	movs	r6, r2
    36e0:	aa08      	add	r2, sp, #32
    36e2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    36e4:	0004      	movs	r4, r0
    36e6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36e8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    36ea:	42bc      	cmp	r4, r7
    36ec:	d902      	bls.n	36f4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    36ee:	0010      	movs	r0, r2
    36f0:	b003      	add	sp, #12
    36f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    36f4:	2b00      	cmp	r3, #0
    36f6:	d114      	bne.n	3722 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    36f8:	0002      	movs	r2, r0
    36fa:	0008      	movs	r0, r1
    36fc:	2100      	movs	r1, #0
    36fe:	4c19      	ldr	r4, [pc, #100]	; (3764 <_sercom_get_async_baud_val+0x8c>)
    3700:	47a0      	blx	r4
    3702:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    3704:	003a      	movs	r2, r7
    3706:	2300      	movs	r3, #0
    3708:	2000      	movs	r0, #0
    370a:	4c17      	ldr	r4, [pc, #92]	; (3768 <_sercom_get_async_baud_val+0x90>)
    370c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    370e:	2200      	movs	r2, #0
    3710:	2301      	movs	r3, #1
    3712:	1a12      	subs	r2, r2, r0
    3714:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3716:	0c12      	lsrs	r2, r2, #16
    3718:	041b      	lsls	r3, r3, #16
    371a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    371c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    371e:	2200      	movs	r2, #0
    3720:	e7e5      	b.n	36ee <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    3722:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3724:	2b01      	cmp	r3, #1
    3726:	d1f9      	bne.n	371c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    3728:	000a      	movs	r2, r1
    372a:	2300      	movs	r3, #0
    372c:	2100      	movs	r1, #0
    372e:	4c0d      	ldr	r4, [pc, #52]	; (3764 <_sercom_get_async_baud_val+0x8c>)
    3730:	47a0      	blx	r4
    3732:	0002      	movs	r2, r0
    3734:	000b      	movs	r3, r1
    3736:	9200      	str	r2, [sp, #0]
    3738:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    373a:	0038      	movs	r0, r7
    373c:	2100      	movs	r1, #0
    373e:	4c0a      	ldr	r4, [pc, #40]	; (3768 <_sercom_get_async_baud_val+0x90>)
    3740:	47a0      	blx	r4
    3742:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    3744:	2380      	movs	r3, #128	; 0x80
    3746:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3748:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    374a:	4298      	cmp	r0, r3
    374c:	d8cf      	bhi.n	36ee <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    374e:	0f79      	lsrs	r1, r7, #29
    3750:	00f8      	lsls	r0, r7, #3
    3752:	9a00      	ldr	r2, [sp, #0]
    3754:	9b01      	ldr	r3, [sp, #4]
    3756:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    3758:	00ea      	lsls	r2, r5, #3
    375a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    375c:	b2d2      	uxtb	r2, r2
    375e:	0352      	lsls	r2, r2, #13
    3760:	432a      	orrs	r2, r5
    3762:	e7db      	b.n	371c <_sercom_get_async_baud_val+0x44>
    3764:	000049a9 	.word	0x000049a9
    3768:	000035f5 	.word	0x000035f5

0000376c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    376c:	b510      	push	{r4, lr}
    376e:	b082      	sub	sp, #8
    3770:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3772:	4b0e      	ldr	r3, [pc, #56]	; (37ac <sercom_set_gclk_generator+0x40>)
    3774:	781b      	ldrb	r3, [r3, #0]
    3776:	2b00      	cmp	r3, #0
    3778:	d007      	beq.n	378a <sercom_set_gclk_generator+0x1e>
    377a:	2900      	cmp	r1, #0
    377c:	d105      	bne.n	378a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    377e:	4b0b      	ldr	r3, [pc, #44]	; (37ac <sercom_set_gclk_generator+0x40>)
    3780:	785b      	ldrb	r3, [r3, #1]
    3782:	4283      	cmp	r3, r0
    3784:	d010      	beq.n	37a8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3786:	201d      	movs	r0, #29
    3788:	e00c      	b.n	37a4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    378a:	a901      	add	r1, sp, #4
    378c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    378e:	2013      	movs	r0, #19
    3790:	4b07      	ldr	r3, [pc, #28]	; (37b0 <sercom_set_gclk_generator+0x44>)
    3792:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3794:	2013      	movs	r0, #19
    3796:	4b07      	ldr	r3, [pc, #28]	; (37b4 <sercom_set_gclk_generator+0x48>)
    3798:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    379a:	4b04      	ldr	r3, [pc, #16]	; (37ac <sercom_set_gclk_generator+0x40>)
    379c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    379e:	2201      	movs	r2, #1
    37a0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    37a2:	2000      	movs	r0, #0
}
    37a4:	b002      	add	sp, #8
    37a6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    37a8:	2000      	movs	r0, #0
    37aa:	e7fb      	b.n	37a4 <sercom_set_gclk_generator+0x38>
    37ac:	200004ec 	.word	0x200004ec
    37b0:	0000432d 	.word	0x0000432d
    37b4:	000042a1 	.word	0x000042a1

000037b8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    37b8:	4b40      	ldr	r3, [pc, #256]	; (38bc <_sercom_get_default_pad+0x104>)
    37ba:	4298      	cmp	r0, r3
    37bc:	d031      	beq.n	3822 <_sercom_get_default_pad+0x6a>
    37be:	d90a      	bls.n	37d6 <_sercom_get_default_pad+0x1e>
    37c0:	4b3f      	ldr	r3, [pc, #252]	; (38c0 <_sercom_get_default_pad+0x108>)
    37c2:	4298      	cmp	r0, r3
    37c4:	d04d      	beq.n	3862 <_sercom_get_default_pad+0xaa>
    37c6:	4b3f      	ldr	r3, [pc, #252]	; (38c4 <_sercom_get_default_pad+0x10c>)
    37c8:	4298      	cmp	r0, r3
    37ca:	d05a      	beq.n	3882 <_sercom_get_default_pad+0xca>
    37cc:	4b3e      	ldr	r3, [pc, #248]	; (38c8 <_sercom_get_default_pad+0x110>)
    37ce:	4298      	cmp	r0, r3
    37d0:	d037      	beq.n	3842 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    37d2:	2000      	movs	r0, #0
}
    37d4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    37d6:	4b3d      	ldr	r3, [pc, #244]	; (38cc <_sercom_get_default_pad+0x114>)
    37d8:	4298      	cmp	r0, r3
    37da:	d00c      	beq.n	37f6 <_sercom_get_default_pad+0x3e>
    37dc:	4b3c      	ldr	r3, [pc, #240]	; (38d0 <_sercom_get_default_pad+0x118>)
    37de:	4298      	cmp	r0, r3
    37e0:	d1f7      	bne.n	37d2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37e2:	2901      	cmp	r1, #1
    37e4:	d017      	beq.n	3816 <_sercom_get_default_pad+0x5e>
    37e6:	2900      	cmp	r1, #0
    37e8:	d05d      	beq.n	38a6 <_sercom_get_default_pad+0xee>
    37ea:	2902      	cmp	r1, #2
    37ec:	d015      	beq.n	381a <_sercom_get_default_pad+0x62>
    37ee:	2903      	cmp	r1, #3
    37f0:	d015      	beq.n	381e <_sercom_get_default_pad+0x66>
	return 0;
    37f2:	2000      	movs	r0, #0
    37f4:	e7ee      	b.n	37d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37f6:	2901      	cmp	r1, #1
    37f8:	d007      	beq.n	380a <_sercom_get_default_pad+0x52>
    37fa:	2900      	cmp	r1, #0
    37fc:	d051      	beq.n	38a2 <_sercom_get_default_pad+0xea>
    37fe:	2902      	cmp	r1, #2
    3800:	d005      	beq.n	380e <_sercom_get_default_pad+0x56>
    3802:	2903      	cmp	r1, #3
    3804:	d005      	beq.n	3812 <_sercom_get_default_pad+0x5a>
	return 0;
    3806:	2000      	movs	r0, #0
    3808:	e7e4      	b.n	37d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    380a:	4832      	ldr	r0, [pc, #200]	; (38d4 <_sercom_get_default_pad+0x11c>)
    380c:	e7e2      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    380e:	4832      	ldr	r0, [pc, #200]	; (38d8 <_sercom_get_default_pad+0x120>)
    3810:	e7e0      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    3812:	4832      	ldr	r0, [pc, #200]	; (38dc <_sercom_get_default_pad+0x124>)
    3814:	e7de      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    3816:	4832      	ldr	r0, [pc, #200]	; (38e0 <_sercom_get_default_pad+0x128>)
    3818:	e7dc      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    381a:	4832      	ldr	r0, [pc, #200]	; (38e4 <_sercom_get_default_pad+0x12c>)
    381c:	e7da      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    381e:	4832      	ldr	r0, [pc, #200]	; (38e8 <_sercom_get_default_pad+0x130>)
    3820:	e7d8      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    3822:	2901      	cmp	r1, #1
    3824:	d007      	beq.n	3836 <_sercom_get_default_pad+0x7e>
    3826:	2900      	cmp	r1, #0
    3828:	d03f      	beq.n	38aa <_sercom_get_default_pad+0xf2>
    382a:	2902      	cmp	r1, #2
    382c:	d005      	beq.n	383a <_sercom_get_default_pad+0x82>
    382e:	2903      	cmp	r1, #3
    3830:	d005      	beq.n	383e <_sercom_get_default_pad+0x86>
	return 0;
    3832:	2000      	movs	r0, #0
    3834:	e7ce      	b.n	37d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3836:	482d      	ldr	r0, [pc, #180]	; (38ec <_sercom_get_default_pad+0x134>)
    3838:	e7cc      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    383a:	482d      	ldr	r0, [pc, #180]	; (38f0 <_sercom_get_default_pad+0x138>)
    383c:	e7ca      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    383e:	482d      	ldr	r0, [pc, #180]	; (38f4 <_sercom_get_default_pad+0x13c>)
    3840:	e7c8      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    3842:	2901      	cmp	r1, #1
    3844:	d007      	beq.n	3856 <_sercom_get_default_pad+0x9e>
    3846:	2900      	cmp	r1, #0
    3848:	d031      	beq.n	38ae <_sercom_get_default_pad+0xf6>
    384a:	2902      	cmp	r1, #2
    384c:	d005      	beq.n	385a <_sercom_get_default_pad+0xa2>
    384e:	2903      	cmp	r1, #3
    3850:	d005      	beq.n	385e <_sercom_get_default_pad+0xa6>
	return 0;
    3852:	2000      	movs	r0, #0
    3854:	e7be      	b.n	37d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3856:	4828      	ldr	r0, [pc, #160]	; (38f8 <_sercom_get_default_pad+0x140>)
    3858:	e7bc      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    385a:	4828      	ldr	r0, [pc, #160]	; (38fc <_sercom_get_default_pad+0x144>)
    385c:	e7ba      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    385e:	4828      	ldr	r0, [pc, #160]	; (3900 <_sercom_get_default_pad+0x148>)
    3860:	e7b8      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    3862:	2901      	cmp	r1, #1
    3864:	d007      	beq.n	3876 <_sercom_get_default_pad+0xbe>
    3866:	2900      	cmp	r1, #0
    3868:	d023      	beq.n	38b2 <_sercom_get_default_pad+0xfa>
    386a:	2902      	cmp	r1, #2
    386c:	d005      	beq.n	387a <_sercom_get_default_pad+0xc2>
    386e:	2903      	cmp	r1, #3
    3870:	d005      	beq.n	387e <_sercom_get_default_pad+0xc6>
	return 0;
    3872:	2000      	movs	r0, #0
    3874:	e7ae      	b.n	37d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3876:	4823      	ldr	r0, [pc, #140]	; (3904 <_sercom_get_default_pad+0x14c>)
    3878:	e7ac      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    387a:	4823      	ldr	r0, [pc, #140]	; (3908 <_sercom_get_default_pad+0x150>)
    387c:	e7aa      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    387e:	4823      	ldr	r0, [pc, #140]	; (390c <_sercom_get_default_pad+0x154>)
    3880:	e7a8      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    3882:	2901      	cmp	r1, #1
    3884:	d007      	beq.n	3896 <_sercom_get_default_pad+0xde>
    3886:	2900      	cmp	r1, #0
    3888:	d015      	beq.n	38b6 <_sercom_get_default_pad+0xfe>
    388a:	2902      	cmp	r1, #2
    388c:	d005      	beq.n	389a <_sercom_get_default_pad+0xe2>
    388e:	2903      	cmp	r1, #3
    3890:	d005      	beq.n	389e <_sercom_get_default_pad+0xe6>
	return 0;
    3892:	2000      	movs	r0, #0
    3894:	e79e      	b.n	37d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3896:	481e      	ldr	r0, [pc, #120]	; (3910 <_sercom_get_default_pad+0x158>)
    3898:	e79c      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    389a:	481e      	ldr	r0, [pc, #120]	; (3914 <_sercom_get_default_pad+0x15c>)
    389c:	e79a      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    389e:	481e      	ldr	r0, [pc, #120]	; (3918 <_sercom_get_default_pad+0x160>)
    38a0:	e798      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38a2:	481e      	ldr	r0, [pc, #120]	; (391c <_sercom_get_default_pad+0x164>)
    38a4:	e796      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38a6:	2003      	movs	r0, #3
    38a8:	e794      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38aa:	481d      	ldr	r0, [pc, #116]	; (3920 <_sercom_get_default_pad+0x168>)
    38ac:	e792      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38ae:	481d      	ldr	r0, [pc, #116]	; (3924 <_sercom_get_default_pad+0x16c>)
    38b0:	e790      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38b2:	481d      	ldr	r0, [pc, #116]	; (3928 <_sercom_get_default_pad+0x170>)
    38b4:	e78e      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38b6:	481d      	ldr	r0, [pc, #116]	; (392c <_sercom_get_default_pad+0x174>)
    38b8:	e78c      	b.n	37d4 <_sercom_get_default_pad+0x1c>
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	42001000 	.word	0x42001000
    38c0:	42001800 	.word	0x42001800
    38c4:	42001c00 	.word	0x42001c00
    38c8:	42001400 	.word	0x42001400
    38cc:	42000800 	.word	0x42000800
    38d0:	42000c00 	.word	0x42000c00
    38d4:	00050003 	.word	0x00050003
    38d8:	00060003 	.word	0x00060003
    38dc:	00070003 	.word	0x00070003
    38e0:	00010003 	.word	0x00010003
    38e4:	001e0003 	.word	0x001e0003
    38e8:	001f0003 	.word	0x001f0003
    38ec:	00090003 	.word	0x00090003
    38f0:	000a0003 	.word	0x000a0003
    38f4:	000b0003 	.word	0x000b0003
    38f8:	00110003 	.word	0x00110003
    38fc:	00120003 	.word	0x00120003
    3900:	00130003 	.word	0x00130003
    3904:	000d0003 	.word	0x000d0003
    3908:	000e0003 	.word	0x000e0003
    390c:	000f0003 	.word	0x000f0003
    3910:	00170003 	.word	0x00170003
    3914:	00180003 	.word	0x00180003
    3918:	00190003 	.word	0x00190003
    391c:	00040003 	.word	0x00040003
    3920:	00080003 	.word	0x00080003
    3924:	00100003 	.word	0x00100003
    3928:	000c0003 	.word	0x000c0003
    392c:	00160003 	.word	0x00160003

00003930 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3930:	b530      	push	{r4, r5, lr}
    3932:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3934:	4b0b      	ldr	r3, [pc, #44]	; (3964 <_sercom_get_sercom_inst_index+0x34>)
    3936:	466a      	mov	r2, sp
    3938:	cb32      	ldmia	r3!, {r1, r4, r5}
    393a:	c232      	stmia	r2!, {r1, r4, r5}
    393c:	cb32      	ldmia	r3!, {r1, r4, r5}
    393e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3940:	9b00      	ldr	r3, [sp, #0]
    3942:	4283      	cmp	r3, r0
    3944:	d00b      	beq.n	395e <_sercom_get_sercom_inst_index+0x2e>
    3946:	2301      	movs	r3, #1
    3948:	009a      	lsls	r2, r3, #2
    394a:	4669      	mov	r1, sp
    394c:	5852      	ldr	r2, [r2, r1]
    394e:	4282      	cmp	r2, r0
    3950:	d006      	beq.n	3960 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3952:	3301      	adds	r3, #1
    3954:	2b06      	cmp	r3, #6
    3956:	d1f7      	bne.n	3948 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3958:	2000      	movs	r0, #0
}
    395a:	b007      	add	sp, #28
    395c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    395e:	2300      	movs	r3, #0
			return i;
    3960:	b2d8      	uxtb	r0, r3
    3962:	e7fa      	b.n	395a <_sercom_get_sercom_inst_index+0x2a>
    3964:	00004ac8 	.word	0x00004ac8

00003968 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3968:	4770      	bx	lr
	...

0000396c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    396c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    396e:	4b0a      	ldr	r3, [pc, #40]	; (3998 <_sercom_set_handler+0x2c>)
    3970:	781b      	ldrb	r3, [r3, #0]
    3972:	2b00      	cmp	r3, #0
    3974:	d10c      	bne.n	3990 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3976:	4f09      	ldr	r7, [pc, #36]	; (399c <_sercom_set_handler+0x30>)
    3978:	4e09      	ldr	r6, [pc, #36]	; (39a0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    397a:	4d0a      	ldr	r5, [pc, #40]	; (39a4 <_sercom_set_handler+0x38>)
    397c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    397e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3980:	195a      	adds	r2, r3, r5
    3982:	6014      	str	r4, [r2, #0]
    3984:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3986:	2b18      	cmp	r3, #24
    3988:	d1f9      	bne.n	397e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    398a:	2201      	movs	r2, #1
    398c:	4b02      	ldr	r3, [pc, #8]	; (3998 <_sercom_set_handler+0x2c>)
    398e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3990:	0080      	lsls	r0, r0, #2
    3992:	4b02      	ldr	r3, [pc, #8]	; (399c <_sercom_set_handler+0x30>)
    3994:	50c1      	str	r1, [r0, r3]
}
    3996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3998:	200004ee 	.word	0x200004ee
    399c:	200004f0 	.word	0x200004f0
    39a0:	00003969 	.word	0x00003969
    39a4:	200008f0 	.word	0x200008f0

000039a8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    39a8:	b500      	push	{lr}
    39aa:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    39ac:	2309      	movs	r3, #9
    39ae:	466a      	mov	r2, sp
    39b0:	7013      	strb	r3, [r2, #0]
    39b2:	3301      	adds	r3, #1
    39b4:	7053      	strb	r3, [r2, #1]
    39b6:	3301      	adds	r3, #1
    39b8:	7093      	strb	r3, [r2, #2]
    39ba:	3301      	adds	r3, #1
    39bc:	70d3      	strb	r3, [r2, #3]
    39be:	3301      	adds	r3, #1
    39c0:	7113      	strb	r3, [r2, #4]
    39c2:	3301      	adds	r3, #1
    39c4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39c6:	4b03      	ldr	r3, [pc, #12]	; (39d4 <_sercom_get_interrupt_vector+0x2c>)
    39c8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    39ca:	466b      	mov	r3, sp
    39cc:	5618      	ldrsb	r0, [r3, r0]
}
    39ce:	b003      	add	sp, #12
    39d0:	bd00      	pop	{pc}
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	00003931 	.word	0x00003931

000039d8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    39d8:	b510      	push	{r4, lr}
    39da:	4b02      	ldr	r3, [pc, #8]	; (39e4 <SERCOM0_Handler+0xc>)
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	2000      	movs	r0, #0
    39e0:	4798      	blx	r3
    39e2:	bd10      	pop	{r4, pc}
    39e4:	200004f0 	.word	0x200004f0

000039e8 <SERCOM1_Handler>:
    39e8:	b510      	push	{r4, lr}
    39ea:	4b02      	ldr	r3, [pc, #8]	; (39f4 <SERCOM1_Handler+0xc>)
    39ec:	685b      	ldr	r3, [r3, #4]
    39ee:	2001      	movs	r0, #1
    39f0:	4798      	blx	r3
    39f2:	bd10      	pop	{r4, pc}
    39f4:	200004f0 	.word	0x200004f0

000039f8 <SERCOM2_Handler>:
    39f8:	b510      	push	{r4, lr}
    39fa:	4b02      	ldr	r3, [pc, #8]	; (3a04 <SERCOM2_Handler+0xc>)
    39fc:	689b      	ldr	r3, [r3, #8]
    39fe:	2002      	movs	r0, #2
    3a00:	4798      	blx	r3
    3a02:	bd10      	pop	{r4, pc}
    3a04:	200004f0 	.word	0x200004f0

00003a08 <SERCOM3_Handler>:
    3a08:	b510      	push	{r4, lr}
    3a0a:	4b02      	ldr	r3, [pc, #8]	; (3a14 <SERCOM3_Handler+0xc>)
    3a0c:	68db      	ldr	r3, [r3, #12]
    3a0e:	2003      	movs	r0, #3
    3a10:	4798      	blx	r3
    3a12:	bd10      	pop	{r4, pc}
    3a14:	200004f0 	.word	0x200004f0

00003a18 <SERCOM4_Handler>:
    3a18:	b510      	push	{r4, lr}
    3a1a:	4b02      	ldr	r3, [pc, #8]	; (3a24 <SERCOM4_Handler+0xc>)
    3a1c:	691b      	ldr	r3, [r3, #16]
    3a1e:	2004      	movs	r0, #4
    3a20:	4798      	blx	r3
    3a22:	bd10      	pop	{r4, pc}
    3a24:	200004f0 	.word	0x200004f0

00003a28 <SERCOM5_Handler>:
    3a28:	b510      	push	{r4, lr}
    3a2a:	4b02      	ldr	r3, [pc, #8]	; (3a34 <SERCOM5_Handler+0xc>)
    3a2c:	695b      	ldr	r3, [r3, #20]
    3a2e:	2005      	movs	r0, #5
    3a30:	4798      	blx	r3
    3a32:	bd10      	pop	{r4, pc}
    3a34:	200004f0 	.word	0x200004f0

00003a38 <debug_rx_cb>:
{
	usart_read_job(&debug_mod, &debug_rx_val);
}

void debug_rx_cb(struct usart_module* const mod)
{
    3a38:	b510      	push	{r4, lr}
	/* Data received */
	ui_com_tx_start();
    3a3a:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <debug_rx_cb+0x30>)
    3a3c:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    3a3e:	4b0b      	ldr	r3, [pc, #44]	; (3a6c <debug_rx_cb+0x34>)
    3a40:	4798      	blx	r3
    3a42:	2800      	cmp	r0, #0
    3a44:	d00b      	beq.n	3a5e <debug_rx_cb+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
		ui_com_overflow();
		} else {
		udi_cdc_putc(rx_data);
    3a46:	4b0a      	ldr	r3, [pc, #40]	; (3a70 <debug_rx_cb+0x38>)
    3a48:	7818      	ldrb	r0, [r3, #0]
    3a4a:	4b0a      	ldr	r3, [pc, #40]	; (3a74 <debug_rx_cb+0x3c>)
    3a4c:	4798      	blx	r3
	}

	ui_com_tx_stop();
    3a4e:	4b0a      	ldr	r3, [pc, #40]	; (3a78 <debug_rx_cb+0x40>)
    3a50:	4798      	blx	r3

	usart_read_buffer_job(&debug_mod, &rx_data, 1);
    3a52:	2201      	movs	r2, #1
    3a54:	4906      	ldr	r1, [pc, #24]	; (3a70 <debug_rx_cb+0x38>)
    3a56:	4809      	ldr	r0, [pc, #36]	; (3a7c <debug_rx_cb+0x44>)
    3a58:	4b09      	ldr	r3, [pc, #36]	; (3a80 <debug_rx_cb+0x48>)
    3a5a:	4798      	blx	r3

	return;
}
    3a5c:	bd10      	pop	{r4, pc}
		udi_cdc_signal_overrun();
    3a5e:	4b09      	ldr	r3, [pc, #36]	; (3a84 <debug_rx_cb+0x4c>)
    3a60:	4798      	blx	r3
		ui_com_overflow();
    3a62:	4b09      	ldr	r3, [pc, #36]	; (3a88 <debug_rx_cb+0x50>)
    3a64:	4798      	blx	r3
    3a66:	e7f2      	b.n	3a4e <debug_rx_cb+0x16>
    3a68:	00001f39 	.word	0x00001f39
    3a6c:	000009dd 	.word	0x000009dd
    3a70:	20000508 	.word	0x20000508
    3a74:	00000ab9 	.word	0x00000ab9
    3a78:	00001f3b 	.word	0x00001f3b
    3a7c:	2000052c 	.word	0x2000052c
    3a80:	00003441 	.word	0x00003441
    3a84:	000005c1 	.word	0x000005c1
    3a88:	00001f3d 	.word	0x00001f3d

00003a8c <debug_tx_cb>:


void debug_tx_cb(struct usart_module* const mod)
{
    3a8c:	b510      	push	{r4, lr}
	/* Data ready to be sent */
	if (udi_cdc_is_rx_ready()) {
    3a8e:	4b0c      	ldr	r3, [pc, #48]	; (3ac0 <debug_tx_cb+0x34>)
    3a90:	4798      	blx	r3
    3a92:	2800      	cmp	r0, #0
    3a94:	d108      	bne.n	3aa8 <debug_tx_cb+0x1c>
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    3a96:	490b      	ldr	r1, [pc, #44]	; (3ac4 <debug_tx_cb+0x38>)
    3a98:	2231      	movs	r2, #49	; 0x31
    3a9a:	5c8b      	ldrb	r3, [r1, r2]
    3a9c:	2001      	movs	r0, #1
    3a9e:	4383      	bics	r3, r0
    3aa0:	548b      	strb	r3, [r1, r2]
		tx_data = udi_cdc_getc();
		usart_write_buffer_job(&debug_mod, &tx_data, 1);
		} else {
		/* Fifo empty then Stop UART transmission */
		usart_disable_callback(&debug_mod, USART_CALLBACK_BUFFER_TRANSMITTED);
		ui_com_rx_stop();
    3aa2:	4b09      	ldr	r3, [pc, #36]	; (3ac8 <debug_tx_cb+0x3c>)
    3aa4:	4798      	blx	r3
	}
}
    3aa6:	bd10      	pop	{r4, pc}
		ui_com_rx_start();
    3aa8:	4b08      	ldr	r3, [pc, #32]	; (3acc <debug_tx_cb+0x40>)
    3aaa:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    3aac:	4b08      	ldr	r3, [pc, #32]	; (3ad0 <debug_tx_cb+0x44>)
    3aae:	4798      	blx	r3
    3ab0:	4908      	ldr	r1, [pc, #32]	; (3ad4 <debug_tx_cb+0x48>)
    3ab2:	7008      	strb	r0, [r1, #0]
		usart_write_buffer_job(&debug_mod, &tx_data, 1);
    3ab4:	2201      	movs	r2, #1
    3ab6:	4803      	ldr	r0, [pc, #12]	; (3ac4 <debug_tx_cb+0x38>)
    3ab8:	4b07      	ldr	r3, [pc, #28]	; (3ad8 <debug_tx_cb+0x4c>)
    3aba:	4798      	blx	r3
    3abc:	e7f3      	b.n	3aa6 <debug_tx_cb+0x1a>
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	0000083d 	.word	0x0000083d
    3ac4:	2000052c 	.word	0x2000052c
    3ac8:	00001f37 	.word	0x00001f37
    3acc:	00001f35 	.word	0x00001f35
    3ad0:	00000939 	.word	0x00000939
    3ad4:	20000509 	.word	0x20000509
    3ad8:	00003421 	.word	0x00003421

00003adc <debug_rx_notify>:


void debug_rx_notify(uint8_t port)
{
    3adc:	b510      	push	{r4, lr}
	UNUSED(port);
	/* Transmit first data */
	ui_com_rx_start();
    3ade:	4b08      	ldr	r3, [pc, #32]	; (3b00 <debug_rx_notify+0x24>)
    3ae0:	4798      	blx	r3
	module->callback_enable_mask |= (1 << callback_type);
    3ae2:	4c08      	ldr	r4, [pc, #32]	; (3b04 <debug_rx_notify+0x28>)
    3ae4:	2231      	movs	r2, #49	; 0x31
    3ae6:	5ca3      	ldrb	r3, [r4, r2]
    3ae8:	2101      	movs	r1, #1
    3aea:	430b      	orrs	r3, r1
    3aec:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&debug_mod, USART_CALLBACK_BUFFER_TRANSMITTED);
	tx_data = udi_cdc_getc();
    3aee:	4b06      	ldr	r3, [pc, #24]	; (3b08 <debug_rx_notify+0x2c>)
    3af0:	4798      	blx	r3
    3af2:	4906      	ldr	r1, [pc, #24]	; (3b0c <debug_rx_notify+0x30>)
    3af4:	7008      	strb	r0, [r1, #0]
	usart_write_buffer_job(&debug_mod, &tx_data, 1);
    3af6:	2201      	movs	r2, #1
    3af8:	0020      	movs	r0, r4
    3afa:	4b05      	ldr	r3, [pc, #20]	; (3b10 <debug_rx_notify+0x34>)
    3afc:	4798      	blx	r3
}
    3afe:	bd10      	pop	{r4, pc}
    3b00:	00001f35 	.word	0x00001f35
    3b04:	2000052c 	.word	0x2000052c
    3b08:	00000939 	.word	0x00000939
    3b0c:	20000509 	.word	0x20000509
    3b10:	00003421 	.word	0x00003421

00003b14 <debug_config>:

void debug_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    3b14:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3b16:	4b57      	ldr	r3, [pc, #348]	; (3c74 <debug_config+0x160>)
    3b18:	2280      	movs	r2, #128	; 0x80
    3b1a:	05d2      	lsls	r2, r2, #23
    3b1c:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3b1e:	2200      	movs	r2, #0
    3b20:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    3b22:	20ff      	movs	r0, #255	; 0xff
    3b24:	8118      	strh	r0, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    3b26:	2000      	movs	r0, #0
    3b28:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3b2a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    3b2c:	2496      	movs	r4, #150	; 0x96
    3b2e:	01a4      	lsls	r4, r4, #6
    3b30:	621c      	str	r4, [r3, #32]
	config->receiver_enable  = true;
    3b32:	2401      	movs	r4, #1
    3b34:	2524      	movs	r5, #36	; 0x24
    3b36:	555c      	strb	r4, [r3, r5]
	config->transmitter_enable = true;
    3b38:	3501      	adds	r5, #1
    3b3a:	555c      	strb	r4, [r3, r5]
	config->clock_polarity_inverted = false;
    3b3c:	3425      	adds	r4, #37	; 0x25
    3b3e:	551a      	strb	r2, [r3, r4]
	config->use_external_clock = false;
    3b40:	3401      	adds	r4, #1
    3b42:	551a      	strb	r2, [r3, r4]
	config->ext_clock_freq   = 0;
    3b44:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    3b46:	2488      	movs	r4, #136	; 0x88
    3b48:	0364      	lsls	r4, r4, #13
    3b4a:	60dc      	str	r4, [r3, #12]
	config->run_in_standby   = false;
    3b4c:	242c      	movs	r4, #44	; 0x2c
    3b4e:	551a      	strb	r2, [r3, r4]
	config->generator_source = GCLK_GENERATOR_0;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3b50:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3b52:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    3b54:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    3b56:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3b58:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3b5a:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3b5c:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3b5e:	7618      	strb	r0, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3b60:	7718      	strb	r0, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3b62:	7658      	strb	r0, [r3, #25]
	config->receive_pulse_length                    = 19;
    3b64:	2213      	movs	r2, #19
    3b66:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3b68:	7758      	strb	r0, [r3, #29]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&debug_conf);
	debug_conf.generator_source = GCLK_GENERATOR_3;
    3b6a:	2003      	movs	r0, #3
    3b6c:	321a      	adds	r2, #26
    3b6e:	5498      	strb	r0, [r3, r2]

	switch (cfg->bCharFormat) {
    3b70:	790b      	ldrb	r3, [r1, #4]
    3b72:	2b02      	cmp	r3, #2
    3b74:	d102      	bne.n	3b7c <debug_config+0x68>
	case CDC_STOP_BITS_2:
		debug_conf.stopbits = USART_STOPBITS_2;
    3b76:	3213      	adds	r2, #19
    3b78:	4b3e      	ldr	r3, [pc, #248]	; (3c74 <debug_config+0x160>)
    3b7a:	729a      	strb	r2, [r3, #10]
		/* Default stop bit = 1 stop bit */
		debug_conf.stopbits = USART_STOPBITS_1;
		break;
	}

	switch (cfg->bParityType) {
    3b7c:	794b      	ldrb	r3, [r1, #5]
    3b7e:	2b01      	cmp	r3, #1
    3b80:	d067      	beq.n	3c52 <debug_config+0x13e>
    3b82:	2b02      	cmp	r3, #2
    3b84:	d102      	bne.n	3b8c <debug_config+0x78>
	case CDC_PAR_EVEN:
		debug_conf.parity = USART_PARITY_EVEN;
    3b86:	2200      	movs	r2, #0
    3b88:	4b3a      	ldr	r3, [pc, #232]	; (3c74 <debug_config+0x160>)
    3b8a:	811a      	strh	r2, [r3, #8]
	default:
		debug_conf.parity = USART_PARITY_NONE;
		break;
	}

	switch(cfg->bDataBits) {
    3b8c:	798b      	ldrb	r3, [r1, #6]
    3b8e:	2b06      	cmp	r3, #6
    3b90:	d068      	beq.n	3c64 <debug_config+0x150>
    3b92:	2b07      	cmp	r3, #7
    3b94:	d06a      	beq.n	3c6c <debug_config+0x158>
    3b96:	2b05      	cmp	r3, #5
    3b98:	d060      	beq.n	3c5c <debug_config+0x148>
		debug_conf.character_size = USART_CHARACTER_SIZE_8BIT;
		break;
	}

	/* Options for USART. */
	debug_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    3b9a:	780a      	ldrb	r2, [r1, #0]
    3b9c:	784b      	ldrb	r3, [r1, #1]
    3b9e:	021b      	lsls	r3, r3, #8
    3ba0:	4313      	orrs	r3, r2
    3ba2:	788a      	ldrb	r2, [r1, #2]
    3ba4:	0412      	lsls	r2, r2, #16
    3ba6:	4313      	orrs	r3, r2
    3ba8:	78ca      	ldrb	r2, [r1, #3]
    3baa:	0612      	lsls	r2, r2, #24
    3bac:	431a      	orrs	r2, r3
    3bae:	4b31      	ldr	r3, [pc, #196]	; (3c74 <debug_config+0x160>)
    3bb0:	621a      	str	r2, [r3, #32]
	debug_conf.mux_setting = DEBUG_USART_MUX_SETTING;
    3bb2:	2280      	movs	r2, #128	; 0x80
    3bb4:	0352      	lsls	r2, r2, #13
    3bb6:	60da      	str	r2, [r3, #12]
	debug_conf.pinmux_pad0 = DEBUG_USART_PINMUX_PAD0;
    3bb8:	4a2f      	ldr	r2, [pc, #188]	; (3c78 <debug_config+0x164>)
    3bba:	631a      	str	r2, [r3, #48]	; 0x30
	debug_conf.pinmux_pad1 = DEBUG_USART_PINMUX_PAD1;
    3bbc:	4a2f      	ldr	r2, [pc, #188]	; (3c7c <debug_config+0x168>)
    3bbe:	635a      	str	r2, [r3, #52]	; 0x34
	debug_conf.pinmux_pad2 = DEBUG_USART_PINMUX_PAD2;
    3bc0:	2201      	movs	r2, #1
    3bc2:	4252      	negs	r2, r2
    3bc4:	639a      	str	r2, [r3, #56]	; 0x38
	debug_conf.pinmux_pad3 = DEBUG_USART_PINMUX_PAD3;
    3bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bc8:	4d2d      	ldr	r5, [pc, #180]	; (3c80 <debug_config+0x16c>)
    3bca:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3bcc:	0020      	movs	r0, r4
    3bce:	4b2d      	ldr	r3, [pc, #180]	; (3c84 <debug_config+0x170>)
    3bd0:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3bd2:	231f      	movs	r3, #31
    3bd4:	4018      	ands	r0, r3
    3bd6:	3b1e      	subs	r3, #30
    3bd8:	4083      	lsls	r3, r0
    3bda:	2280      	movs	r2, #128	; 0x80
    3bdc:	492a      	ldr	r1, [pc, #168]	; (3c88 <debug_config+0x174>)
    3bde:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3be0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3be2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3be4:	2b00      	cmp	r3, #0
    3be6:	d1fc      	bne.n	3be2 <debug_config+0xce>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3be8:	6823      	ldr	r3, [r4, #0]
    3bea:	2202      	movs	r2, #2
    3bec:	4393      	bics	r3, r2
    3bee:	6023      	str	r3, [r4, #0]
	usart_disable(&debug_mod);
	usart_init(&debug_mod, DEBUG_USART_MODULE, &debug_conf);
    3bf0:	4d23      	ldr	r5, [pc, #140]	; (3c80 <debug_config+0x16c>)
    3bf2:	4a20      	ldr	r2, [pc, #128]	; (3c74 <debug_config+0x160>)
    3bf4:	4925      	ldr	r1, [pc, #148]	; (3c8c <debug_config+0x178>)
    3bf6:	0028      	movs	r0, r5
    3bf8:	4b25      	ldr	r3, [pc, #148]	; (3c90 <debug_config+0x17c>)
    3bfa:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bfc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3bfe:	0020      	movs	r0, r4
    3c00:	4b20      	ldr	r3, [pc, #128]	; (3c84 <debug_config+0x170>)
    3c02:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c04:	231f      	movs	r3, #31
    3c06:	4018      	ands	r0, r3
    3c08:	3b1e      	subs	r3, #30
    3c0a:	4083      	lsls	r3, r0
    3c0c:	4a1e      	ldr	r2, [pc, #120]	; (3c88 <debug_config+0x174>)
    3c0e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c10:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c12:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3c14:	2b00      	cmp	r3, #0
    3c16:	d1fc      	bne.n	3c12 <debug_config+0xfe>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3c18:	6823      	ldr	r3, [r4, #0]
    3c1a:	2202      	movs	r2, #2
    3c1c:	4313      	orrs	r3, r2
    3c1e:	6023      	str	r3, [r4, #0]
	usart_enable(&debug_mod);

	/* Enable interrupts */
	usart_register_callback(&debug_mod, debug_tx_cb,
    3c20:	4c17      	ldr	r4, [pc, #92]	; (3c80 <debug_config+0x16c>)
    3c22:	2200      	movs	r2, #0
    3c24:	491b      	ldr	r1, [pc, #108]	; (3c94 <debug_config+0x180>)
    3c26:	0020      	movs	r0, r4
    3c28:	4e1b      	ldr	r6, [pc, #108]	; (3c98 <debug_config+0x184>)
    3c2a:	47b0      	blx	r6
    3c2c:	2531      	movs	r5, #49	; 0x31
    3c2e:	5d63      	ldrb	r3, [r4, r5]
    3c30:	2201      	movs	r2, #1
    3c32:	4313      	orrs	r3, r2
    3c34:	5563      	strb	r3, [r4, r5]
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&debug_mod, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&debug_mod, debug_rx_cb,
    3c36:	2201      	movs	r2, #1
    3c38:	4918      	ldr	r1, [pc, #96]	; (3c9c <debug_config+0x188>)
    3c3a:	0020      	movs	r0, r4
    3c3c:	47b0      	blx	r6
    3c3e:	5d63      	ldrb	r3, [r4, r5]
    3c40:	2202      	movs	r2, #2
    3c42:	4313      	orrs	r3, r2
    3c44:	5563      	strb	r3, [r4, r5]
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&debug_mod, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_buffer_job(&debug_mod, &rx_data, 1);
    3c46:	2201      	movs	r2, #1
    3c48:	4915      	ldr	r1, [pc, #84]	; (3ca0 <debug_config+0x18c>)
    3c4a:	0020      	movs	r0, r4
    3c4c:	4b15      	ldr	r3, [pc, #84]	; (3ca4 <debug_config+0x190>)
    3c4e:	4798      	blx	r3
}
    3c50:	bd70      	pop	{r4, r5, r6, pc}
		debug_conf.parity = USART_PARITY_ODD;
    3c52:	2280      	movs	r2, #128	; 0x80
    3c54:	0192      	lsls	r2, r2, #6
    3c56:	4b07      	ldr	r3, [pc, #28]	; (3c74 <debug_config+0x160>)
    3c58:	811a      	strh	r2, [r3, #8]
		break;
    3c5a:	e797      	b.n	3b8c <debug_config+0x78>
		debug_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    3c5c:	2205      	movs	r2, #5
    3c5e:	4b05      	ldr	r3, [pc, #20]	; (3c74 <debug_config+0x160>)
    3c60:	72da      	strb	r2, [r3, #11]
		break;
    3c62:	e79a      	b.n	3b9a <debug_config+0x86>
		debug_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    3c64:	2206      	movs	r2, #6
    3c66:	4b03      	ldr	r3, [pc, #12]	; (3c74 <debug_config+0x160>)
    3c68:	72da      	strb	r2, [r3, #11]
		break;
    3c6a:	e796      	b.n	3b9a <debug_config+0x86>
		debug_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    3c6c:	2207      	movs	r2, #7
    3c6e:	4b01      	ldr	r3, [pc, #4]	; (3c74 <debug_config+0x160>)
    3c70:	72da      	strb	r2, [r3, #11]
		break;
    3c72:	e792      	b.n	3b9a <debug_config+0x86>
    3c74:	20000908 	.word	0x20000908
    3c78:	00160002 	.word	0x00160002
    3c7c:	00170002 	.word	0x00170002
    3c80:	2000052c 	.word	0x2000052c
    3c84:	000039a9 	.word	0x000039a9
    3c88:	e000e100 	.word	0xe000e100
    3c8c:	42001400 	.word	0x42001400
    3c90:	00003041 	.word	0x00003041
    3c94:	00003a8d 	.word	0x00003a8d
    3c98:	00003409 	.word	0x00003409
    3c9c:	00003a39 	.word	0x00003a39
    3ca0:	20000508 	.word	0x20000508
    3ca4:	00003441 	.word	0x00003441

00003ca8 <debug_open>:

void debug_open(uint8_t port)
{
    3ca8:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3caa:	4d0a      	ldr	r5, [pc, #40]	; (3cd4 <debug_open+0x2c>)
    3cac:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3cae:	0020      	movs	r0, r4
    3cb0:	4b09      	ldr	r3, [pc, #36]	; (3cd8 <debug_open+0x30>)
    3cb2:	4798      	blx	r3
    3cb4:	231f      	movs	r3, #31
    3cb6:	4018      	ands	r0, r3
    3cb8:	3b1e      	subs	r3, #30
    3cba:	4083      	lsls	r3, r0
    3cbc:	4a07      	ldr	r2, [pc, #28]	; (3cdc <debug_open+0x34>)
    3cbe:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3cc0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3cc2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d1fc      	bne.n	3cc2 <debug_open+0x1a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3cc8:	6823      	ldr	r3, [r4, #0]
    3cca:	2202      	movs	r2, #2
    3ccc:	4313      	orrs	r3, r2
    3cce:	6023      	str	r3, [r4, #0]
	UNUSED(port);

	usart_enable(&debug_mod);
}
    3cd0:	bd70      	pop	{r4, r5, r6, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	2000052c 	.word	0x2000052c
    3cd8:	000039a9 	.word	0x000039a9
    3cdc:	e000e100 	.word	0xe000e100

00003ce0 <debug_close>:

void debug_close(uint8_t port)
{
    3ce0:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ce2:	4d0a      	ldr	r5, [pc, #40]	; (3d0c <debug_close+0x2c>)
    3ce4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3ce6:	0020      	movs	r0, r4
    3ce8:	4b09      	ldr	r3, [pc, #36]	; (3d10 <debug_close+0x30>)
    3cea:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3cec:	231f      	movs	r3, #31
    3cee:	4018      	ands	r0, r3
    3cf0:	3b1e      	subs	r3, #30
    3cf2:	4083      	lsls	r3, r0
    3cf4:	2280      	movs	r2, #128	; 0x80
    3cf6:	4907      	ldr	r1, [pc, #28]	; (3d14 <debug_close+0x34>)
    3cf8:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3cfa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3cfc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d1fc      	bne.n	3cfc <debug_close+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3d02:	6823      	ldr	r3, [r4, #0]
    3d04:	2202      	movs	r2, #2
    3d06:	4393      	bics	r3, r2
    3d08:	6023      	str	r3, [r4, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&debug_mod);
}
    3d0a:	bd70      	pop	{r4, r5, r6, pc}
    3d0c:	2000052c 	.word	0x2000052c
    3d10:	000039a9 	.word	0x000039a9
    3d14:	e000e100 	.word	0xe000e100

00003d18 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3d18:	4b0c      	ldr	r3, [pc, #48]	; (3d4c <cpu_irq_enter_critical+0x34>)
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d106      	bne.n	3d2e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3d20:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3d24:	2b00      	cmp	r3, #0
    3d26:	d007      	beq.n	3d38 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3d28:	2200      	movs	r2, #0
    3d2a:	4b09      	ldr	r3, [pc, #36]	; (3d50 <cpu_irq_enter_critical+0x38>)
    3d2c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3d2e:	4a07      	ldr	r2, [pc, #28]	; (3d4c <cpu_irq_enter_critical+0x34>)
    3d30:	6813      	ldr	r3, [r2, #0]
    3d32:	3301      	adds	r3, #1
    3d34:	6013      	str	r3, [r2, #0]
}
    3d36:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3d38:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3d3a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3d3e:	2200      	movs	r2, #0
    3d40:	4b04      	ldr	r3, [pc, #16]	; (3d54 <cpu_irq_enter_critical+0x3c>)
    3d42:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3d44:	3201      	adds	r2, #1
    3d46:	4b02      	ldr	r3, [pc, #8]	; (3d50 <cpu_irq_enter_critical+0x38>)
    3d48:	701a      	strb	r2, [r3, #0]
    3d4a:	e7f0      	b.n	3d2e <cpu_irq_enter_critical+0x16>
    3d4c:	2000050c 	.word	0x2000050c
    3d50:	20000510 	.word	0x20000510
    3d54:	200000f0 	.word	0x200000f0

00003d58 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3d58:	4b08      	ldr	r3, [pc, #32]	; (3d7c <cpu_irq_leave_critical+0x24>)
    3d5a:	681a      	ldr	r2, [r3, #0]
    3d5c:	3a01      	subs	r2, #1
    3d5e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d109      	bne.n	3d7a <cpu_irq_leave_critical+0x22>
    3d66:	4b06      	ldr	r3, [pc, #24]	; (3d80 <cpu_irq_leave_critical+0x28>)
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d005      	beq.n	3d7a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3d6e:	2201      	movs	r2, #1
    3d70:	4b04      	ldr	r3, [pc, #16]	; (3d84 <cpu_irq_leave_critical+0x2c>)
    3d72:	701a      	strb	r2, [r3, #0]
    3d74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3d78:	b662      	cpsie	i
	}
}
    3d7a:	4770      	bx	lr
    3d7c:	2000050c 	.word	0x2000050c
    3d80:	20000510 	.word	0x20000510
    3d84:	200000f0 	.word	0x200000f0

00003d88 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3d8c:	ac01      	add	r4, sp, #4
    3d8e:	2501      	movs	r5, #1
    3d90:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3d92:	2700      	movs	r7, #0
    3d94:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3d96:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3d98:	0021      	movs	r1, r4
    3d9a:	203e      	movs	r0, #62	; 0x3e
    3d9c:	4e06      	ldr	r6, [pc, #24]	; (3db8 <system_board_init+0x30>)
    3d9e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3da0:	2280      	movs	r2, #128	; 0x80
    3da2:	05d2      	lsls	r2, r2, #23
    3da4:	4b05      	ldr	r3, [pc, #20]	; (3dbc <system_board_init+0x34>)
    3da6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3da8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3daa:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3dac:	0021      	movs	r1, r4
    3dae:	200f      	movs	r0, #15
    3db0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3db2:	b003      	add	sp, #12
    3db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	00003dc1 	.word	0x00003dc1
    3dbc:	41004480 	.word	0x41004480

00003dc0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3dc0:	b500      	push	{lr}
    3dc2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3dc4:	ab01      	add	r3, sp, #4
    3dc6:	2280      	movs	r2, #128	; 0x80
    3dc8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3dca:	780a      	ldrb	r2, [r1, #0]
    3dcc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3dce:	784a      	ldrb	r2, [r1, #1]
    3dd0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3dd2:	788a      	ldrb	r2, [r1, #2]
    3dd4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3dd6:	0019      	movs	r1, r3
    3dd8:	4b01      	ldr	r3, [pc, #4]	; (3de0 <port_pin_set_config+0x20>)
    3dda:	4798      	blx	r3
}
    3ddc:	b003      	add	sp, #12
    3dde:	bd00      	pop	{pc}
    3de0:	00004425 	.word	0x00004425

00003de4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3de4:	b510      	push	{r4, lr}
	switch (clock_source) {
    3de6:	2808      	cmp	r0, #8
    3de8:	d803      	bhi.n	3df2 <system_clock_source_get_hz+0xe>
    3dea:	0080      	lsls	r0, r0, #2
    3dec:	4b1c      	ldr	r3, [pc, #112]	; (3e60 <system_clock_source_get_hz+0x7c>)
    3dee:	581b      	ldr	r3, [r3, r0]
    3df0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    3df2:	2000      	movs	r0, #0
    3df4:	e032      	b.n	3e5c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    3df6:	4b1b      	ldr	r3, [pc, #108]	; (3e64 <system_clock_source_get_hz+0x80>)
    3df8:	6918      	ldr	r0, [r3, #16]
    3dfa:	e02f      	b.n	3e5c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3dfc:	4b1a      	ldr	r3, [pc, #104]	; (3e68 <system_clock_source_get_hz+0x84>)
    3dfe:	6a1b      	ldr	r3, [r3, #32]
    3e00:	059b      	lsls	r3, r3, #22
    3e02:	0f9b      	lsrs	r3, r3, #30
    3e04:	4819      	ldr	r0, [pc, #100]	; (3e6c <system_clock_source_get_hz+0x88>)
    3e06:	40d8      	lsrs	r0, r3
    3e08:	e028      	b.n	3e5c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    3e0a:	4b16      	ldr	r3, [pc, #88]	; (3e64 <system_clock_source_get_hz+0x80>)
    3e0c:	6958      	ldr	r0, [r3, #20]
    3e0e:	e025      	b.n	3e5c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3e10:	4b14      	ldr	r3, [pc, #80]	; (3e64 <system_clock_source_get_hz+0x80>)
    3e12:	681b      	ldr	r3, [r3, #0]
			return 0;
    3e14:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3e16:	079b      	lsls	r3, r3, #30
    3e18:	d520      	bpl.n	3e5c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3e1a:	4913      	ldr	r1, [pc, #76]	; (3e68 <system_clock_source_get_hz+0x84>)
    3e1c:	2210      	movs	r2, #16
    3e1e:	68cb      	ldr	r3, [r1, #12]
    3e20:	421a      	tst	r2, r3
    3e22:	d0fc      	beq.n	3e1e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    3e24:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <system_clock_source_get_hz+0x80>)
    3e26:	681a      	ldr	r2, [r3, #0]
    3e28:	2324      	movs	r3, #36	; 0x24
    3e2a:	4013      	ands	r3, r2
    3e2c:	2b04      	cmp	r3, #4
    3e2e:	d001      	beq.n	3e34 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    3e30:	480f      	ldr	r0, [pc, #60]	; (3e70 <system_clock_source_get_hz+0x8c>)
    3e32:	e013      	b.n	3e5c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3e34:	2000      	movs	r0, #0
    3e36:	4b0f      	ldr	r3, [pc, #60]	; (3e74 <system_clock_source_get_hz+0x90>)
    3e38:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3e3a:	4b0a      	ldr	r3, [pc, #40]	; (3e64 <system_clock_source_get_hz+0x80>)
    3e3c:	689b      	ldr	r3, [r3, #8]
    3e3e:	041b      	lsls	r3, r3, #16
    3e40:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3e42:	4358      	muls	r0, r3
    3e44:	e00a      	b.n	3e5c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3e46:	2350      	movs	r3, #80	; 0x50
    3e48:	4a07      	ldr	r2, [pc, #28]	; (3e68 <system_clock_source_get_hz+0x84>)
    3e4a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3e4c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3e4e:	075b      	lsls	r3, r3, #29
    3e50:	d504      	bpl.n	3e5c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    3e52:	4b04      	ldr	r3, [pc, #16]	; (3e64 <system_clock_source_get_hz+0x80>)
    3e54:	68d8      	ldr	r0, [r3, #12]
    3e56:	e001      	b.n	3e5c <system_clock_source_get_hz+0x78>
		return 32768UL;
    3e58:	2080      	movs	r0, #128	; 0x80
    3e5a:	0200      	lsls	r0, r0, #8
	}
}
    3e5c:	bd10      	pop	{r4, pc}
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	00004ae0 	.word	0x00004ae0
    3e64:	20000514 	.word	0x20000514
    3e68:	40000800 	.word	0x40000800
    3e6c:	007a1200 	.word	0x007a1200
    3e70:	02dc6c00 	.word	0x02dc6c00
    3e74:	00004349 	.word	0x00004349

00003e78 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3e78:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3e7a:	490c      	ldr	r1, [pc, #48]	; (3eac <system_clock_source_osc8m_set_config+0x34>)
    3e7c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3e7e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3e80:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3e82:	7840      	ldrb	r0, [r0, #1]
    3e84:	2201      	movs	r2, #1
    3e86:	4010      	ands	r0, r2
    3e88:	0180      	lsls	r0, r0, #6
    3e8a:	2640      	movs	r6, #64	; 0x40
    3e8c:	43b3      	bics	r3, r6
    3e8e:	4303      	orrs	r3, r0
    3e90:	402a      	ands	r2, r5
    3e92:	01d2      	lsls	r2, r2, #7
    3e94:	2080      	movs	r0, #128	; 0x80
    3e96:	4383      	bics	r3, r0
    3e98:	4313      	orrs	r3, r2
    3e9a:	2203      	movs	r2, #3
    3e9c:	4022      	ands	r2, r4
    3e9e:	0212      	lsls	r2, r2, #8
    3ea0:	4803      	ldr	r0, [pc, #12]	; (3eb0 <system_clock_source_osc8m_set_config+0x38>)
    3ea2:	4003      	ands	r3, r0
    3ea4:	4313      	orrs	r3, r2
    3ea6:	620b      	str	r3, [r1, #32]
}
    3ea8:	bd70      	pop	{r4, r5, r6, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	40000800 	.word	0x40000800
    3eb0:	fffffcff 	.word	0xfffffcff

00003eb4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3eb4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3eb6:	7a03      	ldrb	r3, [r0, #8]
    3eb8:	069b      	lsls	r3, r3, #26
    3eba:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3ebc:	8942      	ldrh	r2, [r0, #10]
    3ebe:	0592      	lsls	r2, r2, #22
    3ec0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3ec2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3ec4:	4918      	ldr	r1, [pc, #96]	; (3f28 <system_clock_source_dfll_set_config+0x74>)
    3ec6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3ec8:	7983      	ldrb	r3, [r0, #6]
    3eca:	79c2      	ldrb	r2, [r0, #7]
    3ecc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3ece:	8842      	ldrh	r2, [r0, #2]
    3ed0:	8884      	ldrh	r4, [r0, #4]
    3ed2:	4322      	orrs	r2, r4
    3ed4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3ed6:	7842      	ldrb	r2, [r0, #1]
    3ed8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    3eda:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3edc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3ede:	7803      	ldrb	r3, [r0, #0]
    3ee0:	2b04      	cmp	r3, #4
    3ee2:	d011      	beq.n	3f08 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3ee4:	2b20      	cmp	r3, #32
    3ee6:	d10e      	bne.n	3f06 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3ee8:	7b03      	ldrb	r3, [r0, #12]
    3eea:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3eec:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3eee:	4313      	orrs	r3, r2
    3ef0:	89c2      	ldrh	r2, [r0, #14]
    3ef2:	0412      	lsls	r2, r2, #16
    3ef4:	490d      	ldr	r1, [pc, #52]	; (3f2c <system_clock_source_dfll_set_config+0x78>)
    3ef6:	400a      	ands	r2, r1
    3ef8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3efa:	4a0b      	ldr	r2, [pc, #44]	; (3f28 <system_clock_source_dfll_set_config+0x74>)
    3efc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3efe:	6811      	ldr	r1, [r2, #0]
    3f00:	4b0b      	ldr	r3, [pc, #44]	; (3f30 <system_clock_source_dfll_set_config+0x7c>)
    3f02:	430b      	orrs	r3, r1
    3f04:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3f06:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3f08:	7b03      	ldrb	r3, [r0, #12]
    3f0a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3f0c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3f0e:	4313      	orrs	r3, r2
    3f10:	89c2      	ldrh	r2, [r0, #14]
    3f12:	0412      	lsls	r2, r2, #16
    3f14:	4905      	ldr	r1, [pc, #20]	; (3f2c <system_clock_source_dfll_set_config+0x78>)
    3f16:	400a      	ands	r2, r1
    3f18:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3f1a:	4a03      	ldr	r2, [pc, #12]	; (3f28 <system_clock_source_dfll_set_config+0x74>)
    3f1c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3f1e:	6813      	ldr	r3, [r2, #0]
    3f20:	2104      	movs	r1, #4
    3f22:	430b      	orrs	r3, r1
    3f24:	6013      	str	r3, [r2, #0]
    3f26:	e7ee      	b.n	3f06 <system_clock_source_dfll_set_config+0x52>
    3f28:	20000514 	.word	0x20000514
    3f2c:	03ff0000 	.word	0x03ff0000
    3f30:	00000424 	.word	0x00000424

00003f34 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3f34:	2808      	cmp	r0, #8
    3f36:	d803      	bhi.n	3f40 <system_clock_source_enable+0xc>
    3f38:	0080      	lsls	r0, r0, #2
    3f3a:	4b25      	ldr	r3, [pc, #148]	; (3fd0 <system_clock_source_enable+0x9c>)
    3f3c:	581b      	ldr	r3, [r3, r0]
    3f3e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f40:	2017      	movs	r0, #23
    3f42:	e044      	b.n	3fce <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3f44:	4a23      	ldr	r2, [pc, #140]	; (3fd4 <system_clock_source_enable+0xa0>)
    3f46:	6a13      	ldr	r3, [r2, #32]
    3f48:	2102      	movs	r1, #2
    3f4a:	430b      	orrs	r3, r1
    3f4c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3f4e:	2000      	movs	r0, #0
    3f50:	e03d      	b.n	3fce <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3f52:	4a20      	ldr	r2, [pc, #128]	; (3fd4 <system_clock_source_enable+0xa0>)
    3f54:	6993      	ldr	r3, [r2, #24]
    3f56:	2102      	movs	r1, #2
    3f58:	430b      	orrs	r3, r1
    3f5a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3f5c:	2000      	movs	r0, #0
		break;
    3f5e:	e036      	b.n	3fce <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3f60:	4a1c      	ldr	r2, [pc, #112]	; (3fd4 <system_clock_source_enable+0xa0>)
    3f62:	8a13      	ldrh	r3, [r2, #16]
    3f64:	2102      	movs	r1, #2
    3f66:	430b      	orrs	r3, r1
    3f68:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    3f6a:	2000      	movs	r0, #0
		break;
    3f6c:	e02f      	b.n	3fce <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3f6e:	4a19      	ldr	r2, [pc, #100]	; (3fd4 <system_clock_source_enable+0xa0>)
    3f70:	8a93      	ldrh	r3, [r2, #20]
    3f72:	2102      	movs	r1, #2
    3f74:	430b      	orrs	r3, r1
    3f76:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    3f78:	2000      	movs	r0, #0
		break;
    3f7a:	e028      	b.n	3fce <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3f7c:	4916      	ldr	r1, [pc, #88]	; (3fd8 <system_clock_source_enable+0xa4>)
    3f7e:	680b      	ldr	r3, [r1, #0]
    3f80:	2202      	movs	r2, #2
    3f82:	4313      	orrs	r3, r2
    3f84:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3f86:	4b13      	ldr	r3, [pc, #76]	; (3fd4 <system_clock_source_enable+0xa0>)
    3f88:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3f8a:	0019      	movs	r1, r3
    3f8c:	320e      	adds	r2, #14
    3f8e:	68cb      	ldr	r3, [r1, #12]
    3f90:	421a      	tst	r2, r3
    3f92:	d0fc      	beq.n	3f8e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3f94:	4a10      	ldr	r2, [pc, #64]	; (3fd8 <system_clock_source_enable+0xa4>)
    3f96:	6891      	ldr	r1, [r2, #8]
    3f98:	4b0e      	ldr	r3, [pc, #56]	; (3fd4 <system_clock_source_enable+0xa0>)
    3f9a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3f9c:	6852      	ldr	r2, [r2, #4]
    3f9e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3fa0:	2200      	movs	r2, #0
    3fa2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3fa4:	0019      	movs	r1, r3
    3fa6:	3210      	adds	r2, #16
    3fa8:	68cb      	ldr	r3, [r1, #12]
    3faa:	421a      	tst	r2, r3
    3fac:	d0fc      	beq.n	3fa8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3fae:	4b0a      	ldr	r3, [pc, #40]	; (3fd8 <system_clock_source_enable+0xa4>)
    3fb0:	681b      	ldr	r3, [r3, #0]
    3fb2:	b29b      	uxth	r3, r3
    3fb4:	4a07      	ldr	r2, [pc, #28]	; (3fd4 <system_clock_source_enable+0xa0>)
    3fb6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3fb8:	2000      	movs	r0, #0
    3fba:	e008      	b.n	3fce <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3fbc:	4905      	ldr	r1, [pc, #20]	; (3fd4 <system_clock_source_enable+0xa0>)
    3fbe:	2244      	movs	r2, #68	; 0x44
    3fc0:	5c8b      	ldrb	r3, [r1, r2]
    3fc2:	2002      	movs	r0, #2
    3fc4:	4303      	orrs	r3, r0
    3fc6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3fc8:	2000      	movs	r0, #0
		break;
    3fca:	e000      	b.n	3fce <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3fcc:	2000      	movs	r0, #0
}
    3fce:	4770      	bx	lr
    3fd0:	00004b04 	.word	0x00004b04
    3fd4:	40000800 	.word	0x40000800
    3fd8:	20000514 	.word	0x20000514

00003fdc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3fdc:	b570      	push	{r4, r5, r6, lr}
    3fde:	b08a      	sub	sp, #40	; 0x28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3fe0:	22c2      	movs	r2, #194	; 0xc2
    3fe2:	00d2      	lsls	r2, r2, #3
    3fe4:	4b36      	ldr	r3, [pc, #216]	; (40c0 <system_clock_init+0xe4>)
    3fe6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3fe8:	4a36      	ldr	r2, [pc, #216]	; (40c4 <system_clock_init+0xe8>)
    3fea:	6853      	ldr	r3, [r2, #4]
    3fec:	211e      	movs	r1, #30
    3fee:	438b      	bics	r3, r1
    3ff0:	391a      	subs	r1, #26
    3ff2:	430b      	orrs	r3, r1
    3ff4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3ff6:	2201      	movs	r2, #1
    3ff8:	ab01      	add	r3, sp, #4
    3ffa:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3ffc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3ffe:	4d32      	ldr	r5, [pc, #200]	; (40c8 <system_clock_init+0xec>)
    4000:	b2e0      	uxtb	r0, r4
    4002:	a901      	add	r1, sp, #4
    4004:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4006:	3401      	adds	r4, #1
    4008:	2c25      	cmp	r4, #37	; 0x25
    400a:	d1f9      	bne.n	4000 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    400c:	ab05      	add	r3, sp, #20
    400e:	2200      	movs	r2, #0
    4010:	2100      	movs	r1, #0
    4012:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4014:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4016:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4018:	3120      	adds	r1, #32
    401a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    401c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    401e:	4b2b      	ldr	r3, [pc, #172]	; (40cc <system_clock_init+0xf0>)
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4024:	2b3f      	cmp	r3, #63	; 0x3f
    4026:	d049      	beq.n	40bc <system_clock_init+0xe0>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    4028:	a805      	add	r0, sp, #20
    402a:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    402c:	2307      	movs	r3, #7
    402e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    4030:	3303      	adds	r3, #3
    4032:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    4034:	4b26      	ldr	r3, [pc, #152]	; (40d0 <system_clock_init+0xf4>)
    4036:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    4038:	3bff      	subs	r3, #255	; 0xff
    403a:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    403c:	4b25      	ldr	r3, [pc, #148]	; (40d4 <system_clock_init+0xf8>)
    403e:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4040:	4b25      	ldr	r3, [pc, #148]	; (40d8 <system_clock_init+0xfc>)
    4042:	4798      	blx	r3
	config->run_in_standby  = false;
    4044:	a804      	add	r0, sp, #16
    4046:	2400      	movs	r4, #0
    4048:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    404a:	2601      	movs	r6, #1
    404c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    404e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4050:	4b22      	ldr	r3, [pc, #136]	; (40dc <system_clock_init+0x100>)
    4052:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4054:	2006      	movs	r0, #6
    4056:	4d22      	ldr	r5, [pc, #136]	; (40e0 <system_clock_init+0x104>)
    4058:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    405a:	4b22      	ldr	r3, [pc, #136]	; (40e4 <system_clock_init+0x108>)
    405c:	4798      	blx	r3
	config->division_factor    = 1;
    405e:	a901      	add	r1, sp, #4
    4060:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    4062:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4064:	2306      	movs	r3, #6
    4066:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    4068:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    406a:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    406c:	2003      	movs	r0, #3
    406e:	4b1e      	ldr	r3, [pc, #120]	; (40e8 <system_clock_init+0x10c>)
    4070:	4798      	blx	r3
    4072:	2003      	movs	r0, #3
    4074:	4b1d      	ldr	r3, [pc, #116]	; (40ec <system_clock_init+0x110>)
    4076:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4078:	2007      	movs	r0, #7
    407a:	47a8      	blx	r5
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    407c:	4910      	ldr	r1, [pc, #64]	; (40c0 <system_clock_init+0xe4>)
    407e:	2210      	movs	r2, #16
    4080:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4082:	421a      	tst	r2, r3
    4084:	d0fc      	beq.n	4080 <system_clock_init+0xa4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4086:	4a0e      	ldr	r2, [pc, #56]	; (40c0 <system_clock_init+0xe4>)
    4088:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    408a:	2180      	movs	r1, #128	; 0x80
    408c:	430b      	orrs	r3, r1
    408e:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    4090:	4a17      	ldr	r2, [pc, #92]	; (40f0 <system_clock_init+0x114>)
    4092:	2300      	movs	r3, #0
    4094:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4096:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4098:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    409a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    409c:	a901      	add	r1, sp, #4
    409e:	2201      	movs	r2, #1
    40a0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    40a2:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    40a4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    40a6:	3307      	adds	r3, #7
    40a8:	700b      	strb	r3, [r1, #0]
    40aa:	720a      	strb	r2, [r1, #8]
    40ac:	2000      	movs	r0, #0
    40ae:	4b0e      	ldr	r3, [pc, #56]	; (40e8 <system_clock_init+0x10c>)
    40b0:	4798      	blx	r3
    40b2:	2000      	movs	r0, #0
    40b4:	4b0d      	ldr	r3, [pc, #52]	; (40ec <system_clock_init+0x110>)
    40b6:	4798      	blx	r3
#endif
}
    40b8:	b00a      	add	sp, #40	; 0x28
    40ba:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    40bc:	3b20      	subs	r3, #32
    40be:	e7b3      	b.n	4028 <system_clock_init+0x4c>
    40c0:	40000800 	.word	0x40000800
    40c4:	41004000 	.word	0x41004000
    40c8:	0000432d 	.word	0x0000432d
    40cc:	00806024 	.word	0x00806024
    40d0:	000001ff 	.word	0x000001ff
    40d4:	ffffbb80 	.word	0xffffbb80
    40d8:	00003eb5 	.word	0x00003eb5
    40dc:	00003e79 	.word	0x00003e79
    40e0:	00003f35 	.word	0x00003f35
    40e4:	000040f5 	.word	0x000040f5
    40e8:	00004119 	.word	0x00004119
    40ec:	000041d1 	.word	0x000041d1
    40f0:	40000400 	.word	0x40000400

000040f4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    40f4:	4a06      	ldr	r2, [pc, #24]	; (4110 <system_gclk_init+0x1c>)
    40f6:	6993      	ldr	r3, [r2, #24]
    40f8:	2108      	movs	r1, #8
    40fa:	430b      	orrs	r3, r1
    40fc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    40fe:	2201      	movs	r2, #1
    4100:	4b04      	ldr	r3, [pc, #16]	; (4114 <system_gclk_init+0x20>)
    4102:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4104:	0019      	movs	r1, r3
    4106:	780b      	ldrb	r3, [r1, #0]
    4108:	4213      	tst	r3, r2
    410a:	d1fc      	bne.n	4106 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    410c:	4770      	bx	lr
    410e:	46c0      	nop			; (mov r8, r8)
    4110:	40000400 	.word	0x40000400
    4114:	40000c00 	.word	0x40000c00

00004118 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4118:	b570      	push	{r4, r5, r6, lr}
    411a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    411c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    411e:	780d      	ldrb	r5, [r1, #0]
    4120:	022d      	lsls	r5, r5, #8
    4122:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4124:	784b      	ldrb	r3, [r1, #1]
    4126:	2b00      	cmp	r3, #0
    4128:	d002      	beq.n	4130 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    412a:	2380      	movs	r3, #128	; 0x80
    412c:	02db      	lsls	r3, r3, #11
    412e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4130:	7a4b      	ldrb	r3, [r1, #9]
    4132:	2b00      	cmp	r3, #0
    4134:	d002      	beq.n	413c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4136:	2380      	movs	r3, #128	; 0x80
    4138:	031b      	lsls	r3, r3, #12
    413a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    413c:	6848      	ldr	r0, [r1, #4]
    413e:	2801      	cmp	r0, #1
    4140:	d910      	bls.n	4164 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4142:	1e43      	subs	r3, r0, #1
    4144:	4218      	tst	r0, r3
    4146:	d134      	bne.n	41b2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4148:	2802      	cmp	r0, #2
    414a:	d930      	bls.n	41ae <system_gclk_gen_set_config+0x96>
    414c:	2302      	movs	r3, #2
    414e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4150:	3201      	adds	r2, #1
						mask <<= 1) {
    4152:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4154:	4298      	cmp	r0, r3
    4156:	d8fb      	bhi.n	4150 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4158:	0212      	lsls	r2, r2, #8
    415a:	4332      	orrs	r2, r6
    415c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    415e:	2380      	movs	r3, #128	; 0x80
    4160:	035b      	lsls	r3, r3, #13
    4162:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4164:	7a0b      	ldrb	r3, [r1, #8]
    4166:	2b00      	cmp	r3, #0
    4168:	d002      	beq.n	4170 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    416a:	2380      	movs	r3, #128	; 0x80
    416c:	039b      	lsls	r3, r3, #14
    416e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4170:	4a13      	ldr	r2, [pc, #76]	; (41c0 <system_gclk_gen_set_config+0xa8>)
    4172:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4174:	b25b      	sxtb	r3, r3
    4176:	2b00      	cmp	r3, #0
    4178:	dbfb      	blt.n	4172 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    417a:	4b12      	ldr	r3, [pc, #72]	; (41c4 <system_gclk_gen_set_config+0xac>)
    417c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    417e:	4b12      	ldr	r3, [pc, #72]	; (41c8 <system_gclk_gen_set_config+0xb0>)
    4180:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4182:	4a0f      	ldr	r2, [pc, #60]	; (41c0 <system_gclk_gen_set_config+0xa8>)
    4184:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4186:	b25b      	sxtb	r3, r3
    4188:	2b00      	cmp	r3, #0
    418a:	dbfb      	blt.n	4184 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    418c:	4b0c      	ldr	r3, [pc, #48]	; (41c0 <system_gclk_gen_set_config+0xa8>)
    418e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4190:	001a      	movs	r2, r3
    4192:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4194:	b25b      	sxtb	r3, r3
    4196:	2b00      	cmp	r3, #0
    4198:	dbfb      	blt.n	4192 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    419a:	4a09      	ldr	r2, [pc, #36]	; (41c0 <system_gclk_gen_set_config+0xa8>)
    419c:	6853      	ldr	r3, [r2, #4]
    419e:	2180      	movs	r1, #128	; 0x80
    41a0:	0249      	lsls	r1, r1, #9
    41a2:	400b      	ands	r3, r1
    41a4:	431d      	orrs	r5, r3
    41a6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    41a8:	4b08      	ldr	r3, [pc, #32]	; (41cc <system_gclk_gen_set_config+0xb4>)
    41aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    41ac:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    41ae:	2200      	movs	r2, #0
    41b0:	e7d2      	b.n	4158 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    41b2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    41b4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    41b6:	2380      	movs	r3, #128	; 0x80
    41b8:	029b      	lsls	r3, r3, #10
    41ba:	431d      	orrs	r5, r3
    41bc:	e7d2      	b.n	4164 <system_gclk_gen_set_config+0x4c>
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	40000c00 	.word	0x40000c00
    41c4:	00003d19 	.word	0x00003d19
    41c8:	40000c08 	.word	0x40000c08
    41cc:	00003d59 	.word	0x00003d59

000041d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    41d0:	b510      	push	{r4, lr}
    41d2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41d4:	4a0b      	ldr	r2, [pc, #44]	; (4204 <system_gclk_gen_enable+0x34>)
    41d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    41d8:	b25b      	sxtb	r3, r3
    41da:	2b00      	cmp	r3, #0
    41dc:	dbfb      	blt.n	41d6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    41de:	4b0a      	ldr	r3, [pc, #40]	; (4208 <system_gclk_gen_enable+0x38>)
    41e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    41e2:	4b0a      	ldr	r3, [pc, #40]	; (420c <system_gclk_gen_enable+0x3c>)
    41e4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41e6:	4a07      	ldr	r2, [pc, #28]	; (4204 <system_gclk_gen_enable+0x34>)
    41e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    41ea:	b25b      	sxtb	r3, r3
    41ec:	2b00      	cmp	r3, #0
    41ee:	dbfb      	blt.n	41e8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    41f0:	4a04      	ldr	r2, [pc, #16]	; (4204 <system_gclk_gen_enable+0x34>)
    41f2:	6851      	ldr	r1, [r2, #4]
    41f4:	2380      	movs	r3, #128	; 0x80
    41f6:	025b      	lsls	r3, r3, #9
    41f8:	430b      	orrs	r3, r1
    41fa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    41fc:	4b04      	ldr	r3, [pc, #16]	; (4210 <system_gclk_gen_enable+0x40>)
    41fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4200:	bd10      	pop	{r4, pc}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	40000c00 	.word	0x40000c00
    4208:	00003d19 	.word	0x00003d19
    420c:	40000c04 	.word	0x40000c04
    4210:	00003d59 	.word	0x00003d59

00004214 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4214:	b570      	push	{r4, r5, r6, lr}
    4216:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4218:	4a1a      	ldr	r2, [pc, #104]	; (4284 <system_gclk_gen_get_hz+0x70>)
    421a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    421c:	b25b      	sxtb	r3, r3
    421e:	2b00      	cmp	r3, #0
    4220:	dbfb      	blt.n	421a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    4222:	4b19      	ldr	r3, [pc, #100]	; (4288 <system_gclk_gen_get_hz+0x74>)
    4224:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4226:	4b19      	ldr	r3, [pc, #100]	; (428c <system_gclk_gen_get_hz+0x78>)
    4228:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    422a:	4a16      	ldr	r2, [pc, #88]	; (4284 <system_gclk_gen_get_hz+0x70>)
    422c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    422e:	b25b      	sxtb	r3, r3
    4230:	2b00      	cmp	r3, #0
    4232:	dbfb      	blt.n	422c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4234:	4e13      	ldr	r6, [pc, #76]	; (4284 <system_gclk_gen_get_hz+0x70>)
    4236:	6870      	ldr	r0, [r6, #4]
    4238:	04c0      	lsls	r0, r0, #19
    423a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    423c:	4b14      	ldr	r3, [pc, #80]	; (4290 <system_gclk_gen_get_hz+0x7c>)
    423e:	4798      	blx	r3
    4240:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4242:	4b12      	ldr	r3, [pc, #72]	; (428c <system_gclk_gen_get_hz+0x78>)
    4244:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4246:	6876      	ldr	r6, [r6, #4]
    4248:	02f6      	lsls	r6, r6, #11
    424a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    424c:	4b11      	ldr	r3, [pc, #68]	; (4294 <system_gclk_gen_get_hz+0x80>)
    424e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4250:	4a0c      	ldr	r2, [pc, #48]	; (4284 <system_gclk_gen_get_hz+0x70>)
    4252:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4254:	b25b      	sxtb	r3, r3
    4256:	2b00      	cmp	r3, #0
    4258:	dbfb      	blt.n	4252 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    425a:	4b0a      	ldr	r3, [pc, #40]	; (4284 <system_gclk_gen_get_hz+0x70>)
    425c:	689c      	ldr	r4, [r3, #8]
    425e:	0224      	lsls	r4, r4, #8
    4260:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4262:	4b0d      	ldr	r3, [pc, #52]	; (4298 <system_gclk_gen_get_hz+0x84>)
    4264:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4266:	2e00      	cmp	r6, #0
    4268:	d107      	bne.n	427a <system_gclk_gen_get_hz+0x66>
    426a:	2c01      	cmp	r4, #1
    426c:	d907      	bls.n	427e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    426e:	0021      	movs	r1, r4
    4270:	0028      	movs	r0, r5
    4272:	4b0a      	ldr	r3, [pc, #40]	; (429c <system_gclk_gen_get_hz+0x88>)
    4274:	4798      	blx	r3
    4276:	0005      	movs	r5, r0
    4278:	e001      	b.n	427e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    427a:	3401      	adds	r4, #1
    427c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    427e:	0028      	movs	r0, r5
    4280:	bd70      	pop	{r4, r5, r6, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	40000c00 	.word	0x40000c00
    4288:	00003d19 	.word	0x00003d19
    428c:	40000c04 	.word	0x40000c04
    4290:	00003de5 	.word	0x00003de5
    4294:	40000c08 	.word	0x40000c08
    4298:	00003d59 	.word	0x00003d59
    429c:	0000467d 	.word	0x0000467d

000042a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    42a0:	b510      	push	{r4, lr}
    42a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    42a4:	4b06      	ldr	r3, [pc, #24]	; (42c0 <system_gclk_chan_enable+0x20>)
    42a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    42a8:	4b06      	ldr	r3, [pc, #24]	; (42c4 <system_gclk_chan_enable+0x24>)
    42aa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    42ac:	4a06      	ldr	r2, [pc, #24]	; (42c8 <system_gclk_chan_enable+0x28>)
    42ae:	8853      	ldrh	r3, [r2, #2]
    42b0:	2180      	movs	r1, #128	; 0x80
    42b2:	01c9      	lsls	r1, r1, #7
    42b4:	430b      	orrs	r3, r1
    42b6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    42b8:	4b04      	ldr	r3, [pc, #16]	; (42cc <system_gclk_chan_enable+0x2c>)
    42ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    42bc:	bd10      	pop	{r4, pc}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	00003d19 	.word	0x00003d19
    42c4:	40000c02 	.word	0x40000c02
    42c8:	40000c00 	.word	0x40000c00
    42cc:	00003d59 	.word	0x00003d59

000042d0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    42d0:	b510      	push	{r4, lr}
    42d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    42d4:	4b0f      	ldr	r3, [pc, #60]	; (4314 <system_gclk_chan_disable+0x44>)
    42d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    42d8:	4b0f      	ldr	r3, [pc, #60]	; (4318 <system_gclk_chan_disable+0x48>)
    42da:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    42dc:	4a0f      	ldr	r2, [pc, #60]	; (431c <system_gclk_chan_disable+0x4c>)
    42de:	8853      	ldrh	r3, [r2, #2]
    42e0:	051b      	lsls	r3, r3, #20
    42e2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    42e4:	8853      	ldrh	r3, [r2, #2]
    42e6:	490e      	ldr	r1, [pc, #56]	; (4320 <system_gclk_chan_disable+0x50>)
    42e8:	400b      	ands	r3, r1
    42ea:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    42ec:	8853      	ldrh	r3, [r2, #2]
    42ee:	490d      	ldr	r1, [pc, #52]	; (4324 <system_gclk_chan_disable+0x54>)
    42f0:	400b      	ands	r3, r1
    42f2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    42f4:	0011      	movs	r1, r2
    42f6:	2280      	movs	r2, #128	; 0x80
    42f8:	01d2      	lsls	r2, r2, #7
    42fa:	884b      	ldrh	r3, [r1, #2]
    42fc:	4213      	tst	r3, r2
    42fe:	d1fc      	bne.n	42fa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4300:	4906      	ldr	r1, [pc, #24]	; (431c <system_gclk_chan_disable+0x4c>)
    4302:	884a      	ldrh	r2, [r1, #2]
    4304:	0203      	lsls	r3, r0, #8
    4306:	4806      	ldr	r0, [pc, #24]	; (4320 <system_gclk_chan_disable+0x50>)
    4308:	4002      	ands	r2, r0
    430a:	4313      	orrs	r3, r2
    430c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    430e:	4b06      	ldr	r3, [pc, #24]	; (4328 <system_gclk_chan_disable+0x58>)
    4310:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4312:	bd10      	pop	{r4, pc}
    4314:	00003d19 	.word	0x00003d19
    4318:	40000c02 	.word	0x40000c02
    431c:	40000c00 	.word	0x40000c00
    4320:	fffff0ff 	.word	0xfffff0ff
    4324:	ffffbfff 	.word	0xffffbfff
    4328:	00003d59 	.word	0x00003d59

0000432c <system_gclk_chan_set_config>:
{
    432c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    432e:	780c      	ldrb	r4, [r1, #0]
    4330:	0224      	lsls	r4, r4, #8
    4332:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4334:	4b02      	ldr	r3, [pc, #8]	; (4340 <system_gclk_chan_set_config+0x14>)
    4336:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4338:	b2a4      	uxth	r4, r4
    433a:	4b02      	ldr	r3, [pc, #8]	; (4344 <system_gclk_chan_set_config+0x18>)
    433c:	805c      	strh	r4, [r3, #2]
}
    433e:	bd10      	pop	{r4, pc}
    4340:	000042d1 	.word	0x000042d1
    4344:	40000c00 	.word	0x40000c00

00004348 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4348:	b510      	push	{r4, lr}
    434a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    434c:	4b06      	ldr	r3, [pc, #24]	; (4368 <system_gclk_chan_get_hz+0x20>)
    434e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4350:	4b06      	ldr	r3, [pc, #24]	; (436c <system_gclk_chan_get_hz+0x24>)
    4352:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4354:	4b06      	ldr	r3, [pc, #24]	; (4370 <system_gclk_chan_get_hz+0x28>)
    4356:	885c      	ldrh	r4, [r3, #2]
    4358:	0524      	lsls	r4, r4, #20
    435a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    435c:	4b05      	ldr	r3, [pc, #20]	; (4374 <system_gclk_chan_get_hz+0x2c>)
    435e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4360:	0020      	movs	r0, r4
    4362:	4b05      	ldr	r3, [pc, #20]	; (4378 <system_gclk_chan_get_hz+0x30>)
    4364:	4798      	blx	r3
}
    4366:	bd10      	pop	{r4, pc}
    4368:	00003d19 	.word	0x00003d19
    436c:	40000c02 	.word	0x40000c02
    4370:	40000c00 	.word	0x40000c00
    4374:	00003d59 	.word	0x00003d59
    4378:	00004215 	.word	0x00004215

0000437c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    437c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    437e:	78d3      	ldrb	r3, [r2, #3]
    4380:	2b00      	cmp	r3, #0
    4382:	d135      	bne.n	43f0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4384:	7813      	ldrb	r3, [r2, #0]
    4386:	2b80      	cmp	r3, #128	; 0x80
    4388:	d029      	beq.n	43de <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    438a:	061b      	lsls	r3, r3, #24
    438c:	2480      	movs	r4, #128	; 0x80
    438e:	0264      	lsls	r4, r4, #9
    4390:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4392:	7854      	ldrb	r4, [r2, #1]
    4394:	2502      	movs	r5, #2
    4396:	43ac      	bics	r4, r5
    4398:	d106      	bne.n	43a8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    439a:	7894      	ldrb	r4, [r2, #2]
    439c:	2c00      	cmp	r4, #0
    439e:	d120      	bne.n	43e2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    43a0:	2480      	movs	r4, #128	; 0x80
    43a2:	02a4      	lsls	r4, r4, #10
    43a4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    43a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    43a8:	7854      	ldrb	r4, [r2, #1]
    43aa:	3c01      	subs	r4, #1
    43ac:	2c01      	cmp	r4, #1
    43ae:	d91c      	bls.n	43ea <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    43b0:	040d      	lsls	r5, r1, #16
    43b2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    43b4:	24a0      	movs	r4, #160	; 0xa0
    43b6:	05e4      	lsls	r4, r4, #23
    43b8:	432c      	orrs	r4, r5
    43ba:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43bc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    43be:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    43c0:	24d0      	movs	r4, #208	; 0xd0
    43c2:	0624      	lsls	r4, r4, #24
    43c4:	432c      	orrs	r4, r5
    43c6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43c8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    43ca:	78d4      	ldrb	r4, [r2, #3]
    43cc:	2c00      	cmp	r4, #0
    43ce:	d122      	bne.n	4416 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    43d0:	035b      	lsls	r3, r3, #13
    43d2:	d51c      	bpl.n	440e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    43d4:	7893      	ldrb	r3, [r2, #2]
    43d6:	2b01      	cmp	r3, #1
    43d8:	d01e      	beq.n	4418 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    43da:	6141      	str	r1, [r0, #20]
    43dc:	e017      	b.n	440e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    43de:	2300      	movs	r3, #0
    43e0:	e7d7      	b.n	4392 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    43e2:	24c0      	movs	r4, #192	; 0xc0
    43e4:	02e4      	lsls	r4, r4, #11
    43e6:	4323      	orrs	r3, r4
    43e8:	e7dd      	b.n	43a6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    43ea:	4c0d      	ldr	r4, [pc, #52]	; (4420 <_system_pinmux_config+0xa4>)
    43ec:	4023      	ands	r3, r4
    43ee:	e7df      	b.n	43b0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    43f0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    43f2:	040c      	lsls	r4, r1, #16
    43f4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    43f6:	23a0      	movs	r3, #160	; 0xa0
    43f8:	05db      	lsls	r3, r3, #23
    43fa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43fc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    43fe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4400:	23d0      	movs	r3, #208	; 0xd0
    4402:	061b      	lsls	r3, r3, #24
    4404:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4406:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4408:	78d3      	ldrb	r3, [r2, #3]
    440a:	2b00      	cmp	r3, #0
    440c:	d103      	bne.n	4416 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    440e:	7853      	ldrb	r3, [r2, #1]
    4410:	3b01      	subs	r3, #1
    4412:	2b01      	cmp	r3, #1
    4414:	d902      	bls.n	441c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4416:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4418:	6181      	str	r1, [r0, #24]
    441a:	e7f8      	b.n	440e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    441c:	6081      	str	r1, [r0, #8]
}
    441e:	e7fa      	b.n	4416 <_system_pinmux_config+0x9a>
    4420:	fffbffff 	.word	0xfffbffff

00004424 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4424:	b510      	push	{r4, lr}
    4426:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4428:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    442a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    442c:	2900      	cmp	r1, #0
    442e:	d104      	bne.n	443a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4430:	0943      	lsrs	r3, r0, #5
    4432:	01db      	lsls	r3, r3, #7
    4434:	4905      	ldr	r1, [pc, #20]	; (444c <system_pinmux_pin_set_config+0x28>)
    4436:	468c      	mov	ip, r1
    4438:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    443a:	241f      	movs	r4, #31
    443c:	4020      	ands	r0, r4
    443e:	2101      	movs	r1, #1
    4440:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4442:	0018      	movs	r0, r3
    4444:	4b02      	ldr	r3, [pc, #8]	; (4450 <system_pinmux_pin_set_config+0x2c>)
    4446:	4798      	blx	r3
}
    4448:	bd10      	pop	{r4, pc}
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	41004400 	.word	0x41004400
    4450:	0000437d 	.word	0x0000437d

00004454 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4454:	4770      	bx	lr
	...

00004458 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4458:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    445a:	4b05      	ldr	r3, [pc, #20]	; (4470 <system_init+0x18>)
    445c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    445e:	4b05      	ldr	r3, [pc, #20]	; (4474 <system_init+0x1c>)
    4460:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4462:	4b05      	ldr	r3, [pc, #20]	; (4478 <system_init+0x20>)
    4464:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4466:	4b05      	ldr	r3, [pc, #20]	; (447c <system_init+0x24>)
    4468:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    446a:	4b05      	ldr	r3, [pc, #20]	; (4480 <system_init+0x28>)
    446c:	4798      	blx	r3
}
    446e:	bd10      	pop	{r4, pc}
    4470:	00003fdd 	.word	0x00003fdd
    4474:	00003d89 	.word	0x00003d89
    4478:	00004455 	.word	0x00004455
    447c:	0000116d 	.word	0x0000116d
    4480:	00004455 	.word	0x00004455

00004484 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4484:	e7fe      	b.n	4484 <Dummy_Handler>
	...

00004488 <Reset_Handler>:
{
    4488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    448a:	4a2a      	ldr	r2, [pc, #168]	; (4534 <Reset_Handler+0xac>)
    448c:	4b2a      	ldr	r3, [pc, #168]	; (4538 <Reset_Handler+0xb0>)
    448e:	429a      	cmp	r2, r3
    4490:	d011      	beq.n	44b6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4492:	001a      	movs	r2, r3
    4494:	4b29      	ldr	r3, [pc, #164]	; (453c <Reset_Handler+0xb4>)
    4496:	429a      	cmp	r2, r3
    4498:	d20d      	bcs.n	44b6 <Reset_Handler+0x2e>
    449a:	4a29      	ldr	r2, [pc, #164]	; (4540 <Reset_Handler+0xb8>)
    449c:	3303      	adds	r3, #3
    449e:	1a9b      	subs	r3, r3, r2
    44a0:	089b      	lsrs	r3, r3, #2
    44a2:	3301      	adds	r3, #1
    44a4:	009b      	lsls	r3, r3, #2
    44a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    44a8:	4823      	ldr	r0, [pc, #140]	; (4538 <Reset_Handler+0xb0>)
    44aa:	4922      	ldr	r1, [pc, #136]	; (4534 <Reset_Handler+0xac>)
    44ac:	588c      	ldr	r4, [r1, r2]
    44ae:	5084      	str	r4, [r0, r2]
    44b0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    44b2:	429a      	cmp	r2, r3
    44b4:	d1fa      	bne.n	44ac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    44b6:	4a23      	ldr	r2, [pc, #140]	; (4544 <Reset_Handler+0xbc>)
    44b8:	4b23      	ldr	r3, [pc, #140]	; (4548 <Reset_Handler+0xc0>)
    44ba:	429a      	cmp	r2, r3
    44bc:	d20a      	bcs.n	44d4 <Reset_Handler+0x4c>
    44be:	43d3      	mvns	r3, r2
    44c0:	4921      	ldr	r1, [pc, #132]	; (4548 <Reset_Handler+0xc0>)
    44c2:	185b      	adds	r3, r3, r1
    44c4:	2103      	movs	r1, #3
    44c6:	438b      	bics	r3, r1
    44c8:	3304      	adds	r3, #4
    44ca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    44cc:	2100      	movs	r1, #0
    44ce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    44d0:	4293      	cmp	r3, r2
    44d2:	d1fc      	bne.n	44ce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    44d4:	4a1d      	ldr	r2, [pc, #116]	; (454c <Reset_Handler+0xc4>)
    44d6:	21ff      	movs	r1, #255	; 0xff
    44d8:	4b1d      	ldr	r3, [pc, #116]	; (4550 <Reset_Handler+0xc8>)
    44da:	438b      	bics	r3, r1
    44dc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    44de:	39fd      	subs	r1, #253	; 0xfd
    44e0:	2390      	movs	r3, #144	; 0x90
    44e2:	005b      	lsls	r3, r3, #1
    44e4:	4a1b      	ldr	r2, [pc, #108]	; (4554 <Reset_Handler+0xcc>)
    44e6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    44e8:	4a1b      	ldr	r2, [pc, #108]	; (4558 <Reset_Handler+0xd0>)
    44ea:	78d3      	ldrb	r3, [r2, #3]
    44ec:	2503      	movs	r5, #3
    44ee:	43ab      	bics	r3, r5
    44f0:	2402      	movs	r4, #2
    44f2:	4323      	orrs	r3, r4
    44f4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    44f6:	78d3      	ldrb	r3, [r2, #3]
    44f8:	270c      	movs	r7, #12
    44fa:	43bb      	bics	r3, r7
    44fc:	2608      	movs	r6, #8
    44fe:	4333      	orrs	r3, r6
    4500:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4502:	4b16      	ldr	r3, [pc, #88]	; (455c <Reset_Handler+0xd4>)
    4504:	7b98      	ldrb	r0, [r3, #14]
    4506:	2230      	movs	r2, #48	; 0x30
    4508:	4390      	bics	r0, r2
    450a:	2220      	movs	r2, #32
    450c:	4310      	orrs	r0, r2
    450e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4510:	7b99      	ldrb	r1, [r3, #14]
    4512:	43b9      	bics	r1, r7
    4514:	4331      	orrs	r1, r6
    4516:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4518:	7b9a      	ldrb	r2, [r3, #14]
    451a:	43aa      	bics	r2, r5
    451c:	4322      	orrs	r2, r4
    451e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4520:	4a0f      	ldr	r2, [pc, #60]	; (4560 <Reset_Handler+0xd8>)
    4522:	6853      	ldr	r3, [r2, #4]
    4524:	2180      	movs	r1, #128	; 0x80
    4526:	430b      	orrs	r3, r1
    4528:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    452a:	4b0e      	ldr	r3, [pc, #56]	; (4564 <Reset_Handler+0xdc>)
    452c:	4798      	blx	r3
        main();
    452e:	4b0e      	ldr	r3, [pc, #56]	; (4568 <Reset_Handler+0xe0>)
    4530:	4798      	blx	r3
    4532:	e7fe      	b.n	4532 <Reset_Handler+0xaa>
    4534:	00004b48 	.word	0x00004b48
    4538:	20000000 	.word	0x20000000
    453c:	200000f4 	.word	0x200000f4
    4540:	20000004 	.word	0x20000004
    4544:	200000f4 	.word	0x200000f4
    4548:	20000948 	.word	0x20000948
    454c:	e000ed00 	.word	0xe000ed00
    4550:	00000000 	.word	0x00000000
    4554:	41007000 	.word	0x41007000
    4558:	41005000 	.word	0x41005000
    455c:	41004800 	.word	0x41004800
    4560:	41004000 	.word	0x41004000
    4564:	000049fd 	.word	0x000049fd
    4568:	0000456d 	.word	0x0000456d

0000456c <main>:
#include "main21.h"
#include "os_usart.h"
#include "os_i2c.h"

int main(void)
{
    456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    456e:	46de      	mov	lr, fp
    4570:	4657      	mov	r7, sl
    4572:	464e      	mov	r6, r9
    4574:	4645      	mov	r5, r8
    4576:	b5e0      	push	{r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    4578:	4d36      	ldr	r5, [pc, #216]	; (4654 <main+0xe8>)
    457a:	2401      	movs	r4, #1
    457c:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    457e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4582:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    4584:	4b34      	ldr	r3, [pc, #208]	; (4658 <main+0xec>)
    4586:	2200      	movs	r2, #0
    4588:	701a      	strb	r2, [r3, #0]
    458a:	705a      	strb	r2, [r3, #1]
    458c:	709a      	strb	r2, [r3, #2]
    458e:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4590:	711c      	strb	r4, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();
	system_init();
    4592:	4b32      	ldr	r3, [pc, #200]	; (465c <main+0xf0>)
    4594:	4798      	blx	r3
	cpu_irq_enable();
    4596:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4598:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    459c:	b662      	cpsie	i
	system_interrupt_enable_global();
	//os_usart_init();
	//os_usart_service_start();
	//PDEBUG("hi\r\n");
	ui_init();
    459e:	4b30      	ldr	r3, [pc, #192]	; (4660 <main+0xf4>)
    45a0:	4798      	blx	r3
	ui_powerdown();
    45a2:	4b30      	ldr	r3, [pc, #192]	; (4664 <main+0xf8>)
    45a4:	4798      	blx	r3


	// Start USB stack to authorize VBus monitoring
	udc_start();
    45a6:	4b30      	ldr	r3, [pc, #192]	; (4668 <main+0xfc>)
    45a8:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    45aa:	4f2a      	ldr	r7, [pc, #168]	; (4654 <main+0xe8>)
    45ac:	2400      	movs	r4, #0
    45ae:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    45b0:	4d29      	ldr	r5, [pc, #164]	; (4658 <main+0xec>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    45b2:	46b8      	mov	r8, r7
    45b4:	2301      	movs	r3, #1
    45b6:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    45b8:	46bb      	mov	fp, r7
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    45ba:	4b2c      	ldr	r3, [pc, #176]	; (466c <main+0x100>)
    45bc:	469a      	mov	sl, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    45be:	230f      	movs	r3, #15
    45c0:	4699      	mov	r9, r3
    45c2:	e00e      	b.n	45e2 <main+0x76>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    45c4:	0019      	movs	r1, r3
		lock_ptr++;
    45c6:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    45c8:	1c4b      	adds	r3, r1, #1
    45ca:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    45cc:	7810      	ldrb	r0, [r2, #0]
    45ce:	2800      	cmp	r0, #0
    45d0:	d0f8      	beq.n	45c4 <main+0x58>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    45d2:	2b00      	cmp	r3, #0
    45d4:	d10f      	bne.n	45f6 <main+0x8a>
		cpu_irq_enable();
    45d6:	4643      	mov	r3, r8
    45d8:	4662      	mov	r2, ip
    45da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    45dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45e0:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
    45e2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    45e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    45e8:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    45ea:	782b      	ldrb	r3, [r5, #0]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d1f2      	bne.n	45d6 <main+0x6a>
    45f0:	0021      	movs	r1, r4
    45f2:	4a19      	ldr	r2, [pc, #100]	; (4658 <main+0xec>)
    45f4:	e7e7      	b.n	45c6 <main+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
    45f6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    45f8:	f3bf 8f5f 	dmb	sy
    45fc:	465b      	mov	r3, fp
    45fe:	701c      	strb	r4, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    4600:	4653      	mov	r3, sl
    4602:	699b      	ldr	r3, [r3, #24]
    4604:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
    4606:	464a      	mov	r2, r9
    4608:	4013      	ands	r3, r2
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    460a:	2b02      	cmp	r3, #2
    460c:	d805      	bhi.n	461a <main+0xae>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    460e:	4a18      	ldr	r2, [pc, #96]	; (4670 <main+0x104>)
    4610:	6850      	ldr	r0, [r2, #4]
    4612:	23c0      	movs	r3, #192	; 0xc0
    4614:	009b      	lsls	r3, r3, #2
    4616:	4303      	orrs	r3, r0
    4618:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    461a:	2902      	cmp	r1, #2
    461c:	d90b      	bls.n	4636 <main+0xca>
    461e:	2903      	cmp	r1, #3
    4620:	d011      	beq.n	4646 <main+0xda>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    4622:	4b0c      	ldr	r3, [pc, #48]	; (4654 <main+0xe8>)
    4624:	4662      	mov	r2, ip
    4626:	701a      	strb	r2, [r3, #0]
    4628:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    462c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    462e:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
    4632:	bf30      	wfi
    4634:	e7d5      	b.n	45e2 <main+0x76>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4636:	4a0f      	ldr	r2, [pc, #60]	; (4674 <main+0x108>)
    4638:	6913      	ldr	r3, [r2, #16]
    463a:	2004      	movs	r0, #4
    463c:	4383      	bics	r3, r0
    463e:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    4640:	4b0d      	ldr	r3, [pc, #52]	; (4678 <main+0x10c>)
    4642:	7059      	strb	r1, [r3, #1]
    4644:	e7ed      	b.n	4622 <main+0xb6>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4646:	4a0b      	ldr	r2, [pc, #44]	; (4674 <main+0x108>)
    4648:	6913      	ldr	r3, [r2, #16]
    464a:	2104      	movs	r1, #4
    464c:	430b      	orrs	r3, r1
    464e:	6113      	str	r3, [r2, #16]
    4650:	e7e7      	b.n	4622 <main+0xb6>
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	200000f0 	.word	0x200000f0
    4658:	200008dc 	.word	0x200008dc
    465c:	00004459 	.word	0x00004459
    4660:	00001f15 	.word	0x00001f15
    4664:	00001f25 	.word	0x00001f25
    4668:	00000c65 	.word	0x00000c65
    466c:	41002000 	.word	0x41002000
    4670:	41004000 	.word	0x41004000
    4674:	e000ed00 	.word	0xe000ed00
    4678:	40000400 	.word	0x40000400

0000467c <__udivsi3>:
    467c:	2200      	movs	r2, #0
    467e:	0843      	lsrs	r3, r0, #1
    4680:	428b      	cmp	r3, r1
    4682:	d374      	bcc.n	476e <__udivsi3+0xf2>
    4684:	0903      	lsrs	r3, r0, #4
    4686:	428b      	cmp	r3, r1
    4688:	d35f      	bcc.n	474a <__udivsi3+0xce>
    468a:	0a03      	lsrs	r3, r0, #8
    468c:	428b      	cmp	r3, r1
    468e:	d344      	bcc.n	471a <__udivsi3+0x9e>
    4690:	0b03      	lsrs	r3, r0, #12
    4692:	428b      	cmp	r3, r1
    4694:	d328      	bcc.n	46e8 <__udivsi3+0x6c>
    4696:	0c03      	lsrs	r3, r0, #16
    4698:	428b      	cmp	r3, r1
    469a:	d30d      	bcc.n	46b8 <__udivsi3+0x3c>
    469c:	22ff      	movs	r2, #255	; 0xff
    469e:	0209      	lsls	r1, r1, #8
    46a0:	ba12      	rev	r2, r2
    46a2:	0c03      	lsrs	r3, r0, #16
    46a4:	428b      	cmp	r3, r1
    46a6:	d302      	bcc.n	46ae <__udivsi3+0x32>
    46a8:	1212      	asrs	r2, r2, #8
    46aa:	0209      	lsls	r1, r1, #8
    46ac:	d065      	beq.n	477a <__udivsi3+0xfe>
    46ae:	0b03      	lsrs	r3, r0, #12
    46b0:	428b      	cmp	r3, r1
    46b2:	d319      	bcc.n	46e8 <__udivsi3+0x6c>
    46b4:	e000      	b.n	46b8 <__udivsi3+0x3c>
    46b6:	0a09      	lsrs	r1, r1, #8
    46b8:	0bc3      	lsrs	r3, r0, #15
    46ba:	428b      	cmp	r3, r1
    46bc:	d301      	bcc.n	46c2 <__udivsi3+0x46>
    46be:	03cb      	lsls	r3, r1, #15
    46c0:	1ac0      	subs	r0, r0, r3
    46c2:	4152      	adcs	r2, r2
    46c4:	0b83      	lsrs	r3, r0, #14
    46c6:	428b      	cmp	r3, r1
    46c8:	d301      	bcc.n	46ce <__udivsi3+0x52>
    46ca:	038b      	lsls	r3, r1, #14
    46cc:	1ac0      	subs	r0, r0, r3
    46ce:	4152      	adcs	r2, r2
    46d0:	0b43      	lsrs	r3, r0, #13
    46d2:	428b      	cmp	r3, r1
    46d4:	d301      	bcc.n	46da <__udivsi3+0x5e>
    46d6:	034b      	lsls	r3, r1, #13
    46d8:	1ac0      	subs	r0, r0, r3
    46da:	4152      	adcs	r2, r2
    46dc:	0b03      	lsrs	r3, r0, #12
    46de:	428b      	cmp	r3, r1
    46e0:	d301      	bcc.n	46e6 <__udivsi3+0x6a>
    46e2:	030b      	lsls	r3, r1, #12
    46e4:	1ac0      	subs	r0, r0, r3
    46e6:	4152      	adcs	r2, r2
    46e8:	0ac3      	lsrs	r3, r0, #11
    46ea:	428b      	cmp	r3, r1
    46ec:	d301      	bcc.n	46f2 <__udivsi3+0x76>
    46ee:	02cb      	lsls	r3, r1, #11
    46f0:	1ac0      	subs	r0, r0, r3
    46f2:	4152      	adcs	r2, r2
    46f4:	0a83      	lsrs	r3, r0, #10
    46f6:	428b      	cmp	r3, r1
    46f8:	d301      	bcc.n	46fe <__udivsi3+0x82>
    46fa:	028b      	lsls	r3, r1, #10
    46fc:	1ac0      	subs	r0, r0, r3
    46fe:	4152      	adcs	r2, r2
    4700:	0a43      	lsrs	r3, r0, #9
    4702:	428b      	cmp	r3, r1
    4704:	d301      	bcc.n	470a <__udivsi3+0x8e>
    4706:	024b      	lsls	r3, r1, #9
    4708:	1ac0      	subs	r0, r0, r3
    470a:	4152      	adcs	r2, r2
    470c:	0a03      	lsrs	r3, r0, #8
    470e:	428b      	cmp	r3, r1
    4710:	d301      	bcc.n	4716 <__udivsi3+0x9a>
    4712:	020b      	lsls	r3, r1, #8
    4714:	1ac0      	subs	r0, r0, r3
    4716:	4152      	adcs	r2, r2
    4718:	d2cd      	bcs.n	46b6 <__udivsi3+0x3a>
    471a:	09c3      	lsrs	r3, r0, #7
    471c:	428b      	cmp	r3, r1
    471e:	d301      	bcc.n	4724 <__udivsi3+0xa8>
    4720:	01cb      	lsls	r3, r1, #7
    4722:	1ac0      	subs	r0, r0, r3
    4724:	4152      	adcs	r2, r2
    4726:	0983      	lsrs	r3, r0, #6
    4728:	428b      	cmp	r3, r1
    472a:	d301      	bcc.n	4730 <__udivsi3+0xb4>
    472c:	018b      	lsls	r3, r1, #6
    472e:	1ac0      	subs	r0, r0, r3
    4730:	4152      	adcs	r2, r2
    4732:	0943      	lsrs	r3, r0, #5
    4734:	428b      	cmp	r3, r1
    4736:	d301      	bcc.n	473c <__udivsi3+0xc0>
    4738:	014b      	lsls	r3, r1, #5
    473a:	1ac0      	subs	r0, r0, r3
    473c:	4152      	adcs	r2, r2
    473e:	0903      	lsrs	r3, r0, #4
    4740:	428b      	cmp	r3, r1
    4742:	d301      	bcc.n	4748 <__udivsi3+0xcc>
    4744:	010b      	lsls	r3, r1, #4
    4746:	1ac0      	subs	r0, r0, r3
    4748:	4152      	adcs	r2, r2
    474a:	08c3      	lsrs	r3, r0, #3
    474c:	428b      	cmp	r3, r1
    474e:	d301      	bcc.n	4754 <__udivsi3+0xd8>
    4750:	00cb      	lsls	r3, r1, #3
    4752:	1ac0      	subs	r0, r0, r3
    4754:	4152      	adcs	r2, r2
    4756:	0883      	lsrs	r3, r0, #2
    4758:	428b      	cmp	r3, r1
    475a:	d301      	bcc.n	4760 <__udivsi3+0xe4>
    475c:	008b      	lsls	r3, r1, #2
    475e:	1ac0      	subs	r0, r0, r3
    4760:	4152      	adcs	r2, r2
    4762:	0843      	lsrs	r3, r0, #1
    4764:	428b      	cmp	r3, r1
    4766:	d301      	bcc.n	476c <__udivsi3+0xf0>
    4768:	004b      	lsls	r3, r1, #1
    476a:	1ac0      	subs	r0, r0, r3
    476c:	4152      	adcs	r2, r2
    476e:	1a41      	subs	r1, r0, r1
    4770:	d200      	bcs.n	4774 <__udivsi3+0xf8>
    4772:	4601      	mov	r1, r0
    4774:	4152      	adcs	r2, r2
    4776:	4610      	mov	r0, r2
    4778:	4770      	bx	lr
    477a:	e7ff      	b.n	477c <__udivsi3+0x100>
    477c:	b501      	push	{r0, lr}
    477e:	2000      	movs	r0, #0
    4780:	f000 f8f0 	bl	4964 <__aeabi_idiv0>
    4784:	bd02      	pop	{r1, pc}
    4786:	46c0      	nop			; (mov r8, r8)

00004788 <__aeabi_uidivmod>:
    4788:	2900      	cmp	r1, #0
    478a:	d0f7      	beq.n	477c <__udivsi3+0x100>
    478c:	e776      	b.n	467c <__udivsi3>
    478e:	4770      	bx	lr

00004790 <__divsi3>:
    4790:	4603      	mov	r3, r0
    4792:	430b      	orrs	r3, r1
    4794:	d47f      	bmi.n	4896 <__divsi3+0x106>
    4796:	2200      	movs	r2, #0
    4798:	0843      	lsrs	r3, r0, #1
    479a:	428b      	cmp	r3, r1
    479c:	d374      	bcc.n	4888 <__divsi3+0xf8>
    479e:	0903      	lsrs	r3, r0, #4
    47a0:	428b      	cmp	r3, r1
    47a2:	d35f      	bcc.n	4864 <__divsi3+0xd4>
    47a4:	0a03      	lsrs	r3, r0, #8
    47a6:	428b      	cmp	r3, r1
    47a8:	d344      	bcc.n	4834 <__divsi3+0xa4>
    47aa:	0b03      	lsrs	r3, r0, #12
    47ac:	428b      	cmp	r3, r1
    47ae:	d328      	bcc.n	4802 <__divsi3+0x72>
    47b0:	0c03      	lsrs	r3, r0, #16
    47b2:	428b      	cmp	r3, r1
    47b4:	d30d      	bcc.n	47d2 <__divsi3+0x42>
    47b6:	22ff      	movs	r2, #255	; 0xff
    47b8:	0209      	lsls	r1, r1, #8
    47ba:	ba12      	rev	r2, r2
    47bc:	0c03      	lsrs	r3, r0, #16
    47be:	428b      	cmp	r3, r1
    47c0:	d302      	bcc.n	47c8 <__divsi3+0x38>
    47c2:	1212      	asrs	r2, r2, #8
    47c4:	0209      	lsls	r1, r1, #8
    47c6:	d065      	beq.n	4894 <__divsi3+0x104>
    47c8:	0b03      	lsrs	r3, r0, #12
    47ca:	428b      	cmp	r3, r1
    47cc:	d319      	bcc.n	4802 <__divsi3+0x72>
    47ce:	e000      	b.n	47d2 <__divsi3+0x42>
    47d0:	0a09      	lsrs	r1, r1, #8
    47d2:	0bc3      	lsrs	r3, r0, #15
    47d4:	428b      	cmp	r3, r1
    47d6:	d301      	bcc.n	47dc <__divsi3+0x4c>
    47d8:	03cb      	lsls	r3, r1, #15
    47da:	1ac0      	subs	r0, r0, r3
    47dc:	4152      	adcs	r2, r2
    47de:	0b83      	lsrs	r3, r0, #14
    47e0:	428b      	cmp	r3, r1
    47e2:	d301      	bcc.n	47e8 <__divsi3+0x58>
    47e4:	038b      	lsls	r3, r1, #14
    47e6:	1ac0      	subs	r0, r0, r3
    47e8:	4152      	adcs	r2, r2
    47ea:	0b43      	lsrs	r3, r0, #13
    47ec:	428b      	cmp	r3, r1
    47ee:	d301      	bcc.n	47f4 <__divsi3+0x64>
    47f0:	034b      	lsls	r3, r1, #13
    47f2:	1ac0      	subs	r0, r0, r3
    47f4:	4152      	adcs	r2, r2
    47f6:	0b03      	lsrs	r3, r0, #12
    47f8:	428b      	cmp	r3, r1
    47fa:	d301      	bcc.n	4800 <__divsi3+0x70>
    47fc:	030b      	lsls	r3, r1, #12
    47fe:	1ac0      	subs	r0, r0, r3
    4800:	4152      	adcs	r2, r2
    4802:	0ac3      	lsrs	r3, r0, #11
    4804:	428b      	cmp	r3, r1
    4806:	d301      	bcc.n	480c <__divsi3+0x7c>
    4808:	02cb      	lsls	r3, r1, #11
    480a:	1ac0      	subs	r0, r0, r3
    480c:	4152      	adcs	r2, r2
    480e:	0a83      	lsrs	r3, r0, #10
    4810:	428b      	cmp	r3, r1
    4812:	d301      	bcc.n	4818 <__divsi3+0x88>
    4814:	028b      	lsls	r3, r1, #10
    4816:	1ac0      	subs	r0, r0, r3
    4818:	4152      	adcs	r2, r2
    481a:	0a43      	lsrs	r3, r0, #9
    481c:	428b      	cmp	r3, r1
    481e:	d301      	bcc.n	4824 <__divsi3+0x94>
    4820:	024b      	lsls	r3, r1, #9
    4822:	1ac0      	subs	r0, r0, r3
    4824:	4152      	adcs	r2, r2
    4826:	0a03      	lsrs	r3, r0, #8
    4828:	428b      	cmp	r3, r1
    482a:	d301      	bcc.n	4830 <__divsi3+0xa0>
    482c:	020b      	lsls	r3, r1, #8
    482e:	1ac0      	subs	r0, r0, r3
    4830:	4152      	adcs	r2, r2
    4832:	d2cd      	bcs.n	47d0 <__divsi3+0x40>
    4834:	09c3      	lsrs	r3, r0, #7
    4836:	428b      	cmp	r3, r1
    4838:	d301      	bcc.n	483e <__divsi3+0xae>
    483a:	01cb      	lsls	r3, r1, #7
    483c:	1ac0      	subs	r0, r0, r3
    483e:	4152      	adcs	r2, r2
    4840:	0983      	lsrs	r3, r0, #6
    4842:	428b      	cmp	r3, r1
    4844:	d301      	bcc.n	484a <__divsi3+0xba>
    4846:	018b      	lsls	r3, r1, #6
    4848:	1ac0      	subs	r0, r0, r3
    484a:	4152      	adcs	r2, r2
    484c:	0943      	lsrs	r3, r0, #5
    484e:	428b      	cmp	r3, r1
    4850:	d301      	bcc.n	4856 <__divsi3+0xc6>
    4852:	014b      	lsls	r3, r1, #5
    4854:	1ac0      	subs	r0, r0, r3
    4856:	4152      	adcs	r2, r2
    4858:	0903      	lsrs	r3, r0, #4
    485a:	428b      	cmp	r3, r1
    485c:	d301      	bcc.n	4862 <__divsi3+0xd2>
    485e:	010b      	lsls	r3, r1, #4
    4860:	1ac0      	subs	r0, r0, r3
    4862:	4152      	adcs	r2, r2
    4864:	08c3      	lsrs	r3, r0, #3
    4866:	428b      	cmp	r3, r1
    4868:	d301      	bcc.n	486e <__divsi3+0xde>
    486a:	00cb      	lsls	r3, r1, #3
    486c:	1ac0      	subs	r0, r0, r3
    486e:	4152      	adcs	r2, r2
    4870:	0883      	lsrs	r3, r0, #2
    4872:	428b      	cmp	r3, r1
    4874:	d301      	bcc.n	487a <__divsi3+0xea>
    4876:	008b      	lsls	r3, r1, #2
    4878:	1ac0      	subs	r0, r0, r3
    487a:	4152      	adcs	r2, r2
    487c:	0843      	lsrs	r3, r0, #1
    487e:	428b      	cmp	r3, r1
    4880:	d301      	bcc.n	4886 <__divsi3+0xf6>
    4882:	004b      	lsls	r3, r1, #1
    4884:	1ac0      	subs	r0, r0, r3
    4886:	4152      	adcs	r2, r2
    4888:	1a41      	subs	r1, r0, r1
    488a:	d200      	bcs.n	488e <__divsi3+0xfe>
    488c:	4601      	mov	r1, r0
    488e:	4152      	adcs	r2, r2
    4890:	4610      	mov	r0, r2
    4892:	4770      	bx	lr
    4894:	e05d      	b.n	4952 <__divsi3+0x1c2>
    4896:	0fca      	lsrs	r2, r1, #31
    4898:	d000      	beq.n	489c <__divsi3+0x10c>
    489a:	4249      	negs	r1, r1
    489c:	1003      	asrs	r3, r0, #32
    489e:	d300      	bcc.n	48a2 <__divsi3+0x112>
    48a0:	4240      	negs	r0, r0
    48a2:	4053      	eors	r3, r2
    48a4:	2200      	movs	r2, #0
    48a6:	469c      	mov	ip, r3
    48a8:	0903      	lsrs	r3, r0, #4
    48aa:	428b      	cmp	r3, r1
    48ac:	d32d      	bcc.n	490a <__divsi3+0x17a>
    48ae:	0a03      	lsrs	r3, r0, #8
    48b0:	428b      	cmp	r3, r1
    48b2:	d312      	bcc.n	48da <__divsi3+0x14a>
    48b4:	22fc      	movs	r2, #252	; 0xfc
    48b6:	0189      	lsls	r1, r1, #6
    48b8:	ba12      	rev	r2, r2
    48ba:	0a03      	lsrs	r3, r0, #8
    48bc:	428b      	cmp	r3, r1
    48be:	d30c      	bcc.n	48da <__divsi3+0x14a>
    48c0:	0189      	lsls	r1, r1, #6
    48c2:	1192      	asrs	r2, r2, #6
    48c4:	428b      	cmp	r3, r1
    48c6:	d308      	bcc.n	48da <__divsi3+0x14a>
    48c8:	0189      	lsls	r1, r1, #6
    48ca:	1192      	asrs	r2, r2, #6
    48cc:	428b      	cmp	r3, r1
    48ce:	d304      	bcc.n	48da <__divsi3+0x14a>
    48d0:	0189      	lsls	r1, r1, #6
    48d2:	d03a      	beq.n	494a <__divsi3+0x1ba>
    48d4:	1192      	asrs	r2, r2, #6
    48d6:	e000      	b.n	48da <__divsi3+0x14a>
    48d8:	0989      	lsrs	r1, r1, #6
    48da:	09c3      	lsrs	r3, r0, #7
    48dc:	428b      	cmp	r3, r1
    48de:	d301      	bcc.n	48e4 <__divsi3+0x154>
    48e0:	01cb      	lsls	r3, r1, #7
    48e2:	1ac0      	subs	r0, r0, r3
    48e4:	4152      	adcs	r2, r2
    48e6:	0983      	lsrs	r3, r0, #6
    48e8:	428b      	cmp	r3, r1
    48ea:	d301      	bcc.n	48f0 <__divsi3+0x160>
    48ec:	018b      	lsls	r3, r1, #6
    48ee:	1ac0      	subs	r0, r0, r3
    48f0:	4152      	adcs	r2, r2
    48f2:	0943      	lsrs	r3, r0, #5
    48f4:	428b      	cmp	r3, r1
    48f6:	d301      	bcc.n	48fc <__divsi3+0x16c>
    48f8:	014b      	lsls	r3, r1, #5
    48fa:	1ac0      	subs	r0, r0, r3
    48fc:	4152      	adcs	r2, r2
    48fe:	0903      	lsrs	r3, r0, #4
    4900:	428b      	cmp	r3, r1
    4902:	d301      	bcc.n	4908 <__divsi3+0x178>
    4904:	010b      	lsls	r3, r1, #4
    4906:	1ac0      	subs	r0, r0, r3
    4908:	4152      	adcs	r2, r2
    490a:	08c3      	lsrs	r3, r0, #3
    490c:	428b      	cmp	r3, r1
    490e:	d301      	bcc.n	4914 <__divsi3+0x184>
    4910:	00cb      	lsls	r3, r1, #3
    4912:	1ac0      	subs	r0, r0, r3
    4914:	4152      	adcs	r2, r2
    4916:	0883      	lsrs	r3, r0, #2
    4918:	428b      	cmp	r3, r1
    491a:	d301      	bcc.n	4920 <__divsi3+0x190>
    491c:	008b      	lsls	r3, r1, #2
    491e:	1ac0      	subs	r0, r0, r3
    4920:	4152      	adcs	r2, r2
    4922:	d2d9      	bcs.n	48d8 <__divsi3+0x148>
    4924:	0843      	lsrs	r3, r0, #1
    4926:	428b      	cmp	r3, r1
    4928:	d301      	bcc.n	492e <__divsi3+0x19e>
    492a:	004b      	lsls	r3, r1, #1
    492c:	1ac0      	subs	r0, r0, r3
    492e:	4152      	adcs	r2, r2
    4930:	1a41      	subs	r1, r0, r1
    4932:	d200      	bcs.n	4936 <__divsi3+0x1a6>
    4934:	4601      	mov	r1, r0
    4936:	4663      	mov	r3, ip
    4938:	4152      	adcs	r2, r2
    493a:	105b      	asrs	r3, r3, #1
    493c:	4610      	mov	r0, r2
    493e:	d301      	bcc.n	4944 <__divsi3+0x1b4>
    4940:	4240      	negs	r0, r0
    4942:	2b00      	cmp	r3, #0
    4944:	d500      	bpl.n	4948 <__divsi3+0x1b8>
    4946:	4249      	negs	r1, r1
    4948:	4770      	bx	lr
    494a:	4663      	mov	r3, ip
    494c:	105b      	asrs	r3, r3, #1
    494e:	d300      	bcc.n	4952 <__divsi3+0x1c2>
    4950:	4240      	negs	r0, r0
    4952:	b501      	push	{r0, lr}
    4954:	2000      	movs	r0, #0
    4956:	f000 f805 	bl	4964 <__aeabi_idiv0>
    495a:	bd02      	pop	{r1, pc}

0000495c <__aeabi_idivmod>:
    495c:	2900      	cmp	r1, #0
    495e:	d0f8      	beq.n	4952 <__divsi3+0x1c2>
    4960:	e716      	b.n	4790 <__divsi3>
    4962:	4770      	bx	lr

00004964 <__aeabi_idiv0>:
    4964:	4770      	bx	lr
    4966:	46c0      	nop			; (mov r8, r8)

00004968 <__ctzsi2>:
    4968:	4241      	negs	r1, r0
    496a:	4008      	ands	r0, r1
    496c:	211c      	movs	r1, #28
    496e:	2301      	movs	r3, #1
    4970:	041b      	lsls	r3, r3, #16
    4972:	4298      	cmp	r0, r3
    4974:	d301      	bcc.n	497a <__ctzsi2+0x12>
    4976:	0c00      	lsrs	r0, r0, #16
    4978:	3910      	subs	r1, #16
    497a:	0a1b      	lsrs	r3, r3, #8
    497c:	4298      	cmp	r0, r3
    497e:	d301      	bcc.n	4984 <__ctzsi2+0x1c>
    4980:	0a00      	lsrs	r0, r0, #8
    4982:	3908      	subs	r1, #8
    4984:	091b      	lsrs	r3, r3, #4
    4986:	4298      	cmp	r0, r3
    4988:	d301      	bcc.n	498e <__ctzsi2+0x26>
    498a:	0900      	lsrs	r0, r0, #4
    498c:	3904      	subs	r1, #4
    498e:	a202      	add	r2, pc, #8	; (adr r2, 4998 <__ctzsi2+0x30>)
    4990:	5c10      	ldrb	r0, [r2, r0]
    4992:	1a40      	subs	r0, r0, r1
    4994:	4770      	bx	lr
    4996:	46c0      	nop			; (mov r8, r8)
    4998:	1d1d1c1b 	.word	0x1d1d1c1b
    499c:	1e1e1e1e 	.word	0x1e1e1e1e
    49a0:	1f1f1f1f 	.word	0x1f1f1f1f
    49a4:	1f1f1f1f 	.word	0x1f1f1f1f

000049a8 <__aeabi_lmul>:
    49a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49aa:	46ce      	mov	lr, r9
    49ac:	4647      	mov	r7, r8
    49ae:	0415      	lsls	r5, r2, #16
    49b0:	0c2d      	lsrs	r5, r5, #16
    49b2:	002e      	movs	r6, r5
    49b4:	b580      	push	{r7, lr}
    49b6:	0407      	lsls	r7, r0, #16
    49b8:	0c14      	lsrs	r4, r2, #16
    49ba:	0c3f      	lsrs	r7, r7, #16
    49bc:	4699      	mov	r9, r3
    49be:	0c03      	lsrs	r3, r0, #16
    49c0:	437e      	muls	r6, r7
    49c2:	435d      	muls	r5, r3
    49c4:	4367      	muls	r7, r4
    49c6:	4363      	muls	r3, r4
    49c8:	197f      	adds	r7, r7, r5
    49ca:	0c34      	lsrs	r4, r6, #16
    49cc:	19e4      	adds	r4, r4, r7
    49ce:	469c      	mov	ip, r3
    49d0:	42a5      	cmp	r5, r4
    49d2:	d903      	bls.n	49dc <__aeabi_lmul+0x34>
    49d4:	2380      	movs	r3, #128	; 0x80
    49d6:	025b      	lsls	r3, r3, #9
    49d8:	4698      	mov	r8, r3
    49da:	44c4      	add	ip, r8
    49dc:	464b      	mov	r3, r9
    49de:	4351      	muls	r1, r2
    49e0:	4343      	muls	r3, r0
    49e2:	0436      	lsls	r6, r6, #16
    49e4:	0c36      	lsrs	r6, r6, #16
    49e6:	0c25      	lsrs	r5, r4, #16
    49e8:	0424      	lsls	r4, r4, #16
    49ea:	4465      	add	r5, ip
    49ec:	19a4      	adds	r4, r4, r6
    49ee:	1859      	adds	r1, r3, r1
    49f0:	1949      	adds	r1, r1, r5
    49f2:	0020      	movs	r0, r4
    49f4:	bc0c      	pop	{r2, r3}
    49f6:	4690      	mov	r8, r2
    49f8:	4699      	mov	r9, r3
    49fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000049fc <__libc_init_array>:
    49fc:	b570      	push	{r4, r5, r6, lr}
    49fe:	2600      	movs	r6, #0
    4a00:	4d0c      	ldr	r5, [pc, #48]	; (4a34 <__libc_init_array+0x38>)
    4a02:	4c0d      	ldr	r4, [pc, #52]	; (4a38 <__libc_init_array+0x3c>)
    4a04:	1b64      	subs	r4, r4, r5
    4a06:	10a4      	asrs	r4, r4, #2
    4a08:	42a6      	cmp	r6, r4
    4a0a:	d109      	bne.n	4a20 <__libc_init_array+0x24>
    4a0c:	2600      	movs	r6, #0
    4a0e:	f000 f88b 	bl	4b28 <_init>
    4a12:	4d0a      	ldr	r5, [pc, #40]	; (4a3c <__libc_init_array+0x40>)
    4a14:	4c0a      	ldr	r4, [pc, #40]	; (4a40 <__libc_init_array+0x44>)
    4a16:	1b64      	subs	r4, r4, r5
    4a18:	10a4      	asrs	r4, r4, #2
    4a1a:	42a6      	cmp	r6, r4
    4a1c:	d105      	bne.n	4a2a <__libc_init_array+0x2e>
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
    4a20:	00b3      	lsls	r3, r6, #2
    4a22:	58eb      	ldr	r3, [r5, r3]
    4a24:	4798      	blx	r3
    4a26:	3601      	adds	r6, #1
    4a28:	e7ee      	b.n	4a08 <__libc_init_array+0xc>
    4a2a:	00b3      	lsls	r3, r6, #2
    4a2c:	58eb      	ldr	r3, [r5, r3]
    4a2e:	4798      	blx	r3
    4a30:	3601      	adds	r6, #1
    4a32:	e7f2      	b.n	4a1a <__libc_init_array+0x1e>
    4a34:	00004b34 	.word	0x00004b34
    4a38:	00004b34 	.word	0x00004b34
    4a3c:	00004b34 	.word	0x00004b34
    4a40:	00004b38 	.word	0x00004b38

00004a44 <memcpy>:
    4a44:	2300      	movs	r3, #0
    4a46:	b510      	push	{r4, lr}
    4a48:	429a      	cmp	r2, r3
    4a4a:	d100      	bne.n	4a4e <memcpy+0xa>
    4a4c:	bd10      	pop	{r4, pc}
    4a4e:	5ccc      	ldrb	r4, [r1, r3]
    4a50:	54c4      	strb	r4, [r0, r3]
    4a52:	3301      	adds	r3, #1
    4a54:	e7f8      	b.n	4a48 <memcpy+0x4>

00004a56 <memset>:
    4a56:	0003      	movs	r3, r0
    4a58:	1882      	adds	r2, r0, r2
    4a5a:	4293      	cmp	r3, r2
    4a5c:	d100      	bne.n	4a60 <memset+0xa>
    4a5e:	4770      	bx	lr
    4a60:	7019      	strb	r1, [r3, #0]
    4a62:	3301      	adds	r3, #1
    4a64:	e7f9      	b.n	4a5a <memset+0x4>
    4a66:	0000      	movs	r0, r0
    4a68:	2e2e3231 	.word	0x2e2e3231
    4a6c:	0046452e 	.word	0x0046452e
    4a70:	0000221c 	.word	0x0000221c
    4a74:	0000222a 	.word	0x0000222a
    4a78:	000022c4 	.word	0x000022c4
    4a7c:	00002364 	.word	0x00002364
    4a80:	000023c8 	.word	0x000023c8

00004a84 <_usb_device_irq_bits>:
    4a84:	00080004 00800070 01000001 00000200     ....p...........

00004a94 <_usb_endpoint_irq_bits>:
    4a94:	60100c03                                ...`

00004a98 <_tcc_intflag>:
    4a98:	00000001 00000002 00000004 00000008     ................
    4aa8:	00001000 00002000 00004000 00008000     ..... ...@......
    4ab8:	00010000 00020000 00040000 00080000     ................
    4ac8:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    4ad8:	42001800 42001c00 00003df6 00003df2     ...B...B.=...=..
    4ae8:	00003df2 00003e58 00003e58 00003e0a     .=..X>..X>...>..
    4af8:	00003dfc 00003e10 00003e46 00003f60     .=...>..F>..`?..
    4b08:	00003f40 00003f40 00003fcc 00003f52     @?..@?...?..R?..
    4b18:	00003f6e 00003f44 00003f7c 00003fbc     n?..D?..|?...?..

00004b28 <_init>:
    4b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b2a:	46c0      	nop			; (mov r8, r8)
    4b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b2e:	bc08      	pop	{r3}
    4b30:	469e      	mov	lr, r3
    4b32:	4770      	bx	lr

00004b34 <__init_array_start>:
    4b34:	000000dd 	.word	0x000000dd

00004b38 <_fini>:
    4b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b3e:	bc08      	pop	{r3}
    4b40:	469e      	mov	lr, r3
    4b42:	4770      	bx	lr

00004b44 <__fini_array_start>:
    4b44:	000000b5 	.word	0x000000b5
